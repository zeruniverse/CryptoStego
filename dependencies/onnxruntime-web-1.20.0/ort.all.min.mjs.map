{"version":3,"sources":["../../common/lib/backend-impl.ts","../../common/lib/backend.ts","../../common/lib/version.ts","../../common/lib/env-impl.ts","../../common/lib/env.ts","../../common/lib/tensor-conversion-impl.ts","../../common/lib/tensor-factory-impl.ts","../../common/lib/tensor-impl-type-mapping.ts","../../common/lib/tensor-utils-impl.ts","../../common/lib/tensor-impl.ts","../../common/lib/tensor.ts","../../common/lib/trace.ts","../../common/lib/inference-session-impl.ts","../../common/lib/inference-session.ts","../../common/lib/tensor-conversion.ts","../../common/lib/tensor-factory.ts","../../common/lib/onnx-model.ts","../../common/lib/onnx-value.ts","../../common/lib/training-session-impl.ts","../../common/lib/training-session.ts","../../common/lib/index.ts","../lib/onnxjs/instrument.ts","../lib/onnxjs/opset.ts","../node_modules/guid-typescript/dist/guid.js","../node_modules/long/index.js","../node_modules/flatbuffers/js/flatbuffers.mjs","../lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/protobufjs/src/util/longbits.js","../node_modules/protobufjs/src/util/minimal.js","../node_modules/protobufjs/src/writer.js","../node_modules/protobufjs/src/writer_buffer.js","../node_modules/protobufjs/src/reader.js","../node_modules/protobufjs/src/reader_buffer.js","../node_modules/protobufjs/src/rpc/service.js","../node_modules/protobufjs/src/rpc.js","../node_modules/protobufjs/src/roots.js","../node_modules/protobufjs/src/index-minimal.js","../node_modules/protobufjs/minimal.js","../lib/onnxjs/ort-schema/protobuf/onnx.js","../lib/onnxjs/util.ts","../lib/onnxjs/tensor.ts","../lib/onnxjs/backends/webgl/glsl-source.ts","../lib/onnxjs/backends/webgl/types.ts","../lib/onnxjs/backends/webgl/utils.ts","../lib/onnxjs/backends/webgl/ops/packing-utils.ts","../lib/onnxjs/backends/webgl/ops/pack.ts","../lib/onnxjs/backends/webgl/ops/reshape-packed.ts","../lib/onnxjs/backends/webgl/ops/uint8-encode.ts","../lib/onnxjs/backends/webgl/ops/unpack.ts","../lib/onnxjs/backends/webgl/texture-data-encoder.ts","../lib/onnxjs/backends/webgl/texture-layout.ts","../lib/onnxjs/backends/webgl/inference-handler.ts","../lib/onnxjs/attribute-with-cache-key.ts","../lib/onnxjs/backends/webgl/ops/batch-normalization.ts","../lib/onnxjs/backends/webgl/glsl-definitions.ts","../lib/onnxjs/backends/webgl/ops/binary-op.ts","../lib/onnxjs/backends/webgl/ops/cast.ts","../lib/onnxjs/backends/webgl/ops/concat-packed.ts","../lib/onnxjs/backends/webgl/ops/concat.ts","../lib/onnxjs/backends/webgl/ops/unary-op.ts","../lib/onnxjs/backends/webgl/ops/fuse-utils.ts","../lib/onnxjs/backends/webgl/ops/conv-grouped.ts","../lib/onnxjs/backends/webgl/ops/im2col-pack.ts","../lib/onnxjs/backends/webgl/ops/matmul.ts","../lib/onnxjs/backends/webgl/ops/matmul-pack.ts","../lib/onnxjs/backends/webgl/ops/conv-pack.ts","../lib/onnxjs/backends/webgl/ops/im2col.ts","../lib/onnxjs/backends/webgl/ops/dot-product.ts","../lib/onnxjs/backends/webgl/ops/conv.ts","../lib/onnxjs/backends/webgl/ops/conv-transpose.ts","../lib/onnxjs/backends/webgl/ops/transpose.ts","../lib/onnxjs/backends/webgl/ops/depth-to-space.ts","../lib/onnxjs/backends/webgl/ops/flatten.ts","../lib/onnxjs/operators.ts","../lib/onnxjs/backends/webgl/ops/gather.ts","../lib/onnxjs/backends/webgl/ops/gemm.ts","../lib/onnxjs/backends/webgl/ops/image-scaler.ts","../lib/onnxjs/backends/webgl/ops/instance-normalization.ts","../lib/onnxjs/backends/webgl/ops/lrn.ts","../lib/onnxjs/backends/webgl/ops/pad.ts","../lib/onnxjs/backends/webgl/ops/pool.ts","../lib/onnxjs/backends/webgl/ops/reduce.ts","../lib/onnxjs/backends/webgl/ops/reshape.ts","../lib/onnxjs/backends/webgl/ops/upsample.ts","../lib/onnxjs/backends/webgl/ops/resize-packed.ts","../lib/onnxjs/backends/webgl/ops/shape.ts","../lib/onnxjs/backends/webgl/ops/slice.ts","../lib/onnxjs/backends/webgl/ops/softmax.ts","../lib/onnxjs/backends/webgl/ops/split.ts","../lib/onnxjs/backends/webgl/ops/squeeze.ts","../lib/onnxjs/backends/webgl/ops/sum.ts","../lib/onnxjs/backends/webgl/ops/tile.ts","../lib/onnxjs/backends/webgl/ops/unsqueeze.ts","../lib/onnxjs/backends/webgl/op-resolve-rules.ts","../lib/onnxjs/backends/webgl/glsl-function-inliner.ts","../lib/onnxjs/backends/webgl/texture-layout-strategy.ts","../lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","../lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","../lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","../lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","../lib/onnxjs/backends/webgl/glsl-vec-lib.ts","../lib/onnxjs/backends/webgl/glsl-registered-libs.ts","../lib/onnxjs/backends/webgl/glsl-preprocessor.ts","../lib/onnxjs/backends/webgl/program-manager.ts","../lib/onnxjs/backends/webgl/texture-manager.ts","../lib/onnxjs/backends/webgl/session-handler.ts","../lib/onnxjs/backends/webgl/webgl-context.ts","../lib/onnxjs/backends/webgl/webgl-context-factory.ts","../lib/onnxjs/backends/backend-webgl.ts","../lib/onnxjs/backend.ts","../lib/onnxjs/execution-plan.ts","../lib/onnxjs/attribute.ts","../lib/onnxjs/graph.ts","../lib/onnxjs/model.ts","../lib/onnxjs/session.ts","../lib/onnxjs/session-handler-inference.ts","../lib/backend-onnxjs.ts","../lib/wasm/wasm-utils-env.ts","../lib/wasm/proxy-worker/main.ts","../lib/wasm/wasm-utils-import.ts","../lib/wasm/wasm-factory.ts","../lib/wasm/wasm-utils.ts","../lib/wasm/run-options.ts","../lib/wasm/session-options.ts","../lib/wasm/wasm-common.ts","../lib/wasm/wasm-utils-load-file.ts","../lib/wasm/jsep/log.ts","../lib/wasm/jsep/tensor-view.ts","../lib/wasm/jsep/webgpu/types.ts","../lib/wasm/jsep/webgpu/gpu-data-manager.ts","../lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","../lib/wasm/jsep/util.ts","../lib/wasm/jsep/webgpu/ops/common.ts","../lib/wasm/jsep/webgpu/ops/transpose.ts","../lib/wasm/jsep/webgpu/ops/reduce-shared.ts","../lib/wasm/jsep/webgpu/ops/reduce.ts","../lib/wasm/jsep/webgpu/ops/argminmax.ts","../lib/wasm/jsep/webgpu/ops/attention.ts","../lib/wasm/jsep/webgpu/ops/batch-norm.ts","../lib/wasm/jsep/webgpu/ops/bias-add.ts","../lib/wasm/jsep/webgpu/ops/unary-op.ts","../lib/wasm/jsep/webgpu/ops/bias-split-gelu.ts","../lib/wasm/jsep/webgpu/ops/binary-op.ts","../lib/wasm/jsep/webgpu/ops/concat.ts","../lib/wasm/jsep/webgpu/ops/fuse-utils.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv3d_naive_webgpu.ts","../lib/wasm/jsep/webgpu/ops/conv-grouped.ts","../lib/wasm/jsep/webgpu/ops/matmul.ts","../lib/wasm/jsep/webgpu/ops/conv.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_mm_webgpu.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts","../lib/wasm/jsep/webgpu/ops/conv-transpose.ts","../lib/wasm/jsep/webgpu/ops/cumsum.ts","../lib/wasm/jsep/webgpu/ops/depth-to-space.ts","../lib/wasm/jsep/webgpu/ops/einsum.ts","../lib/wasm/jsep/webgpu/ops/expand.ts","../lib/wasm/jsep/webgpu/ops/fast-gelu.ts","../lib/wasm/jsep/webgpu/ops/gather.ts","../lib/wasm/jsep/webgpu/ops/gather-block-quantized.ts","../lib/wasm/jsep/webgpu/ops/gather-elements.ts","../lib/wasm/jsep/webgpu/ops/gemm.ts","../lib/wasm/jsep/webgpu/ops/multihead-attention.ts","../lib/wasm/jsep/webgpu/ops/tile.ts","../lib/wasm/jsep/webgpu/ops/group-query-attention.ts","../lib/wasm/jsep/webgpu/ops/instance-norm.ts","../lib/wasm/jsep/webgpu/ops/layer-norm.ts","../lib/wasm/jsep/webgpu/ops/matmulnbits.ts","../lib/wasm/jsep/webgpu/ops/pad.ts","../lib/wasm/jsep/webgpu/ops/pool.ts","../lib/wasm/jsep/webgpu/ops/quantize-linear.ts","../lib/wasm/jsep/webgpu/ops/range.ts","../lib/wasm/jsep/webgpu/ops/resize.ts","../lib/wasm/jsep/webgpu/ops/rotary-embedding.ts","../lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts","../lib/wasm/jsep/webgpu/ops/slice.ts","../lib/wasm/jsep/webgpu/ops/softmax.ts","../lib/wasm/jsep/webgpu/ops/split.ts","../lib/wasm/jsep/webgpu/ops/where.ts","../lib/wasm/jsep/webgpu/op-resolve-rules.ts","../lib/wasm/jsep/webgpu/program-manager.ts","../lib/wasm/jsep/backend-webgpu.ts","../lib/wasm/jsep/webnn/tensor-manager.ts","../lib/wasm/jsep/backend-webnn.ts","../lib/wasm/jsep/init.ts","../lib/wasm/wasm-core-impl.ts","../lib/wasm/proxy-wrapper.ts","../lib/wasm/session-handler-inference.ts","../lib/backend-wasm.ts","../lib/index.ts","../lib/version.ts"],"names":["backends","backendsSortedByPriority","registerBackend","tryResolveAndInitializeBackend","resolveBackendAndExecutionProviders","init_backend_impl","__esmMin","name","backend","priority","currentBackend","i","backendName","backendInfo","isInitializing","e","options","eps","backendHints","backendNames","errors","availableBackendNames","resolveResult","err","filteredEps","target","prop","init_backend","version","init_version","logLevelValue","env","init_env_impl","value","init_env","tensorToDataURL","tensorToImageData","init_tensor_conversion_impl","tensor","canvas","pixels2DContext","width","height","inputformat","norm","normMean","normBias","stride","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","j","R","G","B","A","image","channels","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","bufferToTensor","tensorFromImage","tensorFromTexture","tensorFromGpuBuffer","tensorFromMLTensor","tensorFromPinnedBuffer","init_tensor_factory_impl","init_tensor_impl","buffer","outputformat","float32Data","Tensor","isHTMLImageEle","isImageDataEle","isImageBitmap","isString","data","bufferToTensorOptions","createCanvas","createCanvasContext","tempCanvas","resolve","reject","context","newImage","img","texture","download","dispose","dims","gpuBuffer","dataType","mlTensor","type","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isTypedArrayChecked","checkTypedArray","init_tensor_impl_type_mapping","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","isFloat16ArrayAvailable","calculateSize","tensorReshape","init_tensor_utils_impl","size","dim","arg0","arg1","arg2","expectedTypedArrayConstructor","maybeDims","typedArrayConstructor","firstElementType","mappedType","releaseData","init_tensor","TRACE","TRACE_FUNC","TRACE_FUNC_BEGIN","TRACE_FUNC_END","init_trace","deviceType","label","msg","extraMsg","stack","hasTraceFunc","InferenceSession","init_inference_session_impl","_InferenceSession","handler","feeds","fetches","isFetchesEmpty","isFetches","arg1Keys","v","results","returnValue","key","result","arg3","filePathOrUint8Array","byteOffset","byteLength","optionsWithValidatedEPs","init_inference_session","init_tensor_conversion","init_tensor_factory","init_onnx_model","init_onnx_value","noBackendErrMsg","TrainingSession","init_training_session_impl","_TrainingSession","hasOptimizerModel","hasEvalModel","trainingOptions","sessionOptions","evalModel","optimizerModel","inputNames","outputNames","trainableOnly","array","paramsSize","init_training_session","esm_exports","__export","init_esm","log","createCategorizedLogger","logInternal","category","severity","content","_stack","config","LOGGER_CONFIG_MAP","SEVERITY_VALUE","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","Logger","Event","EventRecord","Profiler","now","init_instrument","_severity","_content","_category","verbose","info","warning","error","fatal","reset","set","previousConfig","setWithEnv","startTime","endCallback","timer","ctx","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","func","event","isPromise","res","reason","eventRes","currentTime","previousPointer","resolveOperator","node","opsets","rules","rule","opType","domain","versionSelector","opImpl","opInit","opset","matchSelector","selector","rangeStart","pair","rangeEnd","init_opset","require_guid","__commonJSMin","exports","Guid","guid","count","out","other","Long","low","high","unsigned","isLong","obj","ctz32","c","fromInt","cachedObj","cache","UINT_CACHE","fromBits","INT_CACHE","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","fromString","str","radix","p","radixToPower","pow_dbl","power","fromValue","val","wasm","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","long_default","init_long","radixLong","div","rem1","rem","remDiv","intval","digits","bit","thisNeg","otherNeg","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtrahend","multiplier","divisor","approx","halfThis","log2","delta","approxRes","approxRem","numBits","b","le","hi","lo","bytes","flatbuffers","init_flatbuffers","opt_initial_size","initial_size","forceDefaults","additional_bytes","align_size","old_buf_size","byte_size","voffset","defaultValue","bb","new_buf_size","nbb","offset","numfields","vtableloc","trimmed_size","standard_fields","len","existing_vtable","vt1","outer_loop","vt2","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","table","field","table_start","vtable_start","ok","elem_size","num_elems","alignment","s","utf8","codePoint","a","position","bb_pos","vtable_offset","vtable","t","opt_encoding","length","d","ident","onnxruntime","init_ort_generated","experimental","fbs","AttributeType","DimensionValueType","TensorDataType","NodeType","TypeInfoValue","Shape","index","builder","dimOffset","numElems","Dimension","optionalEncoding","valueOffset","denotationOffset","DimensionValue","dimType","dimValue","dimParamOffset","TensorTypeAndShape","elemType","shapeOffset","MapType","keyType","valueTypeOffset","SequenceType","elemTypeOffset","EdgeEnd","node_index","src_arg_index","dst_arg_index","NodeEdge","nodeIndex","inputEdgesOffset","outputEdgesOffset","Node","nameOffset","docStringOffset","domainOffset","sinceVersion","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","implicitInputsOffset","ValueInfo","typeOffset","TypeInfo","valueType","OperatorSetId","dimsOffset","rawDataOffset","stringDataOffset","SparseTensor","valuesOffset","indicesOffset","Attribute","f","sOffset","tOffset","gOffset","floatsOffset","intsOffset","stringsOffset","tensorsOffset","graphsOffset","Graph","initializersOffset","nodeArgsOffset","nodesOffset","maxNodeIndex","nodeEdgesOffset","sparseInitializersOffset","Model","irVersion","opsetImportOffset","producerNameOffset","producerVersionOffset","modelVersion","graphOffset","graphDocStringOffset","KernelCreateInfos","nodeIndicesOffset","kernelDefHashesOffset","SubGraphSessionState","graphIdOffset","sessionStateOffset","SessionState","kernelsOffset","subGraphSessionStatesOffset","ortVersionOffset","modelOffset","require_aspromise","module","asPromise","fn","params","pending","require_base64","base64","string","n","b64","s64","start","end","parts","chunk","invalidEncoding","require_eventemitter","EventEmitter","evt","listeners","args","require_float","factory","f32","f8b","writeFloat_f32_cpy","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","sign","exponent","mantissa","writeUintLE","writeUintBE","readFloat_ieee754","readUint","uint","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDouble_ieee754","off0","off1","readDouble_ieee754","require_inquire","require_utf8","c1","c2","require_pool","pool","alloc","slice","SIZE","MAX","slab","require_longbits","LongBits","util","zero","zeroHash","charCodeAt","hash","mask","part0","part1","part2","require_minimal","Buffer","sizeOrArray","bits","merge","dst","src","ifNotSet","keys","newError","CustomError","message","properties","fieldNames","fieldMap","encoding","require_writer","Writer","BufferWriter","Op","noop","State","writer","create","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeBytes","head","tail","BufferWriter_","require_writer_buffer","writeStringBuffer","require_reader","Reader","BufferReader","indexOutOfRange","reader","writeLength","create_array","readLongVarint","readFixed32_end","readFixed64","nativeBuffer","wireType","BufferReader_","require_reader_buffer","require_service","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","callback","self","response","endedByRPC","require_rpc","rpc","require_roots","require_index_minimal","protobuf","configure","require_onnx","$protobuf","$Reader","$Writer","$util","$root","onnx","valuesById","values","AttributeProto","tag","end2","object","long","typeUrlPrefix","ValueInfoProto","NodeProto","TrainingInfoProto","ModelProto","StringStringEntryProto","TensorAnnotation","GraphProto","TensorProto","Segment","SparseTensorProto","TensorShapeProto","$oneOfFields","TypeProto","Sequence","Map","Optional","OperatorSetIdProto","FunctionProto","assert","expr","decodeUtf8String","import_onnx","ArrayUtil","MatMulUtil","BroadcastUtil","GemmUtil","ProtoUtil","LongUtil","ShapeUtil","SplitUtil","PoolConvUtil","MIN_CLIP","MAX_CLIP","init_util","n1","n2","dimsA","dimsB","outputShape","aRank","bRank","_BroadcastUtil","adims","bdims","isMatMul","arank","brank","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","op","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","shape","finalShape","inputRank","finalRank","inputShape","inRank","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","_ProtoUtil","typeProto","attributes","_ShapeUtil","axis","rank","strides","indices","tensorRank","axes","x","axisToIncrementOn","k","originalDims","shapeHints","nDims","reshapedDims","unknownDimension","newTensorSize","oldTensorSize","perm","pad","shape1","shape2","total","y","right","outputDims","inSqueezeList","inputDimsIterator","_SplitUtil","split","numOutputs","shapes","offsets","numElementsAlongAxis","_PoolConvUtil","isGlobalOperator","inputDims","kernelShape","dilations","pads","autoPad","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","sizeof","sizeofProto","createView","dataBuffer","dataviewConstructor","longToNumber","ortFbs","readProto","view","import_guid_typescript","_Tensor","dataProvider","asyncDataProvider","dataId","empty","constructor","tensorProto","dataDest","dataSource","elementSize","element","ortTensor","getGlsl","GLSL_ES_2_0","GLSL_ES_3_0","getVertexShaderSource","glsl","getFragShaderPreamble","getDefaultFragShaderMain","outputShapeLength","init_glsl_source","init_types","repeatedTry","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","generateShaderFuncNameFromInputSamplerName","samplerName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","squeezeInputShape","squeezedShape","newInputShape","getSqueezedParams","keptDims","getCoordsDataType","getGlChannels","init_utils","getVecChannels","getChannels","unpackFromChannel","init_packing_utils","getOutOfBoundsCondition","cond","getOutput","coord00","coord01","coord10","coord11","D","getSetup","rows","cols","packProgramMetadata","createPackProgramInfo","createPackProgramInfoLoader","init_pack","input","outputRank","coordsDataType","setup","reversedInputWH","outOfBoundsCondition","output","shaderSource","processDims3D","batch","isReshapeCheap","isCheapReshape","getReshapedInputCoords","coords","line1","line2","getFlattenedIndexFrom3D","createPackedReshape3DProgramMetadata","createPackedReshape3DProgramInfo","createPackedReshape3DProgramInfoLoader","init_reshape_packed","outputShape3D","input3D","metadata","inputShape3D","squeezedOutputShape","mainLoop","outputCoords","encodeAsUint8","init_uint8_encode","inferenceHandler","programInfo","getSourceCoords","unpackProgramMetadata","createUnpackProgramInfo","createUnpackProgramInfoLoader","init_unpack","innerDims","unpackChannel","sourceCoords","RedFloat32DataEncoder","RGBAFloatDataEncoder","Uint8DataEncoder","init_texture_data_encoder","gl","textureSize","source","dataSize","_value","textureType","dest","_textureSize","createTextureLayoutFromTextureType","calculateTextureWidthAndHeight","createTextureLayoutFromShape","init_texture_layout","textureLayoutStrategy","channel","isPacked","reverseWH","breakAxis","unpackedShape","layout","prefs","inferredDims","getProgramInfoUniqueKey","WebGLInferenceHandler","init_inference_handler","inputTextureDatas","inputs","session","program","artifact","outputTextureLayout","outputTextureData","td","adjustedKernelShape","adjustedLayout","numFeatureMaps","oldRowSize","newRowSize","newSize","oldOffset","newOffset","unpackedTextureLayout","unpackedTextureData","usage","inputTD","newTextureLayout","squeezedInputShape","squeezedInputTensor","squeezedOutputTensor","tensorId","textureData","_id","AttributeWithCacheKeyImpl","createAttributeWithCacheKey","init_attribute_with_cache_key","attribute","batchNormalizationProgramMetadata","batchNormalization","parseBatchNormalizationAttributes","createBatchNormalizationProgramInfo","validateInputs","init_batch_normalization","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","mean","var_","GlslContext","GlslLib","GlslLibRoutine","GlslLibRoutineNode","TopologicalSortGlslRoutines","init_glsl_definitions","glContext","inputTextureLayouts","routineBody","dependencies","nodes","cycleCheck","alreadyTraversed","graphNodes","root","glslAdd","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","fname","createBinaryProgramInfoLoader","createBinaryProgramInfo","add","and","equal","greater","less","mul","or","pow","pRelu","sub","xor","init_binary_op","glslFunc","outputTensorType","cacheKey","isBroadcast","usePackedTexture","calculatedShape","aBcast","bBcast","cast","parseCastAttributes","init_cast","to","createPackedConcatProgramMetadata","createPackedConcatProgramInfo","createPackedConcatProgramInfoLoader","getShiftedChannelsSnippet","init_concat_packed","inputCount","cacheHint","_v","dataNShape","axisIndex","dtype","lastChannels","allChannels","getValueSnippet","shift","lastIndex","channelIdx","idx","concat","createUnpackedConcatProgramMetadata","createUnpackedConcatProgramInfo","createUnpackedConcatProgramInfoLoader","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","parseConcatAttributes","init_concat","_handler","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","fetchDataFromCorrectTextureMethod","getSizeInConcatAxisValueFromIndexMethod","numberOfTensors","codeLines","inputType","inputDimensionality","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","alpha","glslExp","glslFloor","glslClip","min","max","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslRelu","glslSigmoid","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfo","createElementwiseProgramInfoLoader","abs","acos","asin","atan","clip","parseClipAttributes","clipV11","generateClipAttributesFromInputs","ceil","cos","elu","parseEluAttributes","exp","floor","identity","leakyRelu","parseLeakyReluAttributes","neg","not","relu","sigmoid","sin","sqrt","tan","tanh","init_unary_op","getActivationSnippet","activationName","activationFunction","applyActivation","parseInternalActivationAttributes","init_fuse_utils","activation","clipMin","clipMax","createUnpackedGroupedConvProgramMetadata","createUnpackedGroupedConvProgramInfo","createUnpackedGroupedConvProgramInfoLoader","init_conv_grouped","init_conv","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","calculateOutputShape","createPackedIm2ColProgramMetadata","createPackedIm2ColProgramInfo","createPackedIm2ColProgramInfoLoader","init_im2col_pack","w","xshape","wshape","rowDim","colDim","im2colShape","kernelSize","unrolled","row","col","createMatmulProgramInfo","activationAttributes","aShape","bShape","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","sharedDim","createMatmulProgramInfoLoader","createMatmulProgramMetadata","inShape","outShape","unpackedCoordsSnippet","outRank","rankDiff","_s","coordsSnippet","isInputScalar","matMul","parseMatMulAttributes","init_matmul","init_matmul_pack","createPackedMatmulProgramInfoLoader","getBcastSamplerForMatmul","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getA","getB","createPackedMatmulProgramMetadata","createPackedMatmulProgramInfo","sharedDimIndex","getBcastedSamplerForMatmulSnippet","getSamplerAInLoopSnippet","getSamplerBInLoopSnippet","getOutputCoordsSnippet","conv2DPacked","init_conv_pack","kshape","im2colOutput","kernelReshaped","matmulInputs","matmulOutput","createIm2ColProgramMetadata","createIm2ColProgramInfo","createIm2ColProgramInfoLoader","calculateIm2ColDims","init_im2col","_inferenceHandler","im2colDims","createDotProductProgramMetadata","createDotProductProgramInfo","createDotProductProgramInfoLoader","init_dot_product","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","conv","conv2d","conv2DUnpackedPointwise","conv2DUnpacked","getAdjustedConvAttributes","parseConvAttributes","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","adjustedAttributes","packMode","isPointwise","reshapedX","reshapedK","xIm2Col","dotProductInputs","newAttributes","group","dataChannel","filterInChannel","computeTotalPad","distributePadding","calculateOutputShapeAndPads","convTranspose","convTranspose2d","createConvTransposeProgramMetadata","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","convTranspose2DUnpacked","getAdjustedConvTransposeAttributes","parseConvTransposeAttributes","init_conv_transpose","inDim","adj","outSize","totalPad","smallPad","outputPadding","updateShape","valueInit","inputChannelsPerGroup","featureMaps","transposeProgramMetadata","transpose","parseTransposeAttributes","createTransposeProgramInfo","getAdjustedPerm","getOutputShape","getPermFunctionBody","init_transpose","unpackedOutputShape","reverseFunc","depthToSpace","parseDepthToSpaceAttributes","init_depth_to_space","blocksize","blocksizeSqr","transposePerm","firstReshapeShape","firstReshapedTensor","transposeAttributes","transposeOutput","secondReshapeShape","mode","flatten","parseFlattenAttributes","init_flatten","r","NUMBER_TYPES","init_operators","gather","parseGatherAttributes","gatherProgramMetadata","createGatherProgramInfo","createGatherProgramInfoLoader","init_gather","indexDataShape","indexCopyOps","orank","irank","iDrank","gemm","parseGemmAttributes","parseGemmAttributesV7","parseGemmAttributesV11","createGemmProgramInfoLoader","createGemmProgramInfo","init_gemm","isOptionalC","transA","transB","beta","line","declareC","broadcastC","calculateC","imageScaler","parseImageScalerAttributes","imageScalerProgramMetadata","createImageScalerProgramInfo","createImageScalerProgramInfoLoader","createGetBiasMethod","init_image_scaler","bias","numChannels","instanceNormalization","parseInstanceNormalizationAttributes","meanAndVarianceProgramMetadata","createMeanAndVarianceProgramInfo","createMeanAndVarianceProgramInfoLoader","computeOutputProgramMetadata","createComputeOutputProgramInfo","createComputeOutputProgramInfoLoader","init_instance_normalization","meanAndVariance","xDims","channelSize","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createLrnProgramInfo","C","from","lrnProgramMetadata","createLrnProgramInfoLoader","lrn","parseLrnAttributes","init_lrn","padProgramMetadata","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","generatePadAttributesFromInputs","createPadProgramInfo","validateInputsV2","validateInputsV11","getPadFunction","getPadConstant","getPadReflect","getPadEdge","init_pad","attrubutes","block","averagePool","parseAveragePoolAttributes","createAveragePoolProgramInfo","globalAveragePool","parseGlobalAveragePoolAttributes","maxPool","parseMaxPoolAttributes","createMaxPoolProgramInfo","getAdjustedPoolAttributesAndOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","globalMaxPool","generatePoolingCode","copyArray","offsetToIndices","init_pool","ceilMode","countIncludePad","op1","op2","storageOrder","hasDilations","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyPads","copyKernelStrides","copyStrides","hasPads","sum","cur","padCode","arrayName","reduce","parseReduceAttributes","createReduceProgramInfo","reduceSum","reduceMean","reduceMax","reduceMin","reduceProd","reduceLogSum","reduceLogSumSquare","init_reduce","reduceOp","reduceProgramMetadata","keepDims","_name","iRank","idxCopy","ops","reduceOps","idxZero","reshape","init_reshape","upsampleProgramMetadata","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","parseUpsampleAttributes","createUpsampleProgramInfo","scalesValidation","init_upsample","isResize","scales","extrapolationValue","coordinateTransformMode","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","scalesInputIdx","sizesInputIdx","inputWidth","inputHeight","outputWidth","outputHeight","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","resizeProgramMetadata","resize","parseResizeAttributesV10","parseResizeAttributesV11","createPackedResizeProgramInfo","prepareInputs","parseScalesData","parseScalesDataFromOutputSize","init_resize_packed","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","sizesTensor","yDims","init_shape","sliceProgramMetadata","parseSliceAttributes","createSliceProgramInfo","sliceV10","generateSliceAttributesFromInputs","validateInputsV10","init_slice","starts","ends","_val","normalizedAxes","sliceOps","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","softmax","parseSoftmaxAttributes","parseSoftmaxAttributesV13","softmaxV13","computeSoftmax","createComputeMaxProgramInfo","createComputScaleProgramInfo","createSoftMaxProgramInfo","init_softmax","logicalRowCount","featureCount","isTransposeRequired","transposedInputShape","transposedInputs","transposeAttribute","_","computeMaxProgramInfo","computeScaleProgramInfo","softMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","parseSplitAttributes","getProgramCount","createSplitProgramInfo","init_split","squeeze","squeezeV13","parseSqueezeAttributes","validateInputsV13","init_squeeze","createSumProgramInfo","init_sum","sumProgramMetadata","tile","createTileProgramInfo","init_tile","tileProgramMetadata","tileOps","unsqueeze","unsqueezeV13","parseUnsqueezeAttributes","init_unsqueeze","WEBGL_OP_RESOLVE_RULES","init_op_resolve_rules","replaceInlines","script","inlineDefs","match","INLINE_FUNC_DEF_REGEX","tokens","regexString","FUNC_CALL_REGEX","regex","variable","declLine","newBody","paramRedecLine","replacement","init_glsl_function_inliner","squeezeShape","newShape","isEmptyArray","parseAxisParam","ax","isInt","sizeFromShape","sizeToSquarishShape","PreferLogicalStrategy","init_texture_layout_strategy","maxTextureSize","wh","wsize","hsize","logShape","_d","CoordsGlslLib","init_glsl_coordinate_lib","funcName","outputLayout","outTexShape","floatTextureSetRGBASource","floatTextureSetRGBAFuncName","floatTextureSetRSource","floatTextureSetRFuncName","_shape","texShape","packedTexShape","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coordsToCompute","coordsFromIndexSnippet","inputLayout","outCoordFuncName","texFuncSnippet","broadcastDims","fields","isOutputScalar","swapLastDimsSnippet","inTexShape","texNumR","texNumC","packedSampler","valuesPerRow","newInputLayout","samplerRoutine","tNumR","tNumC","stride0","stride1","routine","revDims","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","varName","EncodingGlslLib","init_glsl_encoding_lib","_EncodingGlslLib","endianness","FragColorGlslLib","init_glsl_fragcolor_lib","ShapeUtilsGlslLib","init_glsl_shape_utils_lib","_ShapeUtilsGlslLib","shapeInit","VecGlslLib","init_glsl_vec_lib","nameOp","assignmentBlock","glslRegistry","init_glsl_registered_libs","GlslPreprocessor","init_glsl_preprocessor","lib","map","libName","routinesInLib","currentNode","routinesIncluded","routines","classAndRoutine","samplers","variables","uniformLines","sampler","ProgramManager","init_program_manager","profiler","buildArtifact","preprocessor","fragScript","fragShaderScript","vertexShaderScript","fragShader","attribLocations","positionHandle","textureCoordHandle","uniformLocations","textures","texturePosition","location","arrayLength","uniformHandle","reference","TextureManager","init_texture_manager","layoutStrategy","textureDataType","encoder","inUseTextures","idleTextures","subscribers","tensorData","deleteTexture","_dataType","WebGLSessionHandler","init_session_handler","graph","initializers","linearSearchLastTrue","arr","WebGLContext","init_webgl_context","vertexShader","shaderType","shader","unit","geometry","fb","internalFormat","frameBuffer","isComplete","fragmentShader","gl2","ext","query","available","disjoint","timeElapsed","fenceContext","isFencePassed","status","resolveFn","isDoneFn","createWebGLContext","contextId","offscreenCanvas","createOffscreenCanvas","createNewWebGLContext","contextAttributes","ca","init_webgl_context_factory","WebGLBackend","init_backend_webgl","resolveBackend","hint","hints","backendHint","backendsCache","tryLoadBackend","backendObj","isBackend","init","o","KernelOp","ExecutionPlan","init_execution_plan","resolved","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","_output","currentDownstreamNodeIndex","currentDownstreamNode","outputIndex","outputTensor","init_attribute","_Attribute","attr","valueAndType","attrType","numberValue","maybeLong","ints","strings","tensors","Value","GraphImpl","init_graph","graphProto","initializer","valueInfo","_nodeProto","graphInitializer","dataIndices","nodesIndices","inputValueNames","currentIndex","nodeProto","pick","dataIndex","inputName","outputName","starters","nodesStack","nodesState","outgoingEdgeIndex","downstreamNodeIndex","newIndices","nodePossition","ind","currentData","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","next","child","init_model","isOrtFormat","onnxError","modelProto","ortModel","opsetId","Session","init_session","arg","modelProtoBlob","outputTensors","modelInputNames","sortedInputs","sortedInputsIndex","modelInputIndices","modelValues","graphInputDims","graphInput","graphInputTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","modelOutputNames","OnnxjsSessionHandler","init_session_handler_inference","_fetches","_options","inputMap","feed","outputMap","backend_onnxjs_exports","onnxjsBackend","OnnxjsBackend","init_backend_onnxjs","pathOrBuffer","init_wasm_utils_env","main_exports","main_default","WORKER_NAME","isProxyWorker","init_main","init_wasm_core_impl","init_wasm_factory","init_wasm_utils_import","ev","initializeWebAssembly","initRuntime","epName","initEp","bufferData","copyFromExternalBuffer","model","createSession","sessionMetadata","releaseSession","sessionId","inputIndices","run","outputs","extractTransferableBuffers","endProfiling","urlOverride","scriptSrc","origin","isSameOrigin","normalizeUrl","fallbackUrl","preload","dynamicImportDefault","createProxyWorker","importProxyWorker","importWasmModule","filename","prefixOverride","baseUrl","absoluteUrl","blob","url","isMultiThreaded","wasmModuleFilename","wasmModuleUrl","needPreload","initialized","initializing","aborted","isMultiThreadSupported","isSimdSupported","getInstance","flags","timeout","numThreads","multiThreadSupported","wasmPaths","wasmPrefixOverride","mjsPathOverrideFlag","mjsPathOverride","wasmPathOverrideFlag","wasmPathOverride","wasmBinaryOverride","objectUrl","ortWasmFactory","isTimeout","tasks","fileName","scriptDirectory","what","allocWasmString","iterateExtraOptions","checkLastError","init_wasm_utils","allocs","dataLength","dataOffset","prefix","seen","paramsOffset","errorCode","errorMessagePointer","errorMessage","setRunOptions","init_run_options","runOptionsHandle","runOptions","tagDataOffset","keyDataOffset","valueDataOffset","getGraphOptimzationLevel","getExecutionMode","appendDefaultOptions","setExecutionProviders","setSessionOptions","init_session_options","graphOptimizationLevel","executionMode","ep","sessionOptionsHandle","executionProviders","webgpuOptions","epNameDataOffset","logIdDataOffset","logSeverityLevel","logVerbosityLevel","optimizedModelFilePathOffset","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","calculateTensorSizeInBytes","tensorTypeToTypedArrayConstructor","logLevelStringToEnum","isGpuBufferSupportedType","isMLTensorSupportedType","dataLocationStringToEnum","init_wasm_common","dateType","dimsOrSize","logLevel","loadFile","init_wasm_utils_load_file","file","readFile","createReadStream","stream","chunks","contentLengthHeader","fileSize","pages","done","chunkSize","logLevelPrefix","doLog","configLogLevel","debug","configureLogger","LOG","LOG_DEBUG","init_log","level","$configLogLevel","$debug","messageLevel","configLevel","init_tensor_view","bucketFreelist","bucketArr","calcNormalizedBufferSize","calcBucketBufferSize","createNewGpuDataId","downloadGpuData","GpuDataManagerImpl","createGpuDataManager","init_gpu_data_manager","sizeForBucket","originalSize","getTargetBuffer","bufferSize","gpuReadBuffer","commandEncoder","arrayBuffer","targetBuffer","id","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","gpuBufferForUploading","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","previous","isStorage","isUniform","buffers","gpuData","cachedData","maxInFreeList","freelist","capturedBuffers","storage","pendingBuffers","newDims","isChannelLast","WORKGROUP_SIZE","getWgslMappedType","tensorTypeToWsglStorageType","tensorTypeToWsglValueType","createTensorShapeVariables","getMaxComponents","fillVector","castToF32","sumVector","getElementAt","createIndicesHelper","inputVariable","outputVariable","internalVariable","ShaderHelperImpl","createShaderHelper","getBroadcastDims","init_common","components","programUniforms","tensorType","shapeOrRank","useUniform","rankIdentity","indicesType","storageType","normalizeDim","implementationUsed","uniformPrefix","o2iSnippet","offsetToIndicesImplementation","varOffset","indicesToOffsetImplementation","indicesToOffset","varIndices","indicesGet","indicesSet","broadcastedIndicesToOffsetImplementation","broadcastedIndicesToOffset","implKey","setByOffset","getByOffset","getByIndicesImplementation","getImplementation","functionParams","dimsParams","get","normalizedIndices","getByIndices","setByIndicesImplementation","setImplementation","impls","needShapeStrides","impl","indicesAndValue","normalizedDispatchGroup","limits","workgroupSize","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","paramList","globalIdxDefinition","bindingIndex","access","additionalUniforms","uniformSnippets","typeTemp","uniformWgslTypeToDataType","u","dispatchGroup","permFunctionBody","adjustedPerm","newPerm","inputTensor","permAttr","inputDataType","channelsLast","channelsFirst","useShared","newOutputShape","tileSize","getShaderSource","shaderHelper","outputSize","reduceSharedOps","reduceInitValues","reduceOutputValues","getInnerMostAxes","computeOutAndReduceShapes","expandShapeToKeepDim","areAxesInnerMostDims","getAxesPermutation","createReduceSharedProgramInfo","reduceCommon","reduceMeanShared","reduceL1Shared","reduceL2Shared","reduceLogSumExpShared","reduceMaxShared","reduceMinShared","reduceProdShared","reduceSumShared","reduceSumSquareShared","reduceLogSumShared","init_reduce_shared","numInnerAxes","reduceShape","expandShape","shapeIdx","shaderCache","reduceType","outputDataType","reduceSize","sharedMemorySnippet","updatedAttributes","createReduceAttributesFromInputs","updatedAxes","_dim","normalizeAxes","permutedAxes","finalOutputShape","noOp","runReduceProgram","reduceLogSumNaive","reduceL1Naive","reduceL2Naive","reduceLogSumExpNaive","reduceMaxNaive","reduceMeanNaive","reduceMinNaive","reduceProdNaive","reduceSumNaive","reduceSumSquareNaive","useNaiveReduceMethod","reduceL1","reduceL2","reduceLogSumExp","reduceSumSquare","axesInput","noopWithEmptyAxes","reduceOnAllAxes","l","argMin","argMax","parseArgMinMaxAttributes","init_argminmax","argMinMaxOp","validateAttentionInputs","createInPlaceSoftmaxProgramInfo","createAttentionProbsProgramInfo","createVxAttentionScoreProgramInfo","applyAttention","prepare","attention","init_attention","weights","maskIndex","past","attentionBias","sequenceLength","inputHiddenSize","qHiddenSize","kHiddenSize","vHiddenSize","sz","kvSequenceLength","pastSequenceLength","totalSequenceLength","maxSequenceLength","maskType","WG","dComp","elementsPerThread","f32Type","inputDependencies","inputHelper","elemValueType","uniforms","outputCount","q","pastKey","parameters","probsShape","presentKey","presentKeyShape","vectorizedHeadSize","TILE_SIZE","dispatch","feedPastKey","qInput","kInput","inputVars","pastKeyInput","outputVars","probs","pastValue","nReps","repeatedVHiddenSize","presentValue","presentValueShape","feedPastValue","probsHelper","vHelper","_maskIndex","_past","attentionBiasInput","inputsK","inputsV","outputQ","outputK","outputV","weight","createBatchNormInferenceProgramInfo","parseBatchNormAttributes","batchNorm","init_batch_norm","checkShapeEqual","actual","expected","format","yShape","cComponents","useShapesUniforms","inputMean","inputVar","calcCOffset","cOffset","getInferenceModeShaderSource","helper","createBiasAddProgramInfo","biasAdd","init_bias_add","residual","createElementwiseProgramShader","acosh","asinh","atanh","cosh","parseAlphaAttributes","erfImpl","erf","gelu","reciprocal","parseHardSigmoidAttributes","hardSigmoid","sinh","tanhExpression","fastGeluImpl","fastGeluExpression","fastGelu","thresholdedRelu","quickGeluImpl","quickGeluExpression","quickgelu","datasize","funcCall","additionalImplementation","additionalUniformsType","vecSize","expression","hasMin","hasMax","clipAttributes","varType","dType","createBiasSplitGeluProgramInfo","biasSplitGelu","init_bias_split_gelu","createBinaryOpProgramShader","createBinaryOpProgramInfo","runBinaryOp","greaterOrEqual","lessOrEqual","dimsOutput","vectorize","doBroadcast","sharedDimensionDivisibleBy4","typeA","typeB","typeOutput","expressionScalar","expressionVector","assignment","isAOneElement","isBOneElement","aLastDimDivisibleBy4","bLastDimDivisibleBy4","singleAssignment","resStr","typeCast","expressionA","expressionB","cacheKeyAux","sharedDimension","dimA","dimB","calculateInputIndexImpl","assignOutputData","createConcatProgramInfo","referenceIndex","referenceInput","sizeInConcatAxisStr","returnSnippet","adjustedAxis","inputRanks","indicesAxis","nonEmptyInputs","appendActivationUniformsData","appendActivationUniforms","baseType","programUniform","typeSnippet","biasSnippet","init_activation_util","component","utilFunctions","init_conv_util","strideStr","writeDataToSubAVec4Snippet","calculateResultSnippet","makeMatMulPackedVec4Source","writeDataToSubASnippet","readDataFromSubASnippet","makeMatMulPackedSource","matMulReadWriteFnSource","init_matmul_packed_webgpu","batchDims","transposeA","innerElementSize","workPerThread","tileInner","splitK","splitedDimInner","tileAOuter","tileBOuter","tileAWidth","tileAHight","rowPerThreadB","sequentialAccessByThreads","rowPerThreadA","colPerThreadA","matmulSnippet","batchShapes","isChannelsLast","batchAShape","batchBShape","batchShape","batchVariable","aVariable","bVariable","broadCastADims","broadCastBDims","getAIndices","batchRank","getBIndices","reshapedOutputShape","squeezeOutputShapeFunction","outerDimsA","outerDimsB","outerDims","dimAOuter","dimInner","dimBOuter","isVec4","aShapeTemp","bShapeTemp","outputShapeTemp","inputVariables","biasComponents","declareFunctions","conv2dCommonSnippet","createConv2DMatMulProgramInfo","init_conv2d_mm_webgpu","fitAOuter","fitBOuter","fitInner","addBias","innerElementSizeX","innerElementSizeW","getXSnippet","getWSnippet","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","sampleX","sampleW","resType","aType","bType","inChannels","outWidth","outHeight","dispatchX","dispatchY","workGroupSize","elementsSize","arrayProduct","parse3TupleParam","getEffectiveFilterSize","computeDefaultPad","computeOutputShape4D","get3DPadAndOutInfo","computeConv3DInfo","createConv3DNaiveProgramInfo","init_conv3d_naive_webgpu","product","param","filterSize","fieldSize","effectiveFieldSize","filterShape","zeroPad","inDepth","inHeight","inWidth","strideDepth","strideHeight","strideWidth","filterDepth","filterHeight","filterWidth","padInfo","outDepth","padAlongDepth","padAlongHeight","padAlongWidth","front","back","top","bottom","left","depthwise","dataFormat","filterChannels","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","dispatchLayout","createGroupedConvProgramInfo","createGroupedConvVectorizeProgramInfo","outputChannels","calculateResult","outputNumber","outputShapeInShader","xNumber","createNaiveMatmulProgramInfo","aComponents","getIndices","broadCastDims","calcResult","calcStr","weightTransposeAttribute","conv1d","conv3d","wIsConst","convInputs","transposedWeight","inputChannels","weightHeight","weightWidth","sameSize","xReshaped","wReshaped","matmulOutputShape","convInfo","conv2dTransposeCommonSnippet","createConv2DTransposeMatMulProgramInfo","init_conv_backprop_mm_webgpu","readASnippet","sampleA","effectiveFilterDims","createConvTranspose2DOpProgramShaderSource","createConvTranspose2DProgramInfo","init_conv_backprop_webgpu","channelDim","dy","codeSnippet4","codeSnippet","weightTransposePerm","convTranspose1d","updateOutputShape","convTransposeInputs","createCumsumProgramInfo","cumsum","parseCumSumAttributes","init_cumsum","axisInput","axisValue","lowerLimit","upperLimit","exclusive","reverse","createDepthToSpaceProgramInfo","h","isDCRmode","reshapedInputTensor","reshapedInputRank","reshapedInput","permedOutput","shapeBeforePerm","shapeAfterPerm","symbolPattern","termPattern","termPatternOnly","lhsPattern","lhsPatternOnly","EinsumTerm","EinsumEquation","appendMax","createEinsumProgramInfo","einsum","parseEinsumAttributes","init_einsum","inputIndex","symbol","equation","lhs","rhs","inputTerm","einsumTerm","sym","term","isInput","ellipsis","ellipsisDims","nextDim","indexSymbols","ellipsisDimLength","inputShapes","einsumEquation","uniformsSymbols","initProd","initSum","updateSum","reduceOpsSetIndices","reduceOpsLoopHeaders","reduceOpsLoopFooters","reduceOpCompute","isReduceOpsWithoutLoop","_var","programUniformsInit","acc","inputProgramUniforms","getAdjustedShape","createExpandProgramInfo","expand","init_expand","shapeIndex","inputShapeIndex","diff","createFastGeluProgramInfo","init_fast_gelu","biasLength","useVec4","singleElementBias","biasGetExpression","indicesShape","axisDimLimit","calcDataIndices","indicesRank","createGatherBlockQuantizedProgramInfo","gatherBlockQuantized","parseGatherBlockQuantizedAttributes","init_gather_block_quantized","quantizeAxis","blockSize","zeroPoint","gatherAxis","outputType","isSigned","_i","createGatherElementsProgramInfo","parseGatherElementsAttributes","gatherElements","init_gather_elements","inputOutputDataType","indicesDataType","calculateAlpha","getInput","parseMultiHeadAttentionAttributes","addBiasTranspose","maybeTransposeToBNSHAndAddBias","multiHeadAttention","init_multihead_attention","keyPaddingMask","hiddenSize","headSize","qkvFormat","maskDims","passPastInKv","broadcastResPosBias","qkv","biasOffset","qkvInput","biasInput","numHeads","kvBNSH","Q","V","getRepeats","repeatsTensorView","repeats","parseGroupQueryAttentionAttributes","maybeExpandAndTransposeToBNSH","groupQueryAttention","init_group_query_attention","dmmhaPacking","hasPastKey","hasPastValue","isPastkvBSNH","presentSequenceLength","inputA","inputB","H","pastStr","newStr","concatStr","pastKV","computeChannelScaleShift","createInstanceNormProgramInfo","createInstanceNormNHWCProgramInfo","instanceNorm","init_instance_norm","wgType","unitsOfWork","channelScaleShift","scaleShape","transposedXPerm","transposedX","scaleType","scaleData","num","outputHelper","createLayerNormProgramInfo","layerNorm","init_layer_norm","simplified","normCount","normSize","scaleSize","biasSize","meanInvStdDevDim","hasMeanDataOutput","hasInvStdOutput","createMatMulNBitsProgramInfo","createMatMulNBitsBlockSize32ProgramInfo","matMulNBits","parseMatMulNBitsAttributes","init_matmulnbits","nBlocksPerCol","blobSize","scalesShape","zeroPointsShape","expectedZeroPointsSize","blobSizeInWords","bComponents","dispatchSize","inputShapeTemp","zeroPoints","qDqDataType","processOneWord","prepareScaleAndZeroPoint","prepareBData","workgroupY","workgroupX","aLengthPerTile","blocksPerTile","readA","getPadWrap","getPadSnippet","createPadAttributesFromInputs","validPads","padsLength","isValueFromInput","padSnippet","bigInt64Pads","updatePads","getUniformAndPadInfo","createShaderKeyFromAttributes","createAveragePoolShaderKeyFromAttributes","createMaxPoolShaderKeyFromAttributes","parsePoolCommonAttributes","globalPoolAttributes","parseGlobalMaxPoolAttributes","inputShapeAsChannelFirst","outputShapeAsChannelFirst","outputShapeAsChannelLast","pwStartEndNotZero","phStartEndNotZero","outputShapeRank","dimIdxW","dimIdxH","averagePoolAttributes","maxPoolAttributes","createDequantizeLinearProgramInfo","dequantizeLinear","parseDequantizeLinearAttributes","init_quantize_linear","dI","si","zeroPointInput","zeroPointShape","perLayerQuantization","perAxisQuantization","maxComponents","useComponents","inputComponent","validateInputsContent","createRangeProgramInfo","range","init_range","limit","sameStartLimit","increasingRangeNegativeStep","decreasingRangePositiveStep","numElements","wgslType","validateScales","updateScales","getOriginalCoordinateFromResizedCoordinate","getNearestPixelFromOriginal","updateRoI","initOutputShape","adjustOutputShape","calculateOriginalIndicesFromOutputIndices","calculateInputIndicesFromOutputIndices","checkInputIndices","setChannelAndBatchIndices","bilinearInterpolation","bicubicInterpolation","trilinearInterpolation","createResizeProgramInfo","getOpsetVersionFromCustomDataBuffer","parseResizeAttributes","init_resize","newScales","opsetVersion","sizes","roi","roiInputIndex","scalesInputIndex","sizesInputIndex","coordinateTransferMode","roiTmp","roiLocal","scaleInPolicy","adjustedOutputShape","scalesLength","roiLength","batchIdx","spacialDims","heightIdx","widthIdx","cubicCoeffA","is2D","isNchw","createCubicInterpolationFunction","direction","depthIdx","scalesInput","roiInput","noScale","customDataBuffer","antialias","keepAspectRatioPolicy","createRotaryEmbeddingProgramInfo","rotaryEmbedding","init_rotary_embedding","positionIds","cosCache","sinCache","rotaryEmbeddingDim","interleaved","batchStride","halfRotaryEmbeddingDim","globalShape","globalStrides","createSkipLayerNormProgramInfo","skipLayerNorm","init_skip_layer_norm","skip","gamma","isTraining","inputSize","hasBetaInput","hasBiasInput","hasMeanOutput","hasInvStdDevOutput","hasInputSkipBiasSumOutput","uniformsArray","vecDataType","_input","_index","readInput","createSliceAttributesFromInputs","fixStartEndValues","calculateInputIndicesImpl","steps","newValue","signs","numSteps","newEnd","newStart","outputTensorInfo","createSoftmaxProgramInfo","transposedInput","packedCols","maxVector","threadMaxDecl","createSplitAttributesFromInputs","calculateOutputIndexImpl","writeBufferDataImpl","splitSizes","sizeInSplitAxis","outputsTensorInfo","outputShapes","createWhereOpProgramShader","createWhereOpProgramInfo","where","init_where","expressionC","dimsC","WEBGPU_OP_RESOLVE_RULES","uniformBufferBinding","device","computePassEncoder","entries","bindGroup","commandInfo","normalizedDispatchGroupSize","extensions","userCode","code","shaderModule","computePipeline","z","limitPerDimension","dispatchAverage","getProgramInputTensorInfoDependencyKey","AdapterInfoImpl","WebGpuBackend","init_backend_webgpu","inputInfos","adapterInfo","architecture","vendor","adapter","requiredFeatures","deviceDescriptor","computePassDescriptor","queryReadBuffer","mappedData","pendingKernels","pendingKernelInfo","kernelId","kernelInfo","kernelType","kernelName","programName","inputTensorViews","outputTensorViews","startTimeU64","endTimeU64","createKernelOutput","createIntermediateOutput","inputDatas","validatedOutputIndices","outputDatas","isTemporary","isPersistent","tensorView","persistentData","currentOffset","sizeOfElement","sizeOfVecOrMat","baseAlignment","elementPerVecOrMat","maxAlignmentOfField","uniformBufferData","uniform","actualLength","gpuDataId","ptr","kernelEntry","useErrorScope","sessionInputOutputMapping","previousBuffer","bufferInfo","sessionCommandList","sessionPendingKernels","command","tensorGuid","createNewTensorId","TensorTracker","TensorManagerImpl","createTensorManager","init_tensor_manager","mlContext","tensorEntry","tryMLTensor","copyOld","existingDataType","existingShape","dstBuffer","tensorTracker","onnxDataTypeToWebnnDataType","WebNNBackend","init_backend_webnn","sessionIds","onnxDataType","dimensions","webnnDataType","init_exports","TensorViewImpl","ComputeContextImpl","init_init","_TensorViewImpl","elementCount","contextDataOffset","heapU32","inputsOutputsMapping","mappedInputs","createTemporaryOutput","gpuAdapter","jsepInit","isSourceGpu","sessionHandle","initOrt","activeSessions","getSessionInputOutputCount","prepareInputOutputTensor","loggingLevel","initJsep","powerPreference","forceFallbackAdapter","modelDataOffset","modelData","modelDataLength","ioBindingHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","loadingPromises","path","provider","webnnOptions","gpuDevice","enableGraphCapture","outputPreferredLocations","nameString","bindingState","ioBindingState","tensorHandles","rawData","dataByteLength","registerBuffer","registerMLTensor","dimIndex","inputOutputBound","runOptionsAllocs","inputTensorHandles","outputTensorHandles","inputOutputAllocs","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","handle","outputPreferredLocationsEncoded","beforeGetTensorDataStack","tensorDataOffset","keepOutputTensor","tensorDataIndex","dimsLength","preferredLocation","stringData","maxBytesToRead","getBuffer","ensureTensor","profileFileName","isProxy","proxyWorker","temporaryObjectUrl","initWasmCallbacks","queuedCallbacks","enqueueCallbacks","ensureWorker","onProxyWorkerMessage","initializeWebAssemblyAndOrtRuntime","initializeOrtEp","init_proxy_wrapper","callbacks","queue","worker","transferable","serializableInputs","encodeTensorMetadata","decodeTensorMetadata","OnnxruntimeWebAssemblySessionHandler","getName","inputArray","kvp","outputArray","resultMap","backend_wasm_exports","OnnxruntimeWebAssemblyBackend","initializeFlags","wasmBackend","init_backend_wasm","numCpuLogicalCores","lib_default"],"mappings":"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AK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IA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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Backend } from './backend.js';\nimport { InferenceSession } from './inference-session.js';\n\ninterface BackendInfo {\n  backend: Backend;\n  priority: number;\n\n  initPromise?: Promise<void>;\n  initialized?: boolean;\n  aborted?: boolean;\n  error?: string;\n}\n\nconst backends: Map<string, BackendInfo> = new Map();\nconst backendsSortedByPriority: string[] = [];\n\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @ignore\n */\nexport const registerBackend = (name: string, backend: Backend, priority: number): void => {\n  if (backend && typeof backend.init === 'function' && typeof backend.createInferenceSessionHandler === 'function') {\n    const currentBackend = backends.get(name);\n    if (currentBackend === undefined) {\n      backends.set(name, { backend, priority });\n    } else if (currentBackend.priority > priority) {\n      // same name is already registered with a higher priority. skip registeration.\n      return;\n    } else if (currentBackend.priority === priority) {\n      if (currentBackend.backend !== backend) {\n        throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n      }\n    }\n\n    if (priority >= 0) {\n      const i = backendsSortedByPriority.indexOf(name);\n      if (i !== -1) {\n        backendsSortedByPriority.splice(i, 1);\n      }\n\n      for (let i = 0; i < backendsSortedByPriority.length; i++) {\n        if (backends.get(backendsSortedByPriority[i])!.priority <= priority) {\n          backendsSortedByPriority.splice(i, 0, name);\n          return;\n        }\n      }\n      backendsSortedByPriority.push(name);\n    }\n    return;\n  }\n\n  throw new TypeError('not a valid backend');\n};\n\n/**\n * Try to resolve and initialize a backend.\n *\n * @param backendName - the name of the backend.\n * @returns the backend instance if resolved and initialized successfully, or an error message if failed.\n */\nconst tryResolveAndInitializeBackend = async (backendName: string): Promise<Backend | string> => {\n  const backendInfo = backends.get(backendName);\n  if (!backendInfo) {\n    return 'backend not found.';\n  }\n\n  if (backendInfo.initialized) {\n    return backendInfo.backend;\n  } else if (backendInfo.aborted) {\n    return backendInfo.error!;\n  } else {\n    const isInitializing = !!backendInfo.initPromise;\n    try {\n      if (!isInitializing) {\n        backendInfo.initPromise = backendInfo.backend.init(backendName);\n      }\n      await backendInfo.initPromise;\n      backendInfo.initialized = true;\n      return backendInfo.backend;\n    } catch (e) {\n      if (!isInitializing) {\n        backendInfo.error = `${e}`;\n        backendInfo.aborted = true;\n      }\n      return backendInfo.error!;\n    } finally {\n      delete backendInfo.initPromise;\n    }\n  }\n};\n\n/**\n * Resolve execution providers from the specific session options.\n *\n * @param options - the session options object.\n * @returns a promise that resolves to a tuple of an initialized backend instance and a session options object with\n * filtered EP list.\n *\n * @ignore\n */\nexport const resolveBackendAndExecutionProviders = async (\n  options: InferenceSession.SessionOptions,\n): Promise<[backend: Backend, options: InferenceSession.SessionOptions]> => {\n  // extract backend hints from session options\n  const eps = options.executionProviders || [];\n  const backendHints = eps.map((i) => (typeof i === 'string' ? i : i.name));\n  const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n\n  // try to resolve and initialize all requested backends\n  let backend: Backend | undefined;\n  const errors = [];\n  const availableBackendNames = new Set<string>();\n  for (const backendName of backendNames) {\n    const resolveResult = await tryResolveAndInitializeBackend(backendName);\n    if (typeof resolveResult === 'string') {\n      errors.push({ name: backendName, err: resolveResult });\n    } else {\n      if (!backend) {\n        backend = resolveResult;\n      }\n      if (backend === resolveResult) {\n        availableBackendNames.add(backendName);\n      }\n    }\n  }\n\n  // if no backend is available, throw error.\n  if (!backend) {\n    throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(', ')}`);\n  }\n\n  // for each explicitly requested backend, if it's not available, output warning message.\n  for (const { name, err } of errors) {\n    if (backendHints.includes(name)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `removing requested execution provider \"${name}\" from session options because it is not available: ${err}`,\n      );\n    }\n  }\n\n  const filteredEps = eps.filter((i) => availableBackendNames.has(typeof i === 'string' ? i : i.name));\n\n  return [\n    backend,\n    new Proxy(options, {\n      get: (target, prop) => {\n        if (prop === 'executionProviders') {\n          return filteredEps;\n        }\n        return Reflect.get(target, prop);\n      },\n    }),\n  ];\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { TrainingSession } from './training-session.js';\n\n/**\n * @ignore\n */\nexport declare namespace SessionHandler {\n  type FeedsType = { [name: string]: OnnxValue };\n  type FetchesType = { [name: string]: OnnxValue | null };\n  type ReturnType = { [name: string]: OnnxValue };\n}\n\n/**\n * Represents shared SessionHandler functionality\n *\n * @ignore\n */\ninterface SessionHandler {\n  dispose(): Promise<void>;\n\n  readonly inputNames: readonly string[];\n  readonly outputNames: readonly string[];\n}\n\n/**\n * Represent a handler instance of an inference session.\n *\n * @ignore\n */\nexport interface InferenceSessionHandler extends SessionHandler {\n  startProfiling(): void;\n  endProfiling(): void;\n\n  run(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType>;\n}\n\n/**\n * Represent a handler instance of a training inference session.\n *\n * @ignore\n */\nexport interface TrainingSessionHandler extends SessionHandler {\n  readonly evalInputNames: readonly string[];\n  readonly evalOutputNames: readonly string[];\n\n  lazyResetGrad(): Promise<void>;\n  runTrainStep(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType>;\n  runOptimizerStep(options: InferenceSession.RunOptions): Promise<void>;\n  runEvalStep(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType>;\n\n  getParametersSize(trainableOnly: boolean): Promise<number>;\n  loadParametersBuffer(buffer: Uint8Array, trainableOnly: boolean): Promise<void>;\n  getContiguousParameters(trainableOnly: boolean): Promise<OnnxValue>;\n}\n\n/**\n * Represent a backend that provides implementation of model inferencing.\n *\n * @ignore\n */\nexport interface Backend {\n  /**\n   * Initialize the backend asynchronously. Should throw when failed.\n   */\n  init(backendName: string): Promise<void>;\n\n  createInferenceSessionHandler(\n    uriOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n\n  createTrainingSessionHandler?(\n    checkpointStateUriOrBuffer: TrainingSession.UriOrBuffer,\n    trainModelUriOrBuffer: TrainingSession.UriOrBuffer,\n    evalModelUriOrBuffer: TrainingSession.UriOrBuffer,\n    optimizerModelUriOrBuffer: TrainingSession.UriOrBuffer,\n    options: InferenceSession.SessionOptions,\n  ): Promise<TrainingSessionHandler>;\n}\n\nexport { registerBackend } from './backend-impl.js';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.20.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from './env.js';\nimport { version } from './version.js';\n\ntype LogLevelType = Env['logLevel'];\n\nlet logLevelValue: Required<LogLevelType> = 'warning';\n\nexport const env: Env = {\n  wasm: {} as Env.WebAssemblyFlags,\n  webgl: {} as Env.WebGLFlags,\n  webgpu: {} as Env.WebGpuFlags,\n  versions: { common: version },\n\n  set logLevel(value: LogLevelType) {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n      throw new Error(`Unsupported logging level: ${value}`);\n    }\n    logLevelValue = value;\n  },\n  get logLevel(): Required<LogLevelType> {\n    return logLevelValue;\n  },\n};\n\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(env, 'logLevel', { enumerable: true });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env as envImpl } from './env-impl.js';\n\nexport declare namespace Env {\n  export type WasmPathPrefix = string;\n  export interface WasmFilePaths {\n    /**\n     * Specify the override path for the main .wasm file.\n     *\n     * This path should be an absolute path.\n     *\n     * If not modified, the filename of the .wasm file is:\n     * - `ort-wasm-simd-threaded.wasm` for default build\n     * - `ort-wasm-simd-threaded.jsep.wasm` for JSEP build (with WebGPU and WebNN)\n     * - `ort-training-wasm-simd-threaded.wasm` for training build\n     */\n    wasm?: URL | string;\n    /**\n     * Specify the override path for the main .mjs file.\n     *\n     * This path should be an absolute path.\n     *\n     * If not modified, the filename of the .mjs file is:\n     * - `ort-wasm-simd-threaded.mjs` for default build\n     * - `ort-wasm-simd-threaded.jsep.mjs` for JSEP build (with WebGPU and WebNN)\n     * - `ort-training-wasm-simd-threaded.mjs` for training build\n     */\n    mjs?: URL | string;\n  }\n  export type WasmPrefixOrFilePaths = WasmPathPrefix | WasmFilePaths;\n  export interface WebAssemblyFlags {\n    /**\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\n     * to 1, no worker thread will be spawned.\n     *\n     * This setting is available only when WebAssembly multithread feature is available in current context.\n     *\n     * @defaultValue `0`\n     */\n    numThreads?: number;\n\n    /**\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\n     *\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\n     *\n     * @deprecated This property is deprecated. Since SIMD is supported by all major JavaScript engines, non-SIMD\n     * build is no longer provided. This property will be removed in future release.\n     * @defaultValue `true`\n     */\n    simd?: boolean;\n\n    /**\n     * set or get a boolean value indicating whether to enable trace.\n     *\n     * @deprecated Use `env.trace` instead. If `env.trace` is set, this property will be ignored.\n     * @defaultValue `false`\n     */\n    trace?: boolean;\n\n    /**\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\n     * value indicates no timeout is set.\n     *\n     * @defaultValue `0`\n     */\n    initTimeout?: number;\n\n    /**\n     * Set a custom URL prefix to the .wasm/.mjs files, or an object of overrides for both .wasm/.mjs file. The override\n     * path should be an absolute path.\n     */\n    wasmPaths?: WasmPrefixOrFilePaths;\n\n    /**\n     * Set a custom buffer which contains the WebAssembly binary. If this property is set, the `wasmPaths` property will\n     * be ignored.\n     */\n    wasmBinary?: ArrayBufferLike | Uint8Array;\n\n    /**\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\n     *\n     * @defaultValue `false`\n     */\n    proxy?: boolean;\n  }\n\n  export interface WebGLFlags {\n    /**\n     * Set or get the WebGL Context ID (webgl or webgl2).\n     *\n     * @defaultValue `'webgl2'`\n     */\n    contextId?: 'webgl' | 'webgl2';\n    /**\n     * Get the WebGL rendering context.\n     */\n    readonly context: WebGLRenderingContext;\n    /**\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\n     *\n     * @deprecated\n     */\n    matmulMaxBatchSize?: number;\n    /**\n     * Set or get the texture cache mode.\n     *\n     * @defaultValue `'full'`\n     */\n    textureCacheMode?: 'initializerOnly' | 'full';\n    /**\n     * Set or get the packed texture mode\n     *\n     * @defaultValue `false`\n     */\n    pack?: boolean;\n    /**\n     * Set or get whether enable async download.\n     *\n     * @defaultValue `false`\n     */\n    async?: boolean;\n  }\n\n  export interface WebGpuProfilingDataV1TensorMetadata {\n    dims: readonly number[];\n    dataType: string;\n  }\n  export interface WebGpuProfilingDataV1 {\n    version: 1;\n    inputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    outputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    kernelId: number;\n    kernelType: string;\n    kernelName: string;\n    programName: string;\n    startTime: number;\n    endTime: number;\n  }\n\n  export type WebGpuProfilingData = WebGpuProfilingDataV1;\n\n  export interface WebGpuFlags {\n    /**\n     * Set or get the profiling mode.\n     *\n     * @deprecated Use `env.webgpu.profiling.mode` instead. If `env.webgpu.profiling.mode` is set, this property will be\n     * ignored.\n     */\n    profilingMode?: 'off' | 'default';\n    /**\n     * Set or get the profiling configuration.\n     */\n    profiling?: {\n      /**\n       * Set or get the profiling mode.\n       *\n       * @defaultValue `'off'`\n       */\n      mode?: 'off' | 'default';\n\n      /**\n       * Set or get a callback function when a profiling data is received. If not set, the profiling data will be\n       * printed to console.\n       */\n      ondata?: (data: WebGpuProfilingData) => void;\n    };\n    /**\n     * Set or get the power preference.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     */\n    powerPreference?: 'low-power' | 'high-performance';\n    /**\n     * Set or get the force fallback adapter flag.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     */\n    forceFallbackAdapter?: boolean;\n    /**\n     * Set or get the adapter for WebGPU.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as the GPU adapter for the underlying WebGPU backend to create GPU device.\n     *\n     * If this property is not set, it will be available to get after the first WebGPU inference session is created. The\n     * value will be the GPU adapter that created by the underlying WebGPU backend.\n     *\n     * When use with TypeScript, the type of this property is `GPUAdapter` defined in \"@webgpu/types\".\n     * Use `const adapter = env.webgpu.adapter as GPUAdapter;` in TypeScript to access this property with correct type.\n     *\n     * see comments on {@link Tensor.GpuBufferType}\n     */\n    adapter: unknown;\n    /**\n     * Get the device for WebGPU.\n     *\n     * This property is only available after the first WebGPU inference session is created.\n     *\n     * When use with TypeScript, the type of this property is `GPUDevice` defined in \"@webgpu/types\".\n     * Use `const device = env.webgpu.device as GPUDevice;` in TypeScript to access this property with correct type.\n     *\n     * see comments on {@link Tensor.GpuBufferType} for more details about why not use types defined in \"@webgpu/types\".\n     */\n    readonly device: unknown;\n    /**\n     * Set or get whether validate input content.\n     *\n     * @defaultValue `false`\n     */\n    validateInputContent?: boolean;\n  }\n}\n\nexport interface Env {\n  /**\n   * set the severity level for logging.\n   *\n   * @defaultValue `'warning'`\n   */\n  logLevel?: 'verbose' | 'info' | 'warning' | 'error' | 'fatal';\n\n  /**\n   * Indicate whether run in debug mode.\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n\n  /**\n   * set or get a boolean value indicating whether to enable trace.\n   *\n   * @defaultValue `false`\n   */\n  trace?: boolean;\n\n  /**\n   * Get version of the current package.\n   */\n  readonly versions: {\n    readonly common: string;\n    readonly web?: string;\n    readonly node?: string;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    readonly 'react-native'?: string;\n  };\n\n  /**\n   * Represent a set of flags for WebAssembly\n   */\n  readonly wasm: Env.WebAssemblyFlags;\n\n  /**\n   * Represent a set of flags for WebGL\n   */\n  readonly webgl: Env.WebGLFlags;\n\n  /**\n   * Represent a set of flags for WebGPU\n   */\n  readonly webgpu: Env.WebGpuFlags;\n\n  [name: string]: unknown;\n}\n\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env: Env = envImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorToDataUrlOptions, TensorToImageDataOptions } from './tensor-conversion.js';\nimport { Tensor } from './tensor.js';\n\n/**\n * implementation of Tensor.toDataURL()\n */\nexport const tensorToDataURL = (tensor: Tensor, options?: TensorToDataUrlOptions): string => {\n  const canvas = typeof document !== 'undefined' ? document.createElement('canvas') : new OffscreenCanvas(1, 1);\n  canvas.width = tensor.dims[3];\n  canvas.height = tensor.dims[2];\n  const pixels2DContext = canvas.getContext('2d') as\n    | CanvasRenderingContext2D\n    | OffscreenCanvasRenderingContext2D\n    | null;\n\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[3];\n    } else {\n      // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n    }\n\n    const inputformat = options?.format !== undefined ? options.format : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof norm.mean === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof norm.bias === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    // Default pointer assignments\n    let rTensorPointer = 0,\n      gTensorPointer = stride,\n      bTensorPointer = stride * 2,\n      aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        const R = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0]; // R value\n        const G = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1]; // G value\n        const B = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2]; // B value\n        const A = aTensorPointer === -1 ? 255 : ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3]; // A value\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n        pixels2DContext.fillRect(j, i, 1, 1);\n      }\n    }\n    if ('toDataURL' in canvas) {\n      return canvas.toDataURL();\n    } else {\n      throw new Error('toDataURL is not supported');\n    }\n  } else {\n    throw new Error('Can not access image data');\n  }\n};\n\n/**\n * implementation of Tensor.toImageData()\n */\nexport const tensorToImageData = (tensor: Tensor, options?: TensorToImageDataOptions): ImageData => {\n  const pixels2DContext =\n    typeof document !== 'undefined'\n      ? document.createElement('canvas').getContext('2d')\n      : (new OffscreenCanvas(1, 1).getContext('2d') as OffscreenCanvasRenderingContext2D);\n  let image: ImageData;\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    let channels: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[1];\n      channels = tensor.dims[3];\n    } else {\n      // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n      channels = tensor.dims[1];\n    }\n    const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof norm.mean === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof norm.bias === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    if (options !== undefined) {\n      if (\n        (options.format !== undefined && channels === 4 && options.format !== 'RGBA') ||\n        (channels === 3 && options.format !== 'RGB' && options.format !== 'BGR')\n      ) {\n        throw new Error(\"Tensor format doesn't match input tensor dims\");\n      }\n    }\n\n    // Default pointer assignments\n    const step = 4;\n    let rImagePointer = 0,\n      gImagePointer = 1,\n      bImagePointer = 2,\n      aImagePointer = 3;\n    let rTensorPointer = 0,\n      gTensorPointer = stride,\n      bTensorPointer = stride * 2,\n      aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    image = pixels2DContext.createImageData(width, height);\n\n    for (\n      let i = 0;\n      i < height * width;\n      rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++\n    ) {\n      image.data[rImagePointer] = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0]; // R value\n      image.data[gImagePointer] = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1]; // G value\n      image.data[bImagePointer] = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2]; // B value\n      image.data[aImagePointer] =\n        aTensorPointer === -1 ? 255 : ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3]; // A value\n    }\n  } else {\n    throw new Error('Can not access image data');\n  }\n  return image;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  OptionsDimensions,\n  OptionsFormat,\n  OptionsNormalizationParameters,\n  OptionsTensorFormat,\n  OptionsTensorLayout,\n  TensorFromGpuBufferOptions,\n  TensorFromImageBitmapOptions,\n  TensorFromImageDataOptions,\n  TensorFromImageElementOptions,\n  TensorFromMLTensorOptions,\n  TensorFromTextureOptions,\n  TensorFromUrlOptions,\n} from './tensor-factory.js';\nimport { Tensor } from './tensor-impl.js';\nimport { Tensor as TensorInterface } from './tensor.js';\n\ninterface BufferToTensorOptions\n  extends OptionsDimensions,\n    OptionsTensorLayout,\n    OptionsNormalizationParameters,\n    OptionsFormat,\n    OptionsTensorFormat {}\n\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nexport const bufferToTensor = (buffer: Uint8ClampedArray | undefined, options: BufferToTensorOptions): Tensor => {\n  if (buffer === undefined) {\n    throw new Error('Image buffer must be defined');\n  }\n  if (options.height === undefined || options.width === undefined) {\n    throw new Error('Image height and width must be defined');\n  }\n  if (options.tensorLayout === 'NHWC') {\n    throw new Error('NHWC Tensor layout is not supported yet');\n  }\n\n  const { height, width } = options;\n\n  const norm = options.norm ?? { mean: 255, bias: 0 };\n  let normMean: [number, number, number, number];\n  let normBias: [number, number, number, number];\n\n  if (typeof norm.mean === 'number') {\n    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n  } else {\n    normMean = [norm.mean![0], norm.mean![1], norm.mean![2], norm.mean![3] ?? 255];\n  }\n\n  if (typeof norm.bias === 'number') {\n    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n  } else {\n    normBias = [norm.bias![0], norm.bias![1], norm.bias![2], norm.bias![3] ?? 0];\n  }\n\n  const inputformat = options.format !== undefined ? options.format : 'RGBA';\n  // default value is RGBA since imagedata and HTMLImageElement uses it\n\n  const outputformat =\n    options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n  const stride = height * width;\n  const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n\n  // Default pointer assignments\n  let step = 4,\n    rImagePointer = 0,\n    gImagePointer = 1,\n    bImagePointer = 2,\n    aImagePointer = 3;\n  let rTensorPointer = 0,\n    gTensorPointer = stride,\n    bTensorPointer = stride * 2,\n    aTensorPointer = -1;\n\n  // Updating the pointer assignments based on the input image format\n  if (inputformat === 'RGB') {\n    step = 3;\n    rImagePointer = 0;\n    gImagePointer = 1;\n    bImagePointer = 2;\n    aImagePointer = -1;\n  }\n\n  // Updating the pointer assignments based on the output tensor format\n  if (outputformat === 'RGBA') {\n    aTensorPointer = stride * 3;\n  } else if (outputformat === 'RBG') {\n    rTensorPointer = 0;\n    bTensorPointer = stride;\n    gTensorPointer = stride * 2;\n  } else if (outputformat === 'BGR') {\n    bTensorPointer = 0;\n    gTensorPointer = stride;\n    rTensorPointer = stride * 2;\n  }\n\n  for (\n    let i = 0;\n    i < stride;\n    i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step\n  ) {\n    float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n    float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n    float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n    if (aTensorPointer !== -1 && aImagePointer !== -1) {\n      float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n    }\n  }\n\n  // Float32Array -> ort.Tensor\n  const outputTensor =\n    outputformat === 'RGBA'\n      ? new Tensor('float32', float32Data, [1, 4, height, width])\n      : new Tensor('float32', float32Data, [1, 3, height, width]);\n  return outputTensor;\n};\n\n/**\n * implementation of Tensor.fromImage().\n */\nexport const tensorFromImage = async (\n  image: ImageData | HTMLImageElement | ImageBitmap | string,\n  options?:\n    | TensorFromImageDataOptions\n    | TensorFromImageElementOptions\n    | TensorFromImageBitmapOptions\n    | TensorFromUrlOptions,\n): Promise<Tensor> => {\n  // checking the type of image object\n  const isHTMLImageEle = typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement;\n  const isImageDataEle = typeof ImageData !== 'undefined' && image instanceof ImageData;\n  const isImageBitmap = typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap;\n  const isString = typeof image === 'string';\n\n  let data: Uint8ClampedArray | undefined;\n  let bufferToTensorOptions: BufferToTensorOptions = options ?? {};\n\n  const createCanvas = () => {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(1, 1);\n    } else {\n      throw new Error('Canvas is not supported');\n    }\n  };\n  const createCanvasContext = (canvas: HTMLCanvasElement | OffscreenCanvas) => {\n    if (typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement) {\n      return canvas.getContext('2d');\n    } else if (canvas instanceof OffscreenCanvas) {\n      return canvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    } else {\n      return null;\n    }\n  };\n  // filling and checking image configuration options\n  if (isHTMLImageEle) {\n    // HTMLImageElement - image object - format is RGBA by default\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      let height = image.height;\n      let width = image.width;\n      if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n        height = options.resizedHeight;\n        width = options.resizedWidth;\n      }\n\n      if (options !== undefined) {\n        bufferToTensorOptions = options;\n        if (options.tensorFormat !== undefined) {\n          throw new Error('Image input config format must be RGBA for HTMLImageElement');\n        } else {\n          bufferToTensorOptions.tensorFormat = 'RGBA';\n        }\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      } else {\n        bufferToTensorOptions.tensorFormat = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      }\n\n      pixels2DContext.drawImage(image, 0, 0);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isImageDataEle) {\n    let height: number;\n    let width: number;\n\n    if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n      height = options.resizedHeight;\n      width = options.resizedWidth;\n    } else {\n      height = image.height;\n      width = image.width;\n    }\n\n    if (options !== undefined) {\n      bufferToTensorOptions = options;\n    }\n    bufferToTensorOptions.format = 'RGBA';\n    bufferToTensorOptions.height = height;\n    bufferToTensorOptions.width = width;\n\n    if (options !== undefined) {\n      const tempCanvas = createCanvas();\n\n      tempCanvas.width = width;\n      tempCanvas.height = height;\n\n      const pixels2DContext = createCanvasContext(tempCanvas);\n\n      if (pixels2DContext != null) {\n        pixels2DContext.putImageData(image, 0, 0);\n        data = pixels2DContext.getImageData(0, 0, width, height).data;\n      } else {\n        throw new Error('Can not access image data');\n      }\n    } else {\n      data = image.data;\n    }\n  } else if (isImageBitmap) {\n    // ImageBitmap - image object - format must be provided by user\n    if (options === undefined) {\n      throw new Error('Please provide image config with format for Imagebitmap');\n    }\n\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      const height = image.height;\n      const width = image.width;\n      pixels2DContext.drawImage(image, 0, 0, width, height);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n      bufferToTensorOptions.height = height;\n      bufferToTensorOptions.width = width;\n      return bufferToTensor(data, bufferToTensorOptions);\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isString) {\n    return new Promise((resolve, reject) => {\n      const canvas = createCanvas();\n      const context = createCanvasContext(canvas);\n      if (!image || !context) {\n        return reject();\n      }\n      const newImage = new Image();\n      newImage.crossOrigin = 'Anonymous';\n      newImage.src = image;\n      newImage.onload = () => {\n        canvas.width = newImage.width;\n        canvas.height = newImage.height;\n        context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n        const img = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        bufferToTensorOptions.height = canvas.height;\n        bufferToTensorOptions.width = canvas.width;\n        resolve(bufferToTensor(img.data, bufferToTensorOptions));\n      };\n    });\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n\n  if (data !== undefined) {\n    return bufferToTensor(data, bufferToTensorOptions);\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n};\n\n/**\n * implementation of Tensor.fromTexture().\n */\nexport const tensorFromTexture = <T extends TensorInterface.TextureDataTypes>(\n  texture: TensorInterface.TextureType,\n  options: TensorFromTextureOptions<T>,\n): Tensor => {\n  const { width, height, download, dispose } = options;\n  // Always assume RGBAF32. TODO: support different texture format\n  const dims = [1, height, width, 4];\n  return new Tensor({ location: 'texture', type: 'float32', texture, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nexport const tensorFromGpuBuffer = <T extends TensorInterface.GpuBufferDataTypes>(\n  gpuBuffer: TensorInterface.GpuBufferType,\n  options: TensorFromGpuBufferOptions<T>,\n): Tensor => {\n  const { dataType, dims, download, dispose } = options;\n  return new Tensor({ location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromMLTensor().\n */\nexport const tensorFromMLTensor = <T extends TensorInterface.MLTensorDataTypes>(\n  mlTensor: TensorInterface.MLTensorType,\n  options: TensorFromMLTensorOptions<T>,\n): Tensor => {\n  const { dataType, dims, download, dispose } = options;\n  return new Tensor({ location: 'ml-tensor', type: dataType ?? 'float32', mlTensor, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nexport const tensorFromPinnedBuffer = <T extends TensorInterface.CpuPinnedDataTypes>(\n  type: T,\n  buffer: TensorInterface.DataTypeMap[T],\n  dims?: readonly number[],\n): Tensor => new Tensor({ location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length] });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from './tensor.js';\n\nexport type SupportedTypedArrayConstructors =\n  | Float32ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int8ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int16ArrayConstructor\n  | Int32ArrayConstructor\n  | BigInt64ArrayConstructor\n  | Uint8ArrayConstructor\n  | Float64ArrayConstructor\n  | Uint32ArrayConstructor\n  | BigUint64ArrayConstructor;\nexport type SupportedTypedArray = InstanceType<SupportedTypedArrayConstructors>;\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map<string, SupportedTypedArrayConstructors>([\n  ['float32', Float32Array],\n  ['uint8', Uint8Array],\n  ['int8', Int8Array],\n  ['uint16', Uint16Array],\n  ['int16', Int16Array],\n  ['int32', Int32Array],\n  ['bool', Uint8Array],\n  ['float64', Float64Array],\n  ['uint32', Uint32Array],\n  ['int4', Uint8Array],\n  ['uint4', Uint8Array],\n]);\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map<SupportedTypedArrayConstructors, Tensor.Type>([\n  [Float32Array, 'float32'],\n  [Uint8Array, 'uint8'],\n  [Int8Array, 'int8'],\n  [Uint16Array, 'uint16'],\n  [Int16Array, 'int16'],\n  [Int32Array, 'int32'],\n  [Float64Array, 'float64'],\n  [Uint32Array, 'uint32'],\n]);\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// the following code allows delaying execution of BigInt/Float16Array checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt/Float16Array\n// polyfill if available.\nlet isTypedArrayChecked = false;\nexport const checkTypedArray = () => {\n  if (!isTypedArrayChecked) {\n    isTypedArrayChecked = true;\n    const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && BigInt64Array.from;\n    const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && BigUint64Array.from;\n    const isFloat16ArrayAvailable = typeof Float16Array !== 'undefined' && Float16Array.from;\n\n    if (isBigInt64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n    }\n    if (isBigUint64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n    }\n    if (isFloat16ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Float16Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array, 'float16');\n    } else {\n      // if Float16Array is not available, use 'Uint16Array' to store the data.\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Uint16Array);\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  CpuPinnedConstructorParameters,\n  GpuBufferConstructorParameters,\n  MLTensorConstructorParameters,\n  TextureConstructorParameters,\n} from './tensor-factory.js';\nimport { Tensor } from './tensor-impl.js';\n\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nexport const calculateSize = (dims: readonly unknown[]): number => {\n  let size = 1;\n  for (let i = 0; i < dims.length; i++) {\n    const dim = dims[i];\n    if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n      throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n    }\n    if (dim < 0) {\n      throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n    }\n    size *= dim;\n  }\n  return size;\n};\n\n/**\n * implementation of Tensor.reshape()\n */\nexport const tensorReshape = (tensor: Tensor, dims: readonly number[]): Tensor => {\n  switch (tensor.location) {\n    case 'cpu':\n      return new Tensor(tensor.type, tensor.data, dims);\n    case 'cpu-pinned':\n      return new Tensor({\n        location: 'cpu-pinned',\n        data: tensor.data as CpuPinnedConstructorParameters['data'],\n        type: tensor.type as CpuPinnedConstructorParameters['type'],\n        dims,\n      });\n    case 'texture':\n      return new Tensor({\n        location: 'texture',\n        texture: tensor.texture,\n        type: tensor.type as TextureConstructorParameters['type'],\n        dims,\n      });\n    case 'gpu-buffer':\n      return new Tensor({\n        location: 'gpu-buffer',\n        gpuBuffer: tensor.gpuBuffer,\n        type: tensor.type as GpuBufferConstructorParameters['type'],\n        dims,\n      });\n    case 'ml-tensor':\n      return new Tensor({\n        location: 'ml-tensor',\n        mlTensor: tensor.mlTensor,\n        type: tensor.type as MLTensorConstructorParameters['type'],\n        dims,\n      });\n    default:\n      throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { tensorToDataURL, tensorToImageData } from './tensor-conversion-impl.js';\nimport { TensorToDataUrlOptions, TensorToImageDataOptions } from './tensor-conversion.js';\nimport {\n  tensorFromGpuBuffer,\n  tensorFromImage,\n  tensorFromMLTensor,\n  tensorFromPinnedBuffer,\n  tensorFromTexture,\n} from './tensor-factory-impl.js';\nimport {\n  CpuPinnedConstructorParameters,\n  GpuBufferConstructorParameters,\n  MLTensorConstructorParameters,\n  TensorFromGpuBufferOptions,\n  TensorFromImageBitmapOptions,\n  TensorFromImageDataOptions,\n  TensorFromImageElementOptions,\n  TensorFromMLTensorOptions,\n  TensorFromTextureOptions,\n  TensorFromUrlOptions,\n  TextureConstructorParameters,\n} from './tensor-factory.js';\nimport {\n  checkTypedArray,\n  NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP,\n  NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP,\n  SupportedTypedArray,\n  SupportedTypedArrayConstructors,\n} from './tensor-impl-type-mapping.js';\nimport { calculateSize, tensorReshape } from './tensor-utils-impl.js';\nimport { Tensor as TensorInterface } from './tensor.js';\n\n// type aliases for those exported from Tensor interface\n\ntype TensorType = TensorInterface.Type;\ntype TensorDataType = TensorInterface.DataType;\ntype TensorDataLocation = TensorInterface.DataLocation;\ntype TensorTextureType = TensorInterface.TextureType;\ntype TensorGpuBufferType = TensorInterface.GpuBufferType;\ntype TensorMLTensorType = TensorInterface.MLTensorType;\n\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nexport class Tensor implements TensorInterface {\n  // #region constructors\n\n  /**\n   * Construct a new CPU tensor object from the given type, data and dims.\n   */\n  constructor(\n    type: TensorType,\n    data: TensorDataType | Uint8ClampedArray | readonly string[] | readonly number[] | readonly boolean[],\n    dims?: readonly number[],\n  );\n  /**\n   * Construct a new CPU tensor object from the given data and dims. Type is inferred from data.\n   */\n  constructor(\n    data: TensorDataType | Uint8ClampedArray | readonly string[] | readonly boolean[],\n    dims?: readonly number[],\n  );\n  /**\n   * Construct a new tensor object from the pinned CPU data with the given type and dims.\n   *\n   * Tensor's location will be set to 'cpu-pinned'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: CpuPinnedConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGL texture with the given type and dims.\n   *\n   * Tensor's location will be set to 'texture'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: TextureConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGPU buffer with the given type and dims.\n   *\n   * Tensor's location will be set to 'gpu-buffer'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: GpuBufferConstructorParameters);\n\n  /**\n   * Construct a new tensor object from the WebNN MLTensor with the given type and dims.\n   *\n   * Tensor's location will be set to 'ml-tensor'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: MLTensorConstructorParameters);\n\n  /**\n   * implementation.\n   */\n  constructor(\n    arg0:\n      | TensorType\n      | TensorDataType\n      | Uint8ClampedArray\n      | readonly string[]\n      | readonly boolean[]\n      | CpuPinnedConstructorParameters\n      | TextureConstructorParameters\n      | GpuBufferConstructorParameters\n      | MLTensorConstructorParameters,\n    arg1?: TensorDataType | Uint8ClampedArray | readonly number[] | readonly string[] | readonly boolean[],\n    arg2?: readonly number[],\n  ) {\n    // perform one-time check for BigInt/Float16Array support\n    checkTypedArray();\n\n    let type: TensorType;\n    let dims: readonly number[];\n\n    if (typeof arg0 === 'object' && 'location' in arg0) {\n      //\n      // constructing tensor from specific location\n      //\n      this.dataLocation = arg0.location;\n      type = arg0.type;\n      dims = arg0.dims;\n      switch (arg0.location) {\n        case 'cpu-pinned': {\n          const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n          if (!expectedTypedArrayConstructor) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n          }\n          if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n            throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n          }\n          this.cpuData = arg0.data;\n          break;\n        }\n        case 'texture': {\n          if (type !== 'float32') {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n          }\n          this.gpuTextureData = arg0.texture;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        case 'gpu-buffer': {\n          if (\n            type !== 'float32' &&\n            type !== 'float16' &&\n            type !== 'int32' &&\n            type !== 'int64' &&\n            type !== 'uint32' &&\n            type !== 'uint8' &&\n            type !== 'bool' &&\n            type !== 'uint4' &&\n            type !== 'int4'\n          ) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n          }\n          this.gpuBufferData = arg0.gpuBuffer;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        case 'ml-tensor': {\n          if (\n            type !== 'float32' &&\n            type !== 'float16' &&\n            type !== 'int32' &&\n            type !== 'int64' &&\n            type !== 'uint32' &&\n            type !== 'uint64' &&\n            type !== 'int8' &&\n            type !== 'uint8' &&\n            type !== 'bool'\n          ) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from MLTensor`);\n          }\n          this.mlTensorData = arg0.mlTensor;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        default:\n          throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n      }\n    } else {\n      //\n      // constructing tensor of location 'cpu'\n      //\n      let data: TensorDataType;\n      let maybeDims: typeof arg1 | typeof arg2;\n      // check whether arg0 is type or data\n      if (typeof arg0 === 'string') {\n        //\n        // Override: constructor(type, data, ...)\n        //\n        type = arg0;\n        maybeDims = arg2;\n        if (arg0 === 'string') {\n          // string tensor\n          if (!Array.isArray(arg1)) {\n            throw new TypeError(\"A string tensor's data must be a string array.\");\n          }\n          // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n          // error will be populated at inference\n          data = arg1;\n        } else {\n          // numeric tensor\n          const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n          if (typedArrayConstructor === undefined) {\n            throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n          }\n          if (Array.isArray(arg1)) {\n            if ((arg0 === 'float16' && typedArrayConstructor === Uint16Array) || arg0 === 'uint4' || arg0 === 'int4') {\n              // - 'float16':\n              //   When no Float16Array polyfill is used, we cannot create 'float16' tensor from number array.\n              //\n              //   Throw error here because when user try to use number array as data,\n              //   e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n              //   Uint16Array.from(arg1) which generates wrong data.\n              //\n              // - 'uint4' and 'int4':\n              //   Uint8Array.from(arg1) will generate wrong data for 'uint4' and 'int4' tensor.\n              //\n              throw new TypeError(\n                `Creating a ${arg0} tensor from number array is not supported. Please use ${typedArrayConstructor.name} as data.`,\n              );\n            } else if (arg0 === 'uint64' || arg0 === 'int64') {\n              // use 'as any' here because:\n              // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n              // see https://github.com/microsoft/TypeScript/issues/17002\n              // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n              // does not accept parameter mapFn.\n              // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n              // type.\n\n              // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1, BigInt);\n            } else {\n              // assume 'arg1' is of type \"readonly number[]\" here.\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1);\n            }\n          } else if (arg1 instanceof typedArrayConstructor) {\n            data = arg1;\n          } else if (arg1 instanceof Uint8ClampedArray) {\n            if (arg0 === 'uint8') {\n              data = Uint8Array.from(arg1);\n            } else {\n              throw new TypeError(`A Uint8ClampedArray tensor's data must be type of uint8`);\n            }\n          } else {\n            throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n          }\n        }\n      } else {\n        //\n        // Override: constructor(data, ...)\n        //\n        maybeDims = arg1;\n        if (Array.isArray(arg0)) {\n          // only boolean[] and string[] is supported\n          if (arg0.length === 0) {\n            throw new TypeError('Tensor type cannot be inferred from an empty array.');\n          }\n          const firstElementType = typeof arg0[0];\n          if (firstElementType === 'string') {\n            type = 'string';\n            data = arg0;\n          } else if (firstElementType === 'boolean') {\n            type = 'bool';\n            // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n            // wrong type. We use 'as any' to make it happy.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data = Uint8Array.from(arg0 as any[]);\n          } else {\n            throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n          }\n        } else if (arg0 instanceof Uint8ClampedArray) {\n          type = 'uint8';\n          data = Uint8Array.from(arg0);\n        } else {\n          // get tensor type from TypedArray\n          const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(\n            arg0.constructor as SupportedTypedArrayConstructors,\n          );\n          if (mappedType === undefined) {\n            throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n          }\n          type = mappedType;\n          data = arg0 as SupportedTypedArray;\n        }\n      }\n\n      // type and data is processed, now processing dims\n      if (maybeDims === undefined) {\n        // assume 1-D tensor if dims omitted\n        maybeDims = [data.length];\n      } else if (!Array.isArray(maybeDims)) {\n        throw new TypeError(\"A tensor's dims must be a number array\");\n      }\n      dims = maybeDims as readonly number[];\n\n      this.cpuData = data;\n      this.dataLocation = 'cpu';\n    }\n\n    // perform check on dims\n    const size = calculateSize(dims);\n    // if data is on CPU, check whether data length matches tensor size\n    if (this.cpuData && size !== this.cpuData.length) {\n      if ((type === 'uint4' || type === 'int4') && Math.ceil(size / 2) === this.cpuData.length) {\n        // for (u)int4, the data length is half of the tensor size. So we check this special case when size is odd.\n      } else {\n        throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n      }\n    }\n\n    this.type = type;\n    this.dims = dims;\n    this.size = size;\n  }\n  // #endregion\n\n  // #region factory\n  static async fromImage(\n    image: ImageData | HTMLImageElement | ImageBitmap | string,\n    options?:\n      | TensorFromImageDataOptions\n      | TensorFromImageElementOptions\n      | TensorFromImageBitmapOptions\n      | TensorFromUrlOptions,\n  ): Promise<TensorInterface> {\n    return tensorFromImage(image, options);\n  }\n\n  static fromTexture<T extends TensorInterface.TextureDataTypes>(\n    texture: TensorTextureType,\n    options: TensorFromTextureOptions<T>,\n  ): TensorInterface {\n    return tensorFromTexture(texture, options);\n  }\n\n  static fromGpuBuffer<T extends TensorInterface.GpuBufferDataTypes>(\n    gpuBuffer: TensorGpuBufferType,\n    options: TensorFromGpuBufferOptions<T>,\n  ): TensorInterface {\n    return tensorFromGpuBuffer(gpuBuffer, options);\n  }\n\n  static fromMLTensor<T extends TensorInterface.MLTensorDataTypes>(\n    mlTensor: TensorMLTensorType,\n    options: TensorFromMLTensorOptions<T>,\n  ): TensorInterface {\n    return tensorFromMLTensor(mlTensor, options);\n  }\n\n  static fromPinnedBuffer<T extends TensorInterface.CpuPinnedDataTypes>(\n    type: T,\n    buffer: TensorInterface.DataTypeMap[T],\n    dims?: readonly number[],\n  ): Tensor {\n    return tensorFromPinnedBuffer(type, buffer, dims);\n  }\n\n  // #endregion\n\n  // #region conversions\n  toDataURL(options?: TensorToDataUrlOptions): string {\n    return tensorToDataURL(this, options);\n  }\n\n  toImageData(options?: TensorToImageDataOptions): ImageData {\n    return tensorToImageData(this, options);\n  }\n  // #endregion\n\n  // #region public fields\n  readonly dims: readonly number[];\n  readonly type: TensorType;\n  readonly size: number;\n  // #endregion\n\n  // #region private fields\n\n  /**\n   * stores the location of the data.\n   */\n  private dataLocation: TensorDataLocation;\n\n  /**\n   * stores the data on CPU, if location is 'cpu' or 'cpu-pinned'. otherwise empty.\n   */\n  private cpuData?: TensorDataType;\n\n  /**\n   * stores the underlying texture when location is 'texture'. otherwise empty.\n   */\n  private gpuTextureData?: TensorTextureType;\n\n  /**\n   * stores the underlying GPU buffer when location is 'gpu-buffer'. otherwise empty.\n   */\n  private gpuBufferData?: TensorGpuBufferType;\n\n  /**\n   * stores the underlying WebNN MLTensor when location is 'ml-tensor'. otherwise empty.\n   */\n  private mlTensorData?: TensorMLTensorType;\n\n  /**\n   * stores an optional downloader function to download data from GPU to CPU.\n   */\n  private downloader?(): Promise<TensorDataType>;\n\n  /**\n   * a flag indicating whether the data is being downloaded from GPU to CPU.\n   */\n  private isDownloading?: boolean;\n\n  /**\n   * stores an optional disposer function to dispose the underlying data.\n   */\n  private disposer?(): void;\n  // #endregion\n\n  // #region properties\n  get data(): TensorDataType {\n    this.ensureValid();\n    if (!this.cpuData) {\n      throw new Error(\n        'The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n          'or use `texture` or `gpuBuffer` property to access the GPU data directly.',\n      );\n    }\n    return this.cpuData;\n  }\n\n  get location(): TensorDataLocation {\n    return this.dataLocation;\n  }\n\n  get texture(): TensorTextureType {\n    this.ensureValid();\n    if (!this.gpuTextureData) {\n      throw new Error('The data is not stored as a WebGL texture.');\n    }\n    return this.gpuTextureData;\n  }\n\n  get gpuBuffer(): TensorGpuBufferType {\n    this.ensureValid();\n    if (!this.gpuBufferData) {\n      throw new Error('The data is not stored as a WebGPU buffer.');\n    }\n    return this.gpuBufferData;\n  }\n\n  get mlTensor(): TensorMLTensorType {\n    this.ensureValid();\n    if (!this.mlTensorData) {\n      throw new Error('The data is not stored as a WebNN MLTensor.');\n    }\n    return this.mlTensorData;\n  }\n  // #endregion\n\n  // #region methods\n\n  async getData(releaseData?: boolean): Promise<TensorDataType> {\n    this.ensureValid();\n    switch (this.dataLocation) {\n      case 'cpu':\n      case 'cpu-pinned':\n        return this.data;\n      case 'texture':\n      case 'gpu-buffer':\n      case 'ml-tensor': {\n        if (!this.downloader) {\n          throw new Error('The current tensor is not created with a specified data downloader.');\n        }\n        if (this.isDownloading) {\n          throw new Error('The current tensor is being downloaded.');\n        }\n        try {\n          this.isDownloading = true;\n          const data = await this.downloader();\n          this.downloader = undefined;\n          this.dataLocation = 'cpu';\n          this.cpuData = data;\n\n          if (releaseData && this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n          }\n\n          return data;\n        } finally {\n          this.isDownloading = false;\n        }\n      }\n      default:\n        throw new Error(`cannot get data from location: ${this.dataLocation}`);\n    }\n  }\n\n  dispose(): void {\n    if (this.isDownloading) {\n      throw new Error('The current tensor is being downloaded.');\n    }\n\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    this.cpuData = undefined;\n    this.gpuTextureData = undefined;\n    this.gpuBufferData = undefined;\n    this.mlTensorData = undefined;\n    this.downloader = undefined;\n    this.isDownloading = undefined;\n\n    this.dataLocation = 'none';\n  }\n\n  // #endregion\n\n  // #region tensor utilities\n  private ensureValid(): void {\n    if (this.dataLocation === 'none') {\n      throw new Error('The tensor is disposed.');\n    }\n  }\n\n  reshape(dims: readonly number[]): TensorInterface {\n    this.ensureValid();\n    if (this.downloader || this.disposer) {\n      throw new Error('Cannot reshape a tensor that owns GPU resource.');\n    }\n    return tensorReshape(this, dims);\n  }\n  // #endregion\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorFactory } from './tensor-factory.js';\nimport { Tensor as TensorImpl } from './tensor-impl.js';\nimport { TypedTensorUtils } from './tensor-utils.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/**\n * represent a basic tensor with specified dimensions and data type.\n */\ninterface TypedTensorBase<T extends Tensor.Type> {\n  /**\n   * Get the dimensions of the tensor.\n   */\n  readonly dims: readonly number[];\n  /**\n   * Get the data type of the tensor.\n   */\n  readonly type: T;\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is not on CPU (eg. it's in the form of WebGL texture or WebGPU buffer), throw error.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n  /**\n   * Get the location of the data.\n   */\n  readonly location: Tensor.DataLocation;\n  /**\n   * Get the WebGL texture that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGL texture, throw error.\n   */\n  readonly texture: Tensor.TextureType;\n  /**\n   * Get the WebGPU buffer that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGPU buffer, throw error.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n\n  /**\n   * Get the WebNN MLTensor that holds the tensor data.\n   *\n   * If the data is not in a WebNN MLTensor, throw error.\n   */\n  readonly mlTensor: Tensor.MLTensorType;\n\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is on CPU, returns the data immediately.\n   * If the data is on GPU, downloads the data and returns the promise.\n   *\n   * @param releaseData - whether release the data on GPU. Ignore if data is already on CPU.\n   */\n  getData(releaseData?: boolean): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * Dispose the tensor data.\n   *\n   * If the data is on CPU, remove its internal reference to the underlying data.\n   * If the data is on GPU, release the data on GPU.\n   *\n   * After calling this function, the tensor is considered no longer valid. Its location will be set to 'none'.\n   */\n  dispose(): void;\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    float32: Float32Array;\n    uint8: Uint8Array;\n    int8: Int8Array;\n    uint16: Uint16Array;\n    int16: Int16Array;\n    int32: Int32Array;\n    int64: BigInt64Array;\n    string: string[];\n    bool: Uint8Array;\n    float16: Uint16Array; // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: Float64Array;\n    uint32: Uint32Array;\n    uint64: BigUint64Array;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n    uint4: Uint8Array;\n    int4: Int8Array;\n  }\n\n  interface ElementTypeMap {\n    float32: number;\n    uint8: number;\n    int8: number;\n    uint16: number;\n    int16: number;\n    int32: number;\n    int64: bigint;\n    string: string;\n    bool: boolean;\n    float16: number; // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: number;\n    uint32: number;\n    uint64: bigint;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n    uint4: number;\n    int4: number;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * supported data types for constructing a tensor from a pinned CPU buffer\n   */\n  export type CpuPinnedDataTypes = Exclude<Tensor.Type, 'string'>;\n\n  /**\n   * type alias for WebGL texture\n   */\n  export type TextureType = WebGLTexture;\n\n  /**\n   * supported data types for constructing a tensor from a WebGL texture\n   */\n  export type TextureDataTypes = 'float32';\n\n  /**\n   * type alias for WebGPU buffer\n   *\n   * The reason why we don't use type \"GPUBuffer\" defined in webgpu.d.ts from @webgpu/types is because \"@webgpu/types\"\n   * requires \"@types/dom-webcodecs\" as peer dependency when using TypeScript < v5.1 and its version need to be chosen\n   * carefully according to the TypeScript version being used. This means so far there is not a way to keep every\n   * TypeScript version happy. It turns out that we will easily broke users on some TypeScript version.\n   *\n   * for more info see https://github.com/gpuweb/types/issues/127\n   */\n  export type GpuBufferType = { size: number; mapState: 'unmapped' | 'pending' | 'mapped' };\n\n  /**\n   * type alias for WebNN MLTensor\n   *\n   * The specification for WebNN's MLTensor is currently in flux.\n   */\n  export type MLTensorType = unknown;\n\n  /**\n   * supported data types for constructing a tensor from a WebGPU buffer\n   */\n  export type GpuBufferDataTypes = 'float32' | 'float16' | 'int32' | 'int64' | 'uint32' | 'uint8' | 'bool';\n\n  /**\n   * supported data types for constructing a tensor from a WebNN MLTensor\n   */\n  export type MLTensorDataTypes =\n    | 'float32'\n    | 'float16'\n    | 'int8'\n    | 'uint8'\n    | 'int32'\n    | 'uint32'\n    | 'int64'\n    | 'uint64'\n    | 'bool';\n\n  /**\n   * represent where the tensor data is stored\n   */\n  export type DataLocation = 'none' | 'cpu' | 'cpu-pinned' | 'texture' | 'gpu-buffer' | 'ml-tensor';\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface TypedTensor<T extends Tensor.Type> extends TypedTensorBase<T>, TypedTensorUtils<T> {}\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface Tensor extends TypedTensorBase<Tensor.Type>, TypedTensorUtils<Tensor.Type> {}\n\n/**\n * type TensorConstructor defines the constructors of 'Tensor' to create CPU tensor instances.\n */\nexport interface TensorConstructor extends TensorFactory {\n  // #region CPU tensor - specify element type\n  /**\n   * Construct a new string tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: 'string',\n    data: Tensor.DataTypeMap['string'] | readonly string[],\n    dims?: readonly number[],\n  ): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: 'bool',\n    data: Tensor.DataTypeMap['bool'] | readonly boolean[],\n    dims?: readonly number[],\n  ): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new uint8 tensor object from a Uint8ClampedArray, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (type: 'uint8', data: Uint8ClampedArray, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new 64-bit integer typed tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new <T extends 'uint64' | 'int64'>(\n    type: T,\n    data: Tensor.DataTypeMap[T] | readonly bigint[] | readonly number[],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n\n  /**\n   * Construct a new numeric tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new <T extends Exclude<Tensor.Type, 'string' | 'bool' | 'uint64' | 'int64'>>(\n    type: T,\n    data: Tensor.DataTypeMap[T] | readonly number[],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n  // #endregion\n\n  // #region CPU tensor - infer element types\n\n  /**\n   * Construct a new float32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Float32Array, dims?: readonly number[]): TypedTensor<'float32'>;\n\n  /**\n   * Construct a new int8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int8Array, dims?: readonly number[]): TypedTensor<'int8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint8Array, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint8ClampedArray, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint16Array, dims?: readonly number[]): TypedTensor<'uint16'>;\n\n  /**\n   * Construct a new int16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int16Array, dims?: readonly number[]): TypedTensor<'int16'>;\n\n  /**\n   * Construct a new int32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int32Array, dims?: readonly number[]): TypedTensor<'int32'>;\n\n  /**\n   * Construct a new int64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: BigInt64Array, dims?: readonly number[]): TypedTensor<'int64'>;\n\n  /**\n   * Construct a new string tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: readonly string[], dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new float64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Float64Array, dims?: readonly number[]): TypedTensor<'float64'>;\n\n  /**\n   * Construct a new uint32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint32Array, dims?: readonly number[]): TypedTensor<'uint32'>;\n\n  /**\n   * Construct a new uint64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: BigUint64Array, dims?: readonly number[]): TypedTensor<'uint64'>;\n\n  // #endregion\n\n  // #region CPU tensor - fall back to non-generic tensor type declaration\n\n  /**\n   * Construct a new tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: Tensor.Type,\n    data: Tensor.DataType | readonly number[] | readonly string[] | readonly bigint[] | readonly boolean[],\n    dims?: readonly number[],\n  ): Tensor;\n\n  /**\n   * Construct a new tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Tensor.DataType, dims?: readonly number[]): Tensor;\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl as TensorConstructor;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from './env-impl.js';\n\n/**\n * @ignore\n */\nexport const TRACE = (deviceType: string, label: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  // eslint-disable-next-line no-console\n  console.timeStamp(`${deviceType}::ORT::${label}`);\n};\n\nconst TRACE_FUNC = (msg: string, extraMsg?: string) => {\n  const stack = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [];\n  let hasTraceFunc = false;\n  for (let i = 0; i < stack.length; i++) {\n    if (hasTraceFunc && !stack[i].includes('TRACE_FUNC')) {\n      let label = `FUNC_${msg}::${stack[i].trim().split(' ')[1]}`;\n      if (extraMsg) {\n        label += `::${extraMsg}`;\n      }\n      TRACE('CPU', label);\n      return;\n    }\n    if (stack[i].includes('TRACE_FUNC')) {\n      hasTraceFunc = true;\n    }\n  }\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_BEGIN = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('BEGIN', extraMsg);\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_END = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('END', extraMsg);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { resolveBackendAndExecutionProviders } from './backend-impl.js';\nimport { InferenceSessionHandler } from './backend.js';\nimport { InferenceSession as InferenceSessionInterface } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { Tensor } from './tensor.js';\nimport { TRACE_FUNC_BEGIN, TRACE_FUNC_END } from './trace.js';\n\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype FeedsType = InferenceSessionInterface.FeedsType;\ntype FetchesType = InferenceSessionInterface.FetchesType;\ntype ReturnType = InferenceSessionInterface.ReturnType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  private constructor(handler: InferenceSessionHandler) {\n    this.handler = handler;\n  }\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async run(feeds: FeedsType, arg1?: FetchesType | RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const fetches: { [name: string]: OnnxValue | null } = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n        \"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\",\n      );\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError(\"'fetches' cannot be a Tensor\");\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError(\"'fetches' cannot be an empty array.\");\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError(\"'fetches' must be a string array or an object.\");\n          }\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError(\"'options' must be an object.\");\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of this.outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError(\"'options' must be an object.\");\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n    }\n\n    // check if all inputs are in feed\n    for (const name of this.inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of this.outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    // feeds, fetches and options are prepared\n\n    const results = await this.handler.run(feeds, fetches, options);\n    const returnValue: { [name: string]: OnnxValue } = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    TRACE_FUNC_END();\n    return returnValue;\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(\n    buffer: ArrayBufferLike,\n    byteOffset: number,\n    byteLength?: number,\n    options?: SessionOptions,\n  ): Promise<InferenceSessionInterface>;\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static async create(\n    arg0: string | ArrayBufferLike | Uint8Array,\n    arg1?: SessionOptions | number,\n    arg2?: number,\n    arg3?: SessionOptions,\n  ): Promise<InferenceSessionInterface> {\n    TRACE_FUNC_BEGIN();\n    // either load from a file or buffer\n    let filePathOrUint8Array: string | Uint8Array;\n    let options: SessionOptions = {};\n\n    if (typeof arg0 === 'string') {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n    } else if (arg0 instanceof Uint8Array) {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n    } else if (\n      arg0 instanceof ArrayBuffer ||\n      (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)\n    ) {\n      const buffer = arg0;\n      let byteOffset = 0;\n      let byteLength = arg0.byteLength;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 === 'number') {\n        byteOffset = arg1;\n        if (!Number.isSafeInteger(byteOffset)) {\n          throw new RangeError(\"'byteOffset' must be an integer.\");\n        }\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n        }\n        byteLength = arg0.byteLength - byteOffset;\n        if (typeof arg2 === 'number') {\n          byteLength = arg2;\n          if (!Number.isSafeInteger(byteLength)) {\n            throw new RangeError(\"'byteLength' must be an integer.\");\n          }\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n          }\n          if (typeof arg3 === 'object' && arg3 !== null) {\n            options = arg3;\n          } else if (typeof arg3 !== 'undefined') {\n            throw new TypeError(\"'options' must be an object.\");\n          }\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError(\"'byteLength' must be a number.\");\n        }\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n    } else {\n      throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");\n    }\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);\n    TRACE_FUNC_END();\n    return new InferenceSession(handler);\n  }\n\n  startProfiling(): void {\n    this.handler.startProfiling();\n  }\n  endProfiling(): void {\n    this.handler.endProfiling();\n  }\n\n  get inputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get outputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  private handler: InferenceSessionHandler;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl.js';\nimport { OnnxModelOptions } from './onnx-model.js';\nimport { OnnxValue, OnnxValueDataLocation } from './onnx-value.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace InferenceSession {\n  // #region input/output types\n\n  type OnnxValueMapType = { readonly [name: string]: OnnxValue };\n  type NullableOnnxValueMapType = { readonly [name: string]: OnnxValue | null };\n\n  /**\n   * A feeds (model inputs) is an object that uses input names as keys and OnnxValue as corresponding values.\n   */\n  type FeedsType = OnnxValueMapType;\n\n  /**\n   * A fetches (model outputs) could be one of the following:\n   *\n   * - Omitted. Use model's output names definition.\n   * - An array of string indicating the output names.\n   * - An object that use output names as keys and OnnxValue or null as corresponding values.\n   *\n   * @remark\n   * different from input argument, in output, OnnxValue is optional. If an OnnxValue is present it will be\n   * used as a pre-allocated value by the inference engine; if omitted, inference engine will allocate buffer\n   * internally.\n   */\n  type FetchesType = readonly string[] | NullableOnnxValueMapType;\n\n  /**\n   * A inferencing return type is an object that uses output names as keys and OnnxValue as corresponding values.\n   */\n  type ReturnType = OnnxValueMapType;\n\n  // #endregion\n\n  // #region session options\n\n  /**\n   * A set of configurations for session behavior.\n   */\n  export interface SessionOptions extends OnnxModelOptions {\n    /**\n     * An array of execution provider options.\n     *\n     * An execution provider option can be a string indicating the name of the execution provider,\n     * or an object of corresponding type.\n     */\n    executionProviders?: readonly ExecutionProviderConfig[];\n\n    /**\n     * The intra OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    intraOpNumThreads?: number;\n\n    /**\n     * The inter OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    interOpNumThreads?: number;\n\n    /**\n     * The free dimension override.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    freeDimensionOverrides?: { readonly [dimensionName: string]: number };\n\n    /**\n     * The optimization level.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    graphOptimizationLevel?: 'disabled' | 'basic' | 'extended' | 'all';\n\n    /**\n     * Whether enable CPU memory arena.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableCpuMemArena?: boolean;\n\n    /**\n     * Whether enable memory pattern.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableMemPattern?: boolean;\n\n    /**\n     * Execution mode.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    executionMode?: 'sequential' | 'parallel';\n\n    /**\n     * Optimized model file path.\n     *\n     * If this setting is specified, the optimized model will be dumped. In browser, a blob will be created\n     * with a pop-up window.\n     */\n    optimizedModelFilePath?: string;\n\n    /**\n     * Whether enable profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    enableProfiling?: boolean;\n\n    /**\n     * File prefix for profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    profileFilePrefix?: string;\n\n    /**\n     * Log ID.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logId?: string;\n\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0 | 1 | 2 | 3 | 4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Specify string as a preferred data location for all outputs, or an object that use output names as keys and a\n     * preferred data location as corresponding values.\n     *\n     * This setting is available only in ONNXRuntime Web for WebGL and WebGPU EP.\n     */\n    preferredOutputLocation?: OnnxValueDataLocation | { readonly [outputName: string]: OnnxValueDataLocation };\n\n    /**\n     * Whether enable graph capture.\n     * This setting is available only in ONNXRuntime Web for WebGPU EP.\n     */\n    enableGraphCapture?: boolean;\n\n    /**\n     * Store configurations for a session. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_session_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     * ```js\n     * extra: {\n     *   session: {\n     *     set_denormal_as_zero: \"1\",\n     *     disable_prepacking: \"1\"\n     *   },\n     *   optimization: {\n     *     enable_gelu_approximation: \"1\"\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #region execution providers\n\n  // Currently, we have the following backends to support execution providers:\n  // Backend Node.js binding: supports 'cpu', 'dml' (win32), 'coreml' (macOS) and 'cuda' (linux).\n  // Backend WebAssembly: supports 'cpu', 'wasm', 'webgpu' and 'webnn'.\n  // Backend ONNX.js: supports 'webgl'.\n  // Backend React Native: supports 'cpu', 'xnnpack', 'coreml' (iOS), 'nnapi' (Android).\n  interface ExecutionProviderOptionMap {\n    coreml: CoreMLExecutionProviderOption;\n    cpu: CpuExecutionProviderOption;\n    cuda: CudaExecutionProviderOption;\n    dml: DmlExecutionProviderOption;\n    nnapi: NnapiExecutionProviderOption;\n    tensorrt: TensorRtExecutionProviderOption;\n    wasm: WebAssemblyExecutionProviderOption;\n    webgl: WebGLExecutionProviderOption;\n    webgpu: WebGpuExecutionProviderOption;\n    webnn: WebNNExecutionProviderOption;\n    qnn: QnnExecutionProviderOption;\n    xnnpack: XnnpackExecutionProviderOption;\n  }\n\n  type ExecutionProviderName = keyof ExecutionProviderOptionMap;\n  type ExecutionProviderConfig =\n    | ExecutionProviderOptionMap[ExecutionProviderName]\n    | ExecutionProviderOption\n    | ExecutionProviderName\n    | string;\n\n  export interface ExecutionProviderOption {\n    readonly name: string;\n  }\n  export interface CpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cpu';\n    useArena?: boolean;\n  }\n  export interface CudaExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cuda';\n    deviceId?: number;\n  }\n  export interface DmlExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'dml';\n    deviceId?: number;\n  }\n  export interface TensorRtExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'tensorrt';\n    deviceId?: number;\n  }\n  export interface WebAssemblyExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'wasm';\n  }\n  export interface WebGLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgl';\n    // TODO: add flags\n  }\n  export interface XnnpackExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'xnnpack';\n  }\n  export interface WebGpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgpu';\n    preferredLayout?: 'NCHW' | 'NHWC';\n  }\n\n  // #region WebNN options\n\n  interface WebNNExecutionProviderName extends ExecutionProviderOption {\n    readonly name: 'webnn';\n  }\n\n  /**\n   * Represents a set of options for creating a WebNN MLContext.\n   *\n   * @see https://www.w3.org/TR/webnn/#dictdef-mlcontextoptions\n   */\n  export interface WebNNContextOptions {\n    deviceType?: 'cpu' | 'gpu' | 'npu';\n    numThreads?: number;\n    powerPreference?: 'default' | 'low-power' | 'high-performance';\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider without MLContext.\n   */\n  export interface WebNNOptionsWithoutMLContext extends WebNNExecutionProviderName, WebNNContextOptions {\n    context?: never;\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider with MLContext.\n   *\n   * When MLContext is provided, the deviceType is also required so that the WebNN EP can determine the preferred\n   * channel layout.\n   *\n   * @see https://www.w3.org/TR/webnn/#dom-ml-createcontext\n   */\n  export interface WebNNOptionsWithMLContext\n    extends WebNNExecutionProviderName,\n      Omit<WebNNContextOptions, 'deviceType'>,\n      Required<Pick<WebNNContextOptions, 'deviceType'>> {\n    context: unknown /* MLContext */;\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider with MLContext which is created from GPUDevice.\n   *\n   * @see https://www.w3.org/TR/webnn/#dom-ml-createcontext-gpudevice\n   */\n  export interface WebNNOptionsWebGpu extends WebNNExecutionProviderName {\n    context: unknown /* MLContext */;\n    gpuDevice: unknown /* GPUDevice */;\n  }\n\n  /**\n   * Options for WebNN execution provider.\n   */\n  export type WebNNExecutionProviderOption =\n    | WebNNOptionsWithoutMLContext\n    | WebNNOptionsWithMLContext\n    | WebNNOptionsWebGpu;\n\n  // #endregion\n\n  export interface QnnExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'qnn';\n    // TODO add flags\n  }\n  export interface CoreMLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'coreml';\n    /**\n     * The bit flags for CoreML execution provider.\n     *\n     * ```\n     * COREML_FLAG_USE_CPU_ONLY = 0x001\n     * COREML_FLAG_ENABLE_ON_SUBGRAPH = 0x002\n     * COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = 0x004\n     * COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = 0x008\n     * COREML_FLAG_CREATE_MLPROGRAM = 0x010\n     * COREML_FLAG_USE_CPU_AND_GPU = 0x020\n     * ```\n     *\n     * See include/onnxruntime/core/providers/coreml/coreml_provider_factory.h for more details.\n     *\n     * This flag is available only in ONNXRuntime (Node.js binding).\n     */\n    coreMlFlags?: number;\n    /**\n     * Specify whether to use CPU only in CoreML EP.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    useCPUOnly?: boolean;\n    useCPUAndGPU?: boolean;\n    /**\n     * Specify whether to enable CoreML EP on subgraph.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    enableOnSubgraph?: boolean;\n    /**\n     * Specify whether to only enable CoreML EP for Apple devices with ANE (Apple Neural Engine).\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    onlyEnableDeviceWithANE?: boolean;\n  }\n  export interface NnapiExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'nnapi';\n    useFP16?: boolean;\n    useNCHW?: boolean;\n    cpuDisabled?: boolean;\n    cpuOnly?: boolean;\n  }\n  // #endregion\n\n  // #endregion\n\n  // #region run options\n\n  /**\n   * A set of configurations for inference run behavior\n   */\n  export interface RunOptions {\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0 | 1 | 2 | 3 | 4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Terminate all incomplete OrtRun calls as soon as possible if true\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    terminate?: boolean;\n\n    /**\n     * A tag for the Run() calls using this\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    tag?: string;\n\n    /**\n     * Set a single run configuration entry. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_run_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     *\n     * ```js\n     * extra: {\n     *   memory: {\n     *     enable_memory_arena_shrinkage: \"1\",\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #endregion\n\n  // #region value metadata\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface ValueMetadata {\n    // TBD\n  }\n\n  // #endregion\n}\n\n/**\n * Represent a runtime instance of an ONNX model.\n */\nexport interface InferenceSession {\n  // #region run()\n\n  /**\n   * Execute the model asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Execute the model asynchronously with the given feeds, fetches and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param fetches - Representation of the model output. See type description of `InferenceSession.OutputType` for\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(\n    feeds: InferenceSession.FeedsType,\n    fetches: InferenceSession.FetchesType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n\n  // #endregion\n\n  // #region profiling\n\n  /**\n   * Start profiling.\n   */\n  startProfiling(): void;\n\n  /**\n   * End profiling.\n   */\n  endProfiling(): void;\n\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded model.\n   */\n  readonly inputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded model.\n   */\n  readonly outputNames: readonly string[];\n\n  // /**\n  //  * Get input metadata of the loaded model.\n  //  */\n  // readonly inputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // /**\n  //  * Get output metadata of the loaded model.\n  //  */\n  // readonly outputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // #endregion\n}\n\nexport interface InferenceSessionFactory {\n  // #region create()\n\n  /**\n   * Create a new inference session and load model asynchronously from an ONNX model file.\n   *\n   * @param uri - The URI or file path of the model to load.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(uri: string, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from segment of an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param byteOffset - The beginning of the specified portion of the array buffer.\n   * @param byteLength - The length in bytes of the array buffer.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(\n    buffer: ArrayBufferLike,\n    byteOffset: number,\n    byteLength?: number,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from a Uint8Array.\n   *\n   * @param buffer - A Uint8Array representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession: InferenceSessionFactory = InferenceSessionImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { OptionsFormat, OptionsNormalizationParameters, OptionsTensorLayout } from './tensor-factory.js';\n\nexport interface TensorToDataUrlOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface TensorToImageDataOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface ConversionUtils {\n  /**\n   * creates a DataURL instance from tensor\n   *\n   * @param options - An optional object representing options for creating a DataURL instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns a DataURL string representing the image converted from tensor data\n   */\n  toDataURL(options?: TensorToDataUrlOptions): string;\n\n  /**\n   * creates an ImageData instance from tensor\n   *\n   * @param options - An optional object representing options for creating an ImageData instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns an ImageData instance representing the image converted from tensor data\n   */\n  toImageData(options?: TensorToImageDataOptions): ImageData;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor, TypedTensor } from './tensor.js';\n\nexport type ImageFormat = 'RGB' | 'RGBA' | 'BGR' | 'RBG';\nexport type ImageTensorLayout = 'NHWC' | 'NCHW';\n\n// the following region contains type definitions for constructing tensor from a specific location.\n\n// #region types for constructing a tensor from a specific location\n\n/**\n * represent common properties of the parameter for constructing a tensor from a specific location.\n */\ninterface CommonConstructorParameters<T> extends Pick<Tensor, 'dims'> {\n  /**\n   * Specify the data type of the tensor.\n   */\n  readonly type: T;\n}\n\n/**\n * represent the parameter for constructing a tensor from a GPU resource.\n */\ninterface GpuResourceConstructorParameters<T extends Tensor.Type> {\n  /**\n   * an optional callback function to download data from GPU to CPU.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  download?(): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * an optional callback function that will be called when the tensor is disposed.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  dispose?(): void;\n}\n\n/**\n * represent the parameter for constructing a tensor from a pinned CPU buffer\n */\nexport interface CpuPinnedConstructorParameters<T extends Tensor.CpuPinnedDataTypes = Tensor.CpuPinnedDataTypes>\n  extends CommonConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'cpu-pinned'.\n   */\n  readonly location: 'cpu-pinned';\n  /**\n   * Specify the CPU pinned buffer that holds the tensor data.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGL texture\n */\nexport interface TextureConstructorParameters<T extends Tensor.TextureDataTypes = Tensor.TextureDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'texture'.\n   */\n  readonly location: 'texture';\n  /**\n   * Specify the WebGL texture that holds the tensor data.\n   */\n  readonly texture: Tensor.TextureType;\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGPU buffer\n */\nexport interface GpuBufferConstructorParameters<T extends Tensor.GpuBufferDataTypes = Tensor.GpuBufferDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'gpu-buffer'.\n   */\n  readonly location: 'gpu-buffer';\n  /**\n   * Specify the WebGPU buffer that holds the tensor data.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n}\n\nexport interface MLTensorConstructorParameters<T extends Tensor.MLTensorDataTypes = Tensor.MLTensorDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'ml-tensor'.\n   */\n  readonly location: 'ml-tensor';\n\n  /**\n   * Specify the WebNN MLTensor that holds the tensor data.\n   */\n  readonly mlTensor: Tensor.MLTensorType;\n}\n\n// #endregion\n\n// the following region contains type definitions of each individual options.\n// the tensor factory functions use a composition of those options as the parameter type.\n\n// #region Options fields\n\nexport interface OptionsFormat {\n  /**\n   * Describes the image format represented in RGBA color space.\n   */\n  format?: ImageFormat;\n}\n\nexport interface OptionsTensorFormat {\n  /**\n   * Describes the image format of the tensor.\n   *\n   * NOTE: this is different from option 'format'. While option 'format' represents the original image, 'tensorFormat'\n   * represents the target format of the tensor. A transpose will be performed if they are different.\n   */\n  tensorFormat?: ImageFormat;\n}\n\nexport interface OptionsTensorDataType {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: 'float32' | 'uint8';\n}\n\nexport interface OptionsTensorLayout {\n  /**\n   * Describes the tensor layout when representing data of one or more image(s).\n   */\n  tensorLayout?: ImageTensorLayout;\n}\n\nexport interface OptionsDimensions {\n  /**\n   * Describes the image height in pixel\n   */\n  height?: number;\n  /**\n   * Describes the image width in pixel\n   */\n  width?: number;\n}\n\nexport interface OptionResizedDimensions {\n  /**\n   * Describes the resized height. If omitted, original height will be used.\n   */\n  resizedHeight?: number;\n  /**\n   * Describes resized width - can be accessed via tensor dimensions as well\n   */\n  resizedWidth?: number;\n}\n\nexport interface OptionsNormalizationParameters {\n  /**\n   * Describes normalization parameters when preprocessing the image as model input.\n   *\n   * Data element are ranged from 0 to 255.\n   */\n  norm?: {\n    /**\n     * The 'bias' value for image normalization.\n     * - If omitted, use default value 0.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    bias?: number | [number, number, number] | [number, number, number, number];\n    /**\n     * The 'mean' value for image normalization.\n     * - If omitted, use default value 255.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    mean?: number | [number, number, number] | [number, number, number, number];\n  };\n}\n\n// #endregion\n\n// #region Options composition\n\nexport interface TensorFromImageDataOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromImageElementOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromUrlOptions\n  extends OptionsDimensions,\n    OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromImageBitmapOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromTextureOptions<T extends Tensor.TextureDataTypes>\n  extends Required<OptionsDimensions>,\n    OptionsFormat,\n    GpuResourceConstructorParameters<T> /* TODO: add more */ {}\n\nexport interface TensorFromGpuBufferOptions<T extends Tensor.GpuBufferDataTypes>\n  extends Pick<Tensor, 'dims'>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: T;\n}\n\nexport interface TensorFromMLTensorOptions<T extends Tensor.MLTensorDataTypes>\n  extends Pick<Tensor, 'dims'>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: T;\n}\n\n// #endregion\n\n/**\n * type TensorFactory defines the factory functions of 'Tensor' to create tensor instances from existing data or\n * resources.\n */\nexport interface TensorFactory {\n  /**\n   * create a tensor from an ImageData object\n   *\n   * @param imageData - the ImageData object to create tensor from\n   * @param options - An optional object representing options for creating tensor from ImageData.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    imageData: ImageData,\n    options?: TensorFromImageDataOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a HTMLImageElement object\n   *\n   * @param imageElement - the HTMLImageElement object to create tensor from\n   * @param options - An optional object representing options for creating tensor from HTMLImageElement.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    imageElement: HTMLImageElement,\n    options?: TensorFromImageElementOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from URL\n   *\n   * @param urlSource - a string as a URL to the image or a data URL containing the image data.\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(urlSource: string, options?: TensorFromUrlOptions): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from an ImageBitmap object\n   *\n   * @param bitmap - the ImageBitmap object to create tensor from\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    bitmap: ImageBitmap,\n    options: TensorFromImageBitmapOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a WebGL texture\n   *\n   * @param texture - the WebGLTexture object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGL texture.\n   *\n   * The options include following properties:\n   * - `width`: the width of the texture. Required.\n   * - `height`: the height of the texture. Required.\n   * - `format`: the format of the texture. If omitted, assume 'RGBA'.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromTexture<T extends Tensor.TextureDataTypes = 'float32'>(\n    texture: Tensor.TextureType,\n    options: TensorFromTextureOptions<T>,\n  ): TypedTensor<'float32'>;\n\n  /**\n   * create a tensor from a WebGPU buffer\n   *\n   * @param buffer - the GPUBuffer object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGPU buffer.\n   *\n   * The options include following properties:\n   * - `dataType`: the data type of the tensor. If omitted, assume 'float32'.\n   * - `dims`: the dimension of the tensor. Required.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromGpuBuffer<T extends Tensor.GpuBufferDataTypes>(\n    buffer: Tensor.GpuBufferType,\n    options: TensorFromGpuBufferOptions<T>,\n  ): TypedTensor<T>;\n\n  /**\n   * create a tensor from a WebNN MLTensor\n   *\n   * @param tensor - the MLTensor object to create tensor from\n   * @param options - An optional object representing options for creating tensor from a WebNN MLTensor.\n   *\n   * The options include following properties:\n   * - `dataType`: the data type of the tensor. If omitted, assume 'float32'.\n   * - `dims`: the dimension of the tensor. Required.\n   * - `download`: an optional function to download the tensor data from the MLTensor to CPU. If omitted, the MLTensor\n   * data will not be able to download. Usually, this is provided by the WebNN backend for the inference outputs.\n   * Users don't need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on the WebNN MLTensor. If omitted, the MLTensor will\n   * not be disposed. Usually, this is provided by the WebNN backend for the inference outputs. Users don't need to\n   * provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromMLTensor<T extends Tensor.MLTensorDataTypes>(\n    tensor: Tensor.MLTensorType,\n    options: TensorFromMLTensorOptions<T>,\n  ): TypedTensor<T>;\n\n  /**\n   * create a tensor from a pre-allocated buffer. The buffer will be used as a pinned buffer.\n   *\n   * @param type - the tensor element type.\n   * @param buffer - a TypedArray corresponding to the type.\n   * @param dims - specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   *\n   * @returns a tensor object\n   */\n  fromPinnedBuffer<T extends Exclude<Tensor.Type, 'string'>>(\n    type: T,\n    buffer: Tensor.DataTypeMap[T],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * A string that represents a file's URL or path.\n *\n * Path is vailable only in onnxruntime-node or onnxruntime-web running in Node.js.\n */\nexport type FileUrlOrPath = string;\n\n/**\n * A Blob object that represents a file.\n */\nexport type FileBlob = Blob;\n\n/**\n * A Uint8Array, ArrayBuffer or SharedArrayBuffer object that represents a file content.\n *\n * When it is an ArrayBuffer or SharedArrayBuffer, the whole buffer is assumed to be the file content.\n */\nexport type FileData = Uint8Array | ArrayBufferLike;\n\n/**\n * Represents a file that can be loaded by the ONNX Runtime JavaScript API.\n */\nexport type FileType = FileUrlOrPath | FileBlob | FileData;\n\n/**\n * Represents an external data file.\n */\nexport interface ExternalDataFileDescription {\n  /**\n   * Specify the external data file.\n   */\n  data: FileType;\n  /**\n   * Specify the file path.\n   */\n  path: string;\n}\n\n/**\n * Represents an external data file.\n *\n * When using a string, it should be a file URL or path that in the same directory as the model file.\n */\nexport type ExternalDataFileType = ExternalDataFileDescription | FileUrlOrPath;\n\n/**\n * Options for model loading.\n */\nexport interface OnnxModelOptions {\n  /**\n   * Specifying a list of files that represents the external data.\n   */\n  externalData?: readonly ExternalDataFileType[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from './tensor.js';\n\nexport type NonTensorType = never;\n\n/**\n * Type OnnxValue Represents both tensors and non-tensors value for model's inputs/outputs.\n *\n * NOTE: currently not support non-tensor\n */\nexport type OnnxValue = Tensor | NonTensorType;\n\n/**\n * Type OnnxValueDataLocation represents the location of the data of an OnnxValue.\n */\nexport type OnnxValueDataLocation = Tensor.DataLocation;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { resolveBackendAndExecutionProviders } from './backend-impl.js';\nimport { SessionHandler, TrainingSessionHandler } from './backend.js';\nimport { InferenceSession as InferenceSession } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { Tensor } from './tensor.js';\nimport { TrainingSession as TrainingSessionInterface, TrainingSessionCreateOptions } from './training-session.js';\n\ntype SessionOptions = InferenceSession.SessionOptions;\ntype FeedsType = InferenceSession.FeedsType;\ntype FetchesType = InferenceSession.FetchesType;\ntype ReturnType = InferenceSession.ReturnType;\ntype RunOptions = InferenceSession.RunOptions;\n\nconst noBackendErrMsg: string =\n  'Training backend could not be resolved. ' + \"Make sure you're using the correct configuration & WebAssembly files.\";\n\nexport class TrainingSession implements TrainingSessionInterface {\n  private constructor(handler: TrainingSessionHandler, hasOptimizerModel: boolean, hasEvalModel: boolean) {\n    this.handler = handler;\n    this.hasOptimizerModel = hasOptimizerModel;\n    this.hasEvalModel = hasEvalModel;\n  }\n  private handler: TrainingSessionHandler;\n  private hasOptimizerModel: boolean;\n  private hasEvalModel: boolean;\n\n  get trainingInputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get trainingOutputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  get evalInputNames(): readonly string[] {\n    if (this.hasEvalModel) {\n      return this.handler.evalInputNames;\n    } else {\n      throw new Error('This training session has no evalModel loaded.');\n    }\n  }\n  get evalOutputNames(): readonly string[] {\n    if (this.hasEvalModel) {\n      return this.handler.evalOutputNames;\n    } else {\n      throw new Error('This training session has no evalModel loaded.');\n    }\n  }\n\n  static async create(\n    trainingOptions: TrainingSessionCreateOptions,\n    sessionOptions?: SessionOptions,\n  ): Promise<TrainingSession> {\n    const evalModel: string | Uint8Array = trainingOptions.evalModel || '';\n    const optimizerModel: string | Uint8Array = trainingOptions.optimizerModel || '';\n    const options: SessionOptions = sessionOptions || {};\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    if (backend.createTrainingSessionHandler) {\n      const handler = await backend.createTrainingSessionHandler(\n        trainingOptions.checkpointState,\n        trainingOptions.trainModel,\n        evalModel,\n        optimizerModel,\n        optionsWithValidatedEPs,\n      );\n      return new TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);\n    } else {\n      throw new Error(noBackendErrMsg);\n    }\n  }\n\n  /**\n   * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from\n   * the given parameters to SessionHandler.FetchesType and RunOptions.\n   *\n   * @param inputNames the feeds object is checked that they contain all input names in the provided list of input\n   * names.\n   * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output\n   * names.\n   * @param feeds the required input\n   * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object\n   * @param arg2 optional RunOptions object.\n   * @returns\n   */\n  typeNarrowingForRunStep(\n    inputNames: readonly string[],\n    outputNames: readonly string[],\n    feeds: FeedsType,\n    arg1?: FetchesType | RunOptions,\n    arg2?: RunOptions,\n  ): [SessionHandler.FetchesType, RunOptions] {\n    const fetches: { [name: string]: OnnxValue | null } = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n        \"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\",\n      );\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError(\"'fetches' cannot be a Tensor\");\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError(\"'fetches' cannot be an empty array.\");\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError(\"'fetches' must be a string array or an object.\");\n          }\n          if (outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError(\"'options' must be an object.\");\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSession.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError(\"'options' must be an object.\");\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n    }\n\n    // check if all inputs are in feed\n    for (const name of inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    return [fetches, options];\n  }\n\n  /**\n   * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler\n   * and changes it into a map of Tensors.\n   *\n   * @param results\n   * @returns\n   */\n  convertHandlerReturnTypeToMapOfTensors(results: SessionHandler.ReturnType): ReturnType {\n    const returnValue: { [name: string]: OnnxValue } = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    return returnValue;\n  }\n\n  async lazyResetGrad(): Promise<void> {\n    await this.handler.lazyResetGrad();\n  }\n\n  runTrainStep(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  runTrainStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async runTrainStep(feeds: FeedsType, arg1?: FetchesType | RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    const [fetches, options] = this.typeNarrowingForRunStep(\n      this.trainingInputNames,\n      this.trainingOutputNames,\n      feeds,\n      arg1,\n      arg2,\n    );\n    const results = await this.handler.runTrainStep(feeds, fetches, options);\n    return this.convertHandlerReturnTypeToMapOfTensors(results);\n  }\n\n  async runOptimizerStep(options?: InferenceSession.RunOptions | undefined): Promise<void> {\n    if (this.hasOptimizerModel) {\n      await this.handler.runOptimizerStep(options || {});\n    } else {\n      throw new Error('This TrainingSession has no OptimizerModel loaded.');\n    }\n  }\n\n  runEvalStep(feeds: FeedsType, options?: RunOptions | undefined): Promise<ReturnType>;\n  runEvalStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions | undefined): Promise<ReturnType>;\n  async runEvalStep(feeds: FeedsType, arg1?: FetchesType | RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    if (this.hasEvalModel) {\n      const [fetches, options] = this.typeNarrowingForRunStep(\n        this.evalInputNames,\n        this.evalOutputNames,\n        feeds,\n        arg1,\n        arg2,\n      );\n      const results = await this.handler.runEvalStep(feeds, fetches, options);\n      return this.convertHandlerReturnTypeToMapOfTensors(results);\n    } else {\n      throw new Error('This TrainingSession has no EvalModel loaded.');\n    }\n  }\n\n  async getParametersSize(trainableOnly = true): Promise<number> {\n    return this.handler.getParametersSize(trainableOnly);\n  }\n\n  async loadParametersBuffer(array: Uint8Array, trainableOnly = true): Promise<void> {\n    const paramsSize = await this.getParametersSize(trainableOnly);\n    // checking that the size of the Uint8Array is equivalent to the byte length of a Float32Array of the number\n    // of parameters\n    if (array.length !== 4 * paramsSize) {\n      throw new Error(\n        'Size of the buffer passed into loadParametersBuffer must match the number of parameters in ' +\n          'the model. Please use getParametersSize method to check.',\n      );\n    }\n    return this.handler.loadParametersBuffer(array, trainableOnly);\n  }\n\n  async getContiguousParameters(trainableOnly = true): Promise<OnnxValue> {\n    return this.handler.getContiguousParameters(trainableOnly);\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { TrainingSession as TrainingSessionImpl } from './training-session-impl.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace TrainingSession {\n  /**\n   * Either URI file path (string) or Uint8Array containing model or checkpoint information.\n   */\n  type UriOrBuffer = string | Uint8Array;\n}\n\n/**\n * Represent a runtime instance of an ONNX training session,\n * which contains a model that can be trained, and, optionally,\n * an eval and optimizer model.\n */\nexport interface TrainingSession {\n  // #region run()\n\n  /**\n   * Lazily resets the gradients of all trainable parameters to zero. Should happen after the invocation of\n   * runOptimizerStep.\n   */\n  lazyResetGrad(): Promise<void>;\n\n  /**\n   * Run TrainStep asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for\n   detail.\n   * @param options - Optional. A set of options that controls the behavior of model training.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  runTrainStep(\n    feeds: InferenceSession.FeedsType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Run a single train step with the given inputs and options.\n   *\n   * @param feeds - Representation of the model input.\n   * @param fetches - Representation of the model output.\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model training.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runTrainStep(\n    feeds: InferenceSession.FeedsType,\n    fetches: InferenceSession.FetchesType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Runs a single optimizer step, which performs weight updates for the trainable parameters using the optimizer model.\n   *\n   * @param options - Optional. A set of options that controls the behavior of model optimizing.\n   */\n  runOptimizerStep(options?: InferenceSession.RunOptions): Promise<void>;\n\n  /**\n   * Run a single eval step with the given inputs and options using the eval model.\n   *\n   * @param feeds - Representation of the model input.\n   * @param options - Optional. A set of options that controls the behavior of model eval step.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runEvalStep(\n    feeds: InferenceSession.FeedsType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Run a single eval step with the given inputs and options using the eval model.\n   *\n   * @param feeds - Representation of the model input.\n   * @param fetches - Representation of the model output.\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model eval step.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runEvalStep(\n    feeds: InferenceSession.FeedsType,\n    fetches: InferenceSession.FetchesType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region copy parameters\n\n  /**\n   * Retrieves the size of all parameters for the training state. Calculates the total number of primitive (datatype of\n   * the parameters) elements of all the parameters in the training state.\n   *\n   * @param trainableOnly - When set to true, the size is calculated for trainable params only. Default value is true.\n   */\n  getParametersSize(trainableOnly: boolean): Promise<number>;\n\n  /**\n   * Copies parameter values from the given buffer to the training state. Currently, only supporting models with\n   * parameters of type Float32.\n   *\n   * @param buffer - A Uint8Array representation of Float32 parameters.\n   * @param trainableOnly - True if trainable parameters only to be modified, false otherwise. Default value is true.\n   */\n  loadParametersBuffer(buffer: Uint8Array, trainableOnly: boolean): Promise<void>;\n\n  /**\n   * Copies the model parameters to a contiguous buffer. Usually used in the context of Federated Learning.\n   * Currently, only supporting models with parameters of type Float32.\n   *\n   * @param trainableOnly - When set to true, only trainable parameters are copied. Trainable parameters are parameters\n   * for which requires_grad is set to true. Default value is true.\n   * @returns A promise that resolves to a Float32 OnnxValue of the requested parameters.\n   */\n  getContiguousParameters(trainableOnly: boolean): Promise<OnnxValue>;\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded training model.\n   */\n  readonly trainingInputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded training model.\n   */\n  readonly trainingOutputNames: readonly string[];\n\n  /**\n   * Get input names of the loaded eval model. Is an empty array if no eval model is loaded.\n   */\n  readonly evalInputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded eval model. Is an empty array if no eval model is loaded.\n   */\n  readonly evalOutputNames: readonly string[];\n\n  // #endregion\n}\n\n/**\n * Represents the optional parameters that can be passed into the TrainingSessionFactory.\n */\nexport interface TrainingSessionCreateOptions {\n  /**\n   * URI or buffer for a .ckpt file that contains the checkpoint for the training model.\n   */\n  checkpointState: TrainingSession.UriOrBuffer;\n  /**\n   * URI or buffer for the .onnx training file.\n   */\n  trainModel: TrainingSession.UriOrBuffer;\n  /**\n   * Optional. URI or buffer for the .onnx optimizer model file.\n   */\n  optimizerModel?: TrainingSession.UriOrBuffer;\n  /**\n   * Optional. URI or buffer for the .onnx eval model file.\n   */\n  evalModel?: TrainingSession.UriOrBuffer;\n}\n\n/**\n * Defines method overload possibilities for creating a TrainingSession.\n */\nexport interface TrainingSessionFactory {\n  // #region create()\n\n  /**\n   * Creates a new TrainingSession and asynchronously loads any models passed in through trainingOptions\n   *\n   * @param trainingOptions specify models and checkpoints to load into the Training Session\n   * @param sessionOptions specify configuration for training session behavior\n   *\n   * @returns Promise that resolves to a TrainingSession object\n   */\n  create(\n    trainingOptions: TrainingSessionCreateOptions,\n    sessionOptions?: InferenceSession.SessionOptions,\n  ): Promise<TrainingSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const TrainingSession: TrainingSessionFactory = TrainingSessionImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript/)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n\nexport * from './backend.js';\nexport * from './env.js';\nexport * from './inference-session.js';\nexport * from './tensor.js';\nexport * from './tensor-conversion.js';\nexport * from './tensor-factory.js';\nexport * from './trace.js';\nexport * from './onnx-model.js';\nexport * from './onnx-value.js';\nexport * from './training-session.js';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport { WebGLContext } from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none' | 'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000,\n};\n\nconst LOGGER_PROVIDER_MAP: { readonly [provider: string]: Readonly<LoggerProvider> } = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider(),\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false,\n};\nlet LOGGER_CONFIG_MAP: { [category: string]: Readonly<Required<Logger.Config>> } = {\n  ['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>,\n};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n  arg0: string | Logger.Severity,\n  arg1?: string,\n  arg2?: string | number,\n  arg3?: number,\n): Logger.CategorizedLogger | void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category),\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, _stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: config.logDateTime === undefined ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation:\n          config.logSourceLocation === undefined ? previousConfig.logSourceLocation : config.logSourceLocation,\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session' | 'node' | 'op' | 'backend';\n\n  export interface Event {\n    end(): void | Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n    public category: Profiler.EventCategory,\n    public name: string,\n    public startTime: number,\n    private endCallback: (e: Event) => void | Promise<void>,\n    public timer?: WebGLQuery,\n    public ctx?: WebGLContext,\n  ) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n    public category: Profiler.EventCategory,\n    public name: string,\n    public startTime: number,\n    public endTime: number,\n  ) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(\n    category: Profiler.EventCategory,\n    name: string,\n    func: () => T | Promise<T>,\n    ctx?: WebGLContext,\n  ): T | Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>).then(\n          async (value) => {\n            // fulfilled\n            if (event) {\n              await event.end();\n            }\n            resolve(value);\n          },\n          async (reason) => {\n            // rejected\n            if (event) {\n              await event.end();\n            }\n            reject(reason);\n          },\n        );\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          eventRes.then(\n            () => {\n              // fulfilled\n              resolve(res);\n            },\n            (reason) => {\n              // rejected\n              reject(reason);\n            },\n          );\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, (e) => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async (e) => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n      `Profiler.${event.category}`,\n      `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`,\n    );\n  }\n\n  private flush(currentTime: number) {\n    if (\n      this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n      currentTime - this._flushTime >= this._flushIntervalInMilliseconds\n    ) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (\n        const previousPointer = this._flushPointer;\n        this._flushPointer < previousPointer + this._flushBatchSize && this._flushPointer < this._timingEvents.length;\n        this._flushPointer++\n      ) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = typeof performance !== 'undefined' && performance.now ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from './graph';\nimport { OperatorImplementation, OperatorInitialization } from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = '' | 'ai.onnx.ml' | 'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule =\n    | [string, Domain, string, OperatorImplementation<Graph.Node>]\n    | [string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {\n      // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {\n          // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return { opImpl, opInit };\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(\n    `cannot resolve operator '${node.opType}' with opsets: ${opsets\n      .map((set) => `${set.domain || 'ai.onnx'} v${set.version}`)\n      .join(', ')}`,\n  );\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n  ])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = (0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache)\n      UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = (-128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache)\n      INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value))\n    return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0)\n      return UZERO;\n    if (value >= TWO_PWR_64_DBL)\n      return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL)\n      return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL)\n      return MAX_VALUE;\n  }\n  if (value < 0)\n    return fromNumber(-value, unsigned).neg();\n  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0)\n    throw Error('empty string');\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n\n  var p;\n  if ((p = str.indexOf('-')) > 0)\n    throw Error('interior hyphen');\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number')\n    return fromNumber(val, unsigned);\n  if (typeof val === 'string')\n    return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n  if (this.isZero())\n    return '0';\n  if (this.isNegative()) { // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else\n      return '-' + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero())\n      return digits + result;\n    else {\n      while (digits.length < 6)\n        digits = '0' + digits;\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--)\n    if ((val & (1 << bit)) != 0)\n      break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.eq(other))\n    return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg)\n    return -1;\n  if (!thisNeg && otherNeg)\n    return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned)\n    return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE))\n    return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend))\n    addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend))\n    subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero())\n    return this;\n  if (!isLong(multiplier))\n    multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low,\n      this.high,\n      multiplier.low,\n      multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE))\n    return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE))\n    return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative())\n      return this.neg().mul(multiplier.neg());\n    else\n      return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative())\n    return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n  if (divisor.isZero())\n    throw Error('division by zero');\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE))\n        return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE))\n      return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative())\n        return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative())\n      return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned)\n      divisor = divisor.toUnsigned();\n    if (divisor.gt(this))\n      return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero())\n      approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n  else\n    return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n  else\n    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    lo >>> 8 & 0xff,\n    lo >>> 16 & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    hi >>> 8 & 0xff,\n    hi >>> 16 & 0xff,\n    hi >>> 24\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    hi >>> 16 & 0xff,\n    hi >>> 8 & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    lo >>> 16 & 0xff,\n    lo >>> 8 & 0xff,\n    lo & 0xff\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] |\n    bytes[1] << 8 |\n    bytes[2] << 16 |\n    bytes[3] << 24,\n    bytes[4] |\n    bytes[5] << 8 |\n    bytes[6] << 16 |\n    bytes[7] << 24,\n    unsigned\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    bytes[4] << 24 |\n    bytes[5] << 16 |\n    bytes[6] << 8 |\n    bytes[7],\n    bytes[0] << 24 |\n    bytes[1] << 16 |\n    bytes[2] << 8 |\n    bytes[3],\n    unsigned\n  );\n};\n\nexport default Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport { flatbuffers } from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {\n    UNKNOWN = 0,\n    VALUE = 1,\n    PARAM = 2,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {\n    Primitive = 0,\n    Fused = 1,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {\n    NONE = 0,\n    tensor_type = 1,\n    sequence_type = 2,\n    map_type = 3,\n  }\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Dimension()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.DimensionValue()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string | null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    denotation(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n      builder: flatbuffers.Builder,\n      valueOffset: flatbuffers.Offset,\n      denotationOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? /**  */ this.bb!.readInt8(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string | null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    dimParam(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n      builder: flatbuffers.Builder,\n      dimType: onnxruntime.experimental.fbs.DimensionValueType,\n      dimValue: flatbuffers.Long,\n      dimParamOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(\n      bb: flatbuffers.ByteBuffer,\n      obj?: TensorTypeAndShape,\n    ): TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Shape()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n      builder: flatbuffers.Builder,\n      elemType: onnxruntime.experimental.fbs.TensorDataType,\n      shapeOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.TypeInfo()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n      builder: flatbuffers.Builder,\n      keyType: onnxruntime.experimental.fbs.TensorDataType,\n      valueTypeOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.TypeInfo()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n      builder: flatbuffers.Builder,\n      node_index: number,\n      src_arg_index: number,\n      dst_arg_index: number,\n    ): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.EdgeEnd()).__init(\n            this.bb!.__vector(this.bb_pos + offset) + index * 12,\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.EdgeEnd,\n    ): onnxruntime.experimental.fbs.EdgeEnd | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.EdgeEnd()).__init(\n            this.bb!.__vector(this.bb_pos + offset) + index * 12,\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n      builder: flatbuffers.Builder,\n      nodeIndex: number,\n      inputEdgesOffset: flatbuffers.Offset,\n      outputEdgesOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string | null;\n    domain(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    domain(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string | null;\n    opType(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    opType(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string | null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    executionProviderType(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.Attribute,\n    ): onnxruntime.experimental.fbs.Attribute | null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Attribute()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number | null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset\n        ? new Int32Array(\n            this.bb!.bytes().buffer,\n            this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n            this.bb!.__vector_len(this.bb_pos + offset),\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n      builder: flatbuffers.Builder,\n      nameOffset: flatbuffers.Offset,\n      docStringOffset: flatbuffers.Offset,\n      domainOffset: flatbuffers.Offset,\n      sinceVersion: number,\n      index: number,\n      opTypeOffset: flatbuffers.Offset,\n      type: onnxruntime.experimental.fbs.NodeType,\n      executionProviderTypeOffset: flatbuffers.Offset,\n      inputsOffset: flatbuffers.Offset,\n      outputsOffset: flatbuffers.Offset,\n      attributesOffset: flatbuffers.Offset,\n      inputArgCountsOffset: flatbuffers.Offset,\n      implicitInputsOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.TypeInfo()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n      builder: flatbuffers.Builder,\n      nameOffset: flatbuffers.Offset,\n      docStringOffset: flatbuffers.Offset,\n      typeOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string | null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    denotation(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? /**  */ this.bb!.readUint8(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n      builder: flatbuffers.Builder,\n      denotationOffset: flatbuffers.Offset,\n      valueType: onnxruntime.experimental.fbs.TypeInfoValue,\n      valueOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string | null;\n    domain(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    domain(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n      builder: flatbuffers.Builder,\n      domainOffset: flatbuffers.Offset,\n      version: flatbuffers.Long,\n    ): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)\n        : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number | null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset\n        ? new Uint8Array(\n            this.bb!.bytes().buffer,\n            this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n            this.bb!.__vector_len(this.bb_pos + offset),\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n      builder: flatbuffers.Builder,\n      nameOffset: flatbuffers.Offset,\n      docStringOffset: flatbuffers.Offset,\n      dimsOffset: flatbuffers.Offset,\n      dataType: onnxruntime.experimental.fbs.TensorDataType,\n      rawDataOffset: flatbuffers.Offset,\n      stringDataOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)\n        : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n      builder: flatbuffers.Builder,\n      valuesOffset: flatbuffers.Offset,\n      indicesOffset: flatbuffers.Offset,\n      dimsOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string | null;\n    s(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    s(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph | null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Graph()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number | null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset\n        ? new Float32Array(\n            this.bb!.bytes().buffer,\n            this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n            this.bb!.__vector_len(this.bb_pos + offset),\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long | null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset\n        ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)\n        : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    strings(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph | null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Graph()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n      builder: flatbuffers.Builder,\n      nameOffset: flatbuffers.Offset,\n      docStringOffset: flatbuffers.Offset,\n      type: onnxruntime.experimental.fbs.AttributeType,\n      f: number,\n      i: flatbuffers.Long,\n      sOffset: flatbuffers.Offset,\n      tOffset: flatbuffers.Offset,\n      gOffset: flatbuffers.Offset,\n      floatsOffset: flatbuffers.Offset,\n      intsOffset: flatbuffers.Offset,\n      stringsOffset: flatbuffers.Offset,\n      tensorsOffset: flatbuffers.Offset,\n      graphsOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.ValueInfo,\n    ): onnxruntime.experimental.fbs.ValueInfo | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.ValueInfo()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Node()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.NodeEdge,\n    ): onnxruntime.experimental.fbs.NodeEdge | null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.NodeEdge()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.SparseTensor,\n    ): onnxruntime.experimental.fbs.SparseTensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.SparseTensor()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(\n      builder: flatbuffers.Builder,\n      data: flatbuffers.Offset[],\n    ): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n      builder: flatbuffers.Builder,\n      initializersOffset: flatbuffers.Offset,\n      nodeArgsOffset: flatbuffers.Offset,\n      nodesOffset: flatbuffers.Offset,\n      maxNodeIndex: number,\n      nodeEdgesOffset: flatbuffers.Offset,\n      inputsOffset: flatbuffers.Offset,\n      outputsOffset: flatbuffers.Offset,\n      sparseInitializersOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.OperatorSetId,\n    ): onnxruntime.experimental.fbs.OperatorSetId | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.OperatorSetId()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string | null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    producerName(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string | null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    producerVersion(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string | null;\n    domain(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    domain(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph | null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Graph()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string | null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    graphDocString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n      builder: flatbuffers.Builder,\n      irVersion: flatbuffers.Long,\n      opsetImportOffset: flatbuffers.Offset,\n      producerNameOffset: flatbuffers.Offset,\n      producerVersionOffset: flatbuffers.Offset,\n      domainOffset: flatbuffers.Offset,\n      modelVersion: flatbuffers.Long,\n      docStringOffset: flatbuffers.Offset,\n      graphOffset: flatbuffers.Offset,\n      graphDocStringOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(\n      bb: flatbuffers.ByteBuffer,\n      obj?: KernelCreateInfos,\n    ): KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? new Uint32Array(\n            this.bb!.bytes().buffer,\n            this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n            this.bb!.__vector_len(this.bb_pos + offset),\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8)\n        : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n      builder: flatbuffers.Builder,\n      nodeIndicesOffset: flatbuffers.Offset,\n      kernelDefHashesOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(\n      bb: flatbuffers.ByteBuffer,\n      obj?: SubGraphSessionState,\n    ): SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string | null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    graphId(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.SessionState()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4); // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n      builder: flatbuffers.Builder,\n      graphIdOffset: flatbuffers.Offset,\n      sessionStateOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(\n      obj?: onnxruntime.experimental.fbs.KernelCreateInfos,\n    ): onnxruntime.experimental.fbs.KernelCreateInfos | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.SubGraphSessionState,\n    ): onnxruntime.experimental.fbs.SubGraphSessionState | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(\n      builder: flatbuffers.Builder,\n      data: flatbuffers.Offset[],\n    ): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n      builder: flatbuffers.Builder,\n      kernelsOffset: flatbuffers.Offset,\n      subGraphSessionStatesOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string | null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    ortVersion(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Model()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.SessionState()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n      builder: flatbuffers.Builder,\n      ortVersionOffset: flatbuffers.Offset,\n      modelOffset: flatbuffers.Offset,\n      sessionStateOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n'use strict';\n\nvar $protobuf = require('protobufjs/minimal');\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {});\n\n$root.onnx = (function () {\n  /**\n   * Namespace onnx.\n   * @exports onnx\n   * @namespace\n   */\n  var onnx = {};\n\n  /**\n   * Version enum.\n   * @name onnx.Version\n   * @enum {number}\n   * @property {number} _START_VERSION=0 _START_VERSION value\n   * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n   * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n   * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n   * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n   * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n   * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n   * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n   * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n   * @property {number} IR_VERSION=9 IR_VERSION value\n   */\n  onnx.Version = (function () {\n    var valuesById = {},\n      values = Object.create(valuesById);\n    values[(valuesById[0] = '_START_VERSION')] = 0;\n    values[(valuesById[1] = 'IR_VERSION_2017_10_10')] = 1;\n    values[(valuesById[2] = 'IR_VERSION_2017_10_30')] = 2;\n    values[(valuesById[3] = 'IR_VERSION_2017_11_3')] = 3;\n    values[(valuesById[4] = 'IR_VERSION_2019_1_22')] = 4;\n    values[(valuesById[5] = 'IR_VERSION_2019_3_18')] = 5;\n    values[(valuesById[6] = 'IR_VERSION_2019_9_19')] = 6;\n    values[(valuesById[7] = 'IR_VERSION_2020_5_8')] = 7;\n    values[(valuesById[8] = 'IR_VERSION_2021_7_30')] = 8;\n    values[(valuesById[9] = 'IR_VERSION')] = 9;\n    return values;\n  })();\n\n  onnx.AttributeProto = (function () {\n    /**\n     * Properties of an AttributeProto.\n     * @memberof onnx\n     * @interface IAttributeProto\n     * @property {string|null} [name] AttributeProto name\n     * @property {string|null} [refAttrName] AttributeProto refAttrName\n     * @property {string|null} [docString] AttributeProto docString\n     * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n     * @property {number|null} [f] AttributeProto f\n     * @property {number|Long|null} [i] AttributeProto i\n     * @property {Uint8Array|null} [s] AttributeProto s\n     * @property {onnx.ITensorProto|null} [t] AttributeProto t\n     * @property {onnx.IGraphProto|null} [g] AttributeProto g\n     * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n     * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n     * @property {Array.<number>|null} [floats] AttributeProto floats\n     * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n     * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n     * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n     * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n     * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n     * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n     */\n\n    /**\n     * Constructs a new AttributeProto.\n     * @memberof onnx\n     * @classdesc Represents an AttributeProto.\n     * @implements IAttributeProto\n     * @constructor\n     * @param {onnx.IAttributeProto=} [properties] Properties to set\n     */\n    function AttributeProto(properties) {\n      this.floats = [];\n      this.ints = [];\n      this.strings = [];\n      this.tensors = [];\n      this.graphs = [];\n      this.sparseTensors = [];\n      this.typeProtos = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AttributeProto name.\n     * @member {string} name\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.name = '';\n\n    /**\n     * AttributeProto refAttrName.\n     * @member {string} refAttrName\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.refAttrName = '';\n\n    /**\n     * AttributeProto docString.\n     * @member {string} docString\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.docString = '';\n\n    /**\n     * AttributeProto type.\n     * @member {onnx.AttributeProto.AttributeType} type\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.type = 0;\n\n    /**\n     * AttributeProto f.\n     * @member {number} f\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.f = 0;\n\n    /**\n     * AttributeProto i.\n     * @member {number|Long} i\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * AttributeProto s.\n     * @member {Uint8Array} s\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.s = $util.newBuffer([]);\n\n    /**\n     * AttributeProto t.\n     * @member {onnx.ITensorProto|null|undefined} t\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.t = null;\n\n    /**\n     * AttributeProto g.\n     * @member {onnx.IGraphProto|null|undefined} g\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.g = null;\n\n    /**\n     * AttributeProto sparseTensor.\n     * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.sparseTensor = null;\n\n    /**\n     * AttributeProto tp.\n     * @member {onnx.ITypeProto|null|undefined} tp\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.tp = null;\n\n    /**\n     * AttributeProto floats.\n     * @member {Array.<number>} floats\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.floats = $util.emptyArray;\n\n    /**\n     * AttributeProto ints.\n     * @member {Array.<number|Long>} ints\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.ints = $util.emptyArray;\n\n    /**\n     * AttributeProto strings.\n     * @member {Array.<Uint8Array>} strings\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.strings = $util.emptyArray;\n\n    /**\n     * AttributeProto tensors.\n     * @member {Array.<onnx.ITensorProto>} tensors\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.tensors = $util.emptyArray;\n\n    /**\n     * AttributeProto graphs.\n     * @member {Array.<onnx.IGraphProto>} graphs\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.graphs = $util.emptyArray;\n\n    /**\n     * AttributeProto sparseTensors.\n     * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n    /**\n     * AttributeProto typeProtos.\n     * @member {Array.<onnx.ITypeProto>} typeProtos\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n    /**\n     * Creates a new AttributeProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {onnx.IAttributeProto=} [properties] Properties to set\n     * @returns {onnx.AttributeProto} AttributeProto instance\n     */\n    AttributeProto.create = function create(properties) {\n      return new AttributeProto(properties);\n    };\n\n    /**\n     * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AttributeProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n      if (message.f != null && Object.hasOwnProperty.call(message, 'f'))\n        writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.f);\n      if (message.i != null && Object.hasOwnProperty.call(message, 'i'))\n        writer.uint32(/* id 3, wireType 0 =*/ 24).int64(message.i);\n      if (message.s != null && Object.hasOwnProperty.call(message, 's'))\n        writer.uint32(/* id 4, wireType 2 =*/ 34).bytes(message.s);\n      if (message.t != null && Object.hasOwnProperty.call(message, 't'))\n        $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n      if (message.g != null && Object.hasOwnProperty.call(message, 'g'))\n        $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\n      if (message.floats != null && message.floats.length) {\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork();\n        for (var i = 0; i < message.floats.length; ++i) writer.float(message.floats[i]);\n        writer.ldelim();\n      }\n      if (message.ints != null && message.ints.length) {\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork();\n        for (var i = 0; i < message.ints.length; ++i) writer.int64(message.ints[i]);\n        writer.ldelim();\n      }\n      if (message.strings != null && message.strings.length)\n        for (var i = 0; i < message.strings.length; ++i)\n          writer.uint32(/* id 9, wireType 2 =*/ 74).bytes(message.strings[i]);\n      if (message.tensors != null && message.tensors.length)\n        for (var i = 0; i < message.tensors.length; ++i)\n          $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/ 82).fork()).ldelim();\n      if (message.graphs != null && message.graphs.length)\n        for (var i = 0; i < message.graphs.length; ++i)\n          $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/ 90).fork()).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 13, wireType 2 =*/ 106).string(message.docString);\n      if (message.tp != null && Object.hasOwnProperty.call(message, 'tp'))\n        $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/ 114).fork()).ldelim();\n      if (message.typeProtos != null && message.typeProtos.length)\n        for (var i = 0; i < message.typeProtos.length; ++i)\n          $root.onnx.TypeProto.encode(\n            message.typeProtos[i],\n            writer.uint32(/* id 15, wireType 2 =*/ 122).fork(),\n          ).ldelim();\n      if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n        writer.uint32(/* id 20, wireType 0 =*/ 160).int32(message.type);\n      if (message.refAttrName != null && Object.hasOwnProperty.call(message, 'refAttrName'))\n        writer.uint32(/* id 21, wireType 2 =*/ 170).string(message.refAttrName);\n      if (message.sparseTensor != null && Object.hasOwnProperty.call(message, 'sparseTensor'))\n        $root.onnx.SparseTensorProto.encode(\n          message.sparseTensor,\n          writer.uint32(/* id 22, wireType 2 =*/ 178).fork(),\n        ).ldelim();\n      if (message.sparseTensors != null && message.sparseTensors.length)\n        for (var i = 0; i < message.sparseTensors.length; ++i)\n          $root.onnx.SparseTensorProto.encode(\n            message.sparseTensors[i],\n            writer.uint32(/* id 23, wireType 2 =*/ 186).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AttributeProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.AttributeProto} AttributeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AttributeProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.AttributeProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.name = reader.string();\n            break;\n          }\n          case 21: {\n            message.refAttrName = reader.string();\n            break;\n          }\n          case 13: {\n            message.docString = reader.string();\n            break;\n          }\n          case 20: {\n            message.type = reader.int32();\n            break;\n          }\n          case 2: {\n            message.f = reader.float();\n            break;\n          }\n          case 3: {\n            message.i = reader.int64();\n            break;\n          }\n          case 4: {\n            message.s = reader.bytes();\n            break;\n          }\n          case 5: {\n            message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 6: {\n            message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 22: {\n            message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 14: {\n            message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 7: {\n            if (!(message.floats && message.floats.length)) message.floats = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.floats.push(reader.float());\n            } else message.floats.push(reader.float());\n            break;\n          }\n          case 8: {\n            if (!(message.ints && message.ints.length)) message.ints = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.ints.push(reader.int64());\n            } else message.ints.push(reader.int64());\n            break;\n          }\n          case 9: {\n            if (!(message.strings && message.strings.length)) message.strings = [];\n            message.strings.push(reader.bytes());\n            break;\n          }\n          case 10: {\n            if (!(message.tensors && message.tensors.length)) message.tensors = [];\n            message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 11: {\n            if (!(message.graphs && message.graphs.length)) message.graphs = [];\n            message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 23: {\n            if (!(message.sparseTensors && message.sparseTensors.length)) message.sparseTensors = [];\n            message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 15: {\n            if (!(message.typeProtos && message.typeProtos.length)) message.typeProtos = [];\n            message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.AttributeProto} AttributeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AttributeProto message.\n     * @function verify\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AttributeProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.refAttrName != null && message.hasOwnProperty('refAttrName'))\n        if (!$util.isString(message.refAttrName)) return 'refAttrName: string expected';\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.type != null && message.hasOwnProperty('type'))\n        switch (message.type) {\n          default:\n            return 'type: enum value expected';\n          case 0:\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n          case 11:\n          case 13:\n          case 6:\n          case 7:\n          case 8:\n          case 9:\n          case 10:\n          case 12:\n          case 14:\n            break;\n        }\n      if (message.f != null && message.hasOwnProperty('f'))\n        if (typeof message.f !== 'number') return 'f: number expected';\n      if (message.i != null && message.hasOwnProperty('i'))\n        if (\n          !$util.isInteger(message.i) &&\n          !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high))\n        )\n          return 'i: integer|Long expected';\n      if (message.s != null && message.hasOwnProperty('s'))\n        if (!((message.s && typeof message.s.length === 'number') || $util.isString(message.s)))\n          return 's: buffer expected';\n      if (message.t != null && message.hasOwnProperty('t')) {\n        var error = $root.onnx.TensorProto.verify(message.t);\n        if (error) return 't.' + error;\n      }\n      if (message.g != null && message.hasOwnProperty('g')) {\n        var error = $root.onnx.GraphProto.verify(message.g);\n        if (error) return 'g.' + error;\n      }\n      if (message.sparseTensor != null && message.hasOwnProperty('sparseTensor')) {\n        var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n        if (error) return 'sparseTensor.' + error;\n      }\n      if (message.tp != null && message.hasOwnProperty('tp')) {\n        var error = $root.onnx.TypeProto.verify(message.tp);\n        if (error) return 'tp.' + error;\n      }\n      if (message.floats != null && message.hasOwnProperty('floats')) {\n        if (!Array.isArray(message.floats)) return 'floats: array expected';\n        for (var i = 0; i < message.floats.length; ++i)\n          if (typeof message.floats[i] !== 'number') return 'floats: number[] expected';\n      }\n      if (message.ints != null && message.hasOwnProperty('ints')) {\n        if (!Array.isArray(message.ints)) return 'ints: array expected';\n        for (var i = 0; i < message.ints.length; ++i)\n          if (\n            !$util.isInteger(message.ints[i]) &&\n            !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high))\n          )\n            return 'ints: integer|Long[] expected';\n      }\n      if (message.strings != null && message.hasOwnProperty('strings')) {\n        if (!Array.isArray(message.strings)) return 'strings: array expected';\n        for (var i = 0; i < message.strings.length; ++i)\n          if (\n            !(\n              (message.strings[i] && typeof message.strings[i].length === 'number') ||\n              $util.isString(message.strings[i])\n            )\n          )\n            return 'strings: buffer[] expected';\n      }\n      if (message.tensors != null && message.hasOwnProperty('tensors')) {\n        if (!Array.isArray(message.tensors)) return 'tensors: array expected';\n        for (var i = 0; i < message.tensors.length; ++i) {\n          var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n          if (error) return 'tensors.' + error;\n        }\n      }\n      if (message.graphs != null && message.hasOwnProperty('graphs')) {\n        if (!Array.isArray(message.graphs)) return 'graphs: array expected';\n        for (var i = 0; i < message.graphs.length; ++i) {\n          var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n          if (error) return 'graphs.' + error;\n        }\n      }\n      if (message.sparseTensors != null && message.hasOwnProperty('sparseTensors')) {\n        if (!Array.isArray(message.sparseTensors)) return 'sparseTensors: array expected';\n        for (var i = 0; i < message.sparseTensors.length; ++i) {\n          var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n          if (error) return 'sparseTensors.' + error;\n        }\n      }\n      if (message.typeProtos != null && message.hasOwnProperty('typeProtos')) {\n        if (!Array.isArray(message.typeProtos)) return 'typeProtos: array expected';\n        for (var i = 0; i < message.typeProtos.length; ++i) {\n          var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n          if (error) return 'typeProtos.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.AttributeProto} AttributeProto\n     */\n    AttributeProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.AttributeProto) return object;\n      var message = new $root.onnx.AttributeProto();\n      if (object.name != null) message.name = String(object.name);\n      if (object.refAttrName != null) message.refAttrName = String(object.refAttrName);\n      if (object.docString != null) message.docString = String(object.docString);\n      switch (object.type) {\n        default:\n          if (typeof object.type === 'number') {\n            message.type = object.type;\n            break;\n          }\n          break;\n        case 'UNDEFINED':\n        case 0:\n          message.type = 0;\n          break;\n        case 'FLOAT':\n        case 1:\n          message.type = 1;\n          break;\n        case 'INT':\n        case 2:\n          message.type = 2;\n          break;\n        case 'STRING':\n        case 3:\n          message.type = 3;\n          break;\n        case 'TENSOR':\n        case 4:\n          message.type = 4;\n          break;\n        case 'GRAPH':\n        case 5:\n          message.type = 5;\n          break;\n        case 'SPARSE_TENSOR':\n        case 11:\n          message.type = 11;\n          break;\n        case 'TYPE_PROTO':\n        case 13:\n          message.type = 13;\n          break;\n        case 'FLOATS':\n        case 6:\n          message.type = 6;\n          break;\n        case 'INTS':\n        case 7:\n          message.type = 7;\n          break;\n        case 'STRINGS':\n        case 8:\n          message.type = 8;\n          break;\n        case 'TENSORS':\n        case 9:\n          message.type = 9;\n          break;\n        case 'GRAPHS':\n        case 10:\n          message.type = 10;\n          break;\n        case 'SPARSE_TENSORS':\n        case 12:\n          message.type = 12;\n          break;\n        case 'TYPE_PROTOS':\n        case 14:\n          message.type = 14;\n          break;\n      }\n      if (object.f != null) message.f = Number(object.f);\n      if (object.i != null)\n        if ($util.Long) (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n        else if (typeof object.i === 'string') message.i = parseInt(object.i, 10);\n        else if (typeof object.i === 'number') message.i = object.i;\n        else if (typeof object.i === 'object')\n          message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n      if (object.s != null)\n        if (typeof object.s === 'string')\n          $util.base64.decode(object.s, (message.s = $util.newBuffer($util.base64.length(object.s))), 0);\n        else if (object.s.length >= 0) message.s = object.s;\n      if (object.t != null) {\n        if (typeof object.t !== 'object') throw TypeError('.onnx.AttributeProto.t: object expected');\n        message.t = $root.onnx.TensorProto.fromObject(object.t);\n      }\n      if (object.g != null) {\n        if (typeof object.g !== 'object') throw TypeError('.onnx.AttributeProto.g: object expected');\n        message.g = $root.onnx.GraphProto.fromObject(object.g);\n      }\n      if (object.sparseTensor != null) {\n        if (typeof object.sparseTensor !== 'object')\n          throw TypeError('.onnx.AttributeProto.sparseTensor: object expected');\n        message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n      }\n      if (object.tp != null) {\n        if (typeof object.tp !== 'object') throw TypeError('.onnx.AttributeProto.tp: object expected');\n        message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n      }\n      if (object.floats) {\n        if (!Array.isArray(object.floats)) throw TypeError('.onnx.AttributeProto.floats: array expected');\n        message.floats = [];\n        for (var i = 0; i < object.floats.length; ++i) message.floats[i] = Number(object.floats[i]);\n      }\n      if (object.ints) {\n        if (!Array.isArray(object.ints)) throw TypeError('.onnx.AttributeProto.ints: array expected');\n        message.ints = [];\n        for (var i = 0; i < object.ints.length; ++i)\n          if ($util.Long) (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n          else if (typeof object.ints[i] === 'string') message.ints[i] = parseInt(object.ints[i], 10);\n          else if (typeof object.ints[i] === 'number') message.ints[i] = object.ints[i];\n          else if (typeof object.ints[i] === 'object')\n            message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n      }\n      if (object.strings) {\n        if (!Array.isArray(object.strings)) throw TypeError('.onnx.AttributeProto.strings: array expected');\n        message.strings = [];\n        for (var i = 0; i < object.strings.length; ++i)\n          if (typeof object.strings[i] === 'string')\n            $util.base64.decode(\n              object.strings[i],\n              (message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i]))),\n              0,\n            );\n          else if (object.strings[i].length >= 0) message.strings[i] = object.strings[i];\n      }\n      if (object.tensors) {\n        if (!Array.isArray(object.tensors)) throw TypeError('.onnx.AttributeProto.tensors: array expected');\n        message.tensors = [];\n        for (var i = 0; i < object.tensors.length; ++i) {\n          if (typeof object.tensors[i] !== 'object') throw TypeError('.onnx.AttributeProto.tensors: object expected');\n          message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n        }\n      }\n      if (object.graphs) {\n        if (!Array.isArray(object.graphs)) throw TypeError('.onnx.AttributeProto.graphs: array expected');\n        message.graphs = [];\n        for (var i = 0; i < object.graphs.length; ++i) {\n          if (typeof object.graphs[i] !== 'object') throw TypeError('.onnx.AttributeProto.graphs: object expected');\n          message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n        }\n      }\n      if (object.sparseTensors) {\n        if (!Array.isArray(object.sparseTensors)) throw TypeError('.onnx.AttributeProto.sparseTensors: array expected');\n        message.sparseTensors = [];\n        for (var i = 0; i < object.sparseTensors.length; ++i) {\n          if (typeof object.sparseTensors[i] !== 'object')\n            throw TypeError('.onnx.AttributeProto.sparseTensors: object expected');\n          message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n        }\n      }\n      if (object.typeProtos) {\n        if (!Array.isArray(object.typeProtos)) throw TypeError('.onnx.AttributeProto.typeProtos: array expected');\n        message.typeProtos = [];\n        for (var i = 0; i < object.typeProtos.length; ++i) {\n          if (typeof object.typeProtos[i] !== 'object')\n            throw TypeError('.onnx.AttributeProto.typeProtos: object expected');\n          message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {onnx.AttributeProto} message AttributeProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AttributeProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.floats = [];\n        object.ints = [];\n        object.strings = [];\n        object.tensors = [];\n        object.graphs = [];\n        object.typeProtos = [];\n        object.sparseTensors = [];\n      }\n      if (options.defaults) {\n        object.name = '';\n        object.f = 0;\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.i = options.longs === String ? '0' : 0;\n        if (options.bytes === String) object.s = '';\n        else {\n          object.s = [];\n          if (options.bytes !== Array) object.s = $util.newBuffer(object.s);\n        }\n        object.t = null;\n        object.g = null;\n        object.docString = '';\n        object.tp = null;\n        object.type = options.enums === String ? 'UNDEFINED' : 0;\n        object.refAttrName = '';\n        object.sparseTensor = null;\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.f != null && message.hasOwnProperty('f'))\n        object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n      if (message.i != null && message.hasOwnProperty('i'))\n        if (typeof message.i === 'number') object.i = options.longs === String ? String(message.i) : message.i;\n        else\n          object.i =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.i)\n              : options.longs === Number\n                ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber()\n                : message.i;\n      if (message.s != null && message.hasOwnProperty('s'))\n        object.s =\n          options.bytes === String\n            ? $util.base64.encode(message.s, 0, message.s.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.s)\n              : message.s;\n      if (message.t != null && message.hasOwnProperty('t'))\n        object.t = $root.onnx.TensorProto.toObject(message.t, options);\n      if (message.g != null && message.hasOwnProperty('g'))\n        object.g = $root.onnx.GraphProto.toObject(message.g, options);\n      if (message.floats && message.floats.length) {\n        object.floats = [];\n        for (var j = 0; j < message.floats.length; ++j)\n          object.floats[j] =\n            options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n      }\n      if (message.ints && message.ints.length) {\n        object.ints = [];\n        for (var j = 0; j < message.ints.length; ++j)\n          if (typeof message.ints[j] === 'number')\n            object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n          else\n            object.ints[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.ints[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber()\n                  : message.ints[j];\n      }\n      if (message.strings && message.strings.length) {\n        object.strings = [];\n        for (var j = 0; j < message.strings.length; ++j)\n          object.strings[j] =\n            options.bytes === String\n              ? $util.base64.encode(message.strings[j], 0, message.strings[j].length)\n              : options.bytes === Array\n                ? Array.prototype.slice.call(message.strings[j])\n                : message.strings[j];\n      }\n      if (message.tensors && message.tensors.length) {\n        object.tensors = [];\n        for (var j = 0; j < message.tensors.length; ++j)\n          object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n      }\n      if (message.graphs && message.graphs.length) {\n        object.graphs = [];\n        for (var j = 0; j < message.graphs.length; ++j)\n          object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.tp != null && message.hasOwnProperty('tp'))\n        object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n      if (message.typeProtos && message.typeProtos.length) {\n        object.typeProtos = [];\n        for (var j = 0; j < message.typeProtos.length; ++j)\n          object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n      }\n      if (message.type != null && message.hasOwnProperty('type'))\n        object.type =\n          options.enums === String\n            ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined\n              ? message.type\n              : $root.onnx.AttributeProto.AttributeType[message.type]\n            : message.type;\n      if (message.refAttrName != null && message.hasOwnProperty('refAttrName'))\n        object.refAttrName = message.refAttrName;\n      if (message.sparseTensor != null && message.hasOwnProperty('sparseTensor'))\n        object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n      if (message.sparseTensors && message.sparseTensors.length) {\n        object.sparseTensors = [];\n        for (var j = 0; j < message.sparseTensors.length; ++j)\n          object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this AttributeProto to JSON.\n     * @function toJSON\n     * @memberof onnx.AttributeProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AttributeProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for AttributeProto\n     * @function getTypeUrl\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.AttributeProto';\n    };\n\n    /**\n     * AttributeType enum.\n     * @name onnx.AttributeProto.AttributeType\n     * @enum {number}\n     * @property {number} UNDEFINED=0 UNDEFINED value\n     * @property {number} FLOAT=1 FLOAT value\n     * @property {number} INT=2 INT value\n     * @property {number} STRING=3 STRING value\n     * @property {number} TENSOR=4 TENSOR value\n     * @property {number} GRAPH=5 GRAPH value\n     * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n     * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n     * @property {number} FLOATS=6 FLOATS value\n     * @property {number} INTS=7 INTS value\n     * @property {number} STRINGS=8 STRINGS value\n     * @property {number} TENSORS=9 TENSORS value\n     * @property {number} GRAPHS=10 GRAPHS value\n     * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n     * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n     */\n    AttributeProto.AttributeType = (function () {\n      var valuesById = {},\n        values = Object.create(valuesById);\n      values[(valuesById[0] = 'UNDEFINED')] = 0;\n      values[(valuesById[1] = 'FLOAT')] = 1;\n      values[(valuesById[2] = 'INT')] = 2;\n      values[(valuesById[3] = 'STRING')] = 3;\n      values[(valuesById[4] = 'TENSOR')] = 4;\n      values[(valuesById[5] = 'GRAPH')] = 5;\n      values[(valuesById[11] = 'SPARSE_TENSOR')] = 11;\n      values[(valuesById[13] = 'TYPE_PROTO')] = 13;\n      values[(valuesById[6] = 'FLOATS')] = 6;\n      values[(valuesById[7] = 'INTS')] = 7;\n      values[(valuesById[8] = 'STRINGS')] = 8;\n      values[(valuesById[9] = 'TENSORS')] = 9;\n      values[(valuesById[10] = 'GRAPHS')] = 10;\n      values[(valuesById[12] = 'SPARSE_TENSORS')] = 12;\n      values[(valuesById[14] = 'TYPE_PROTOS')] = 14;\n      return values;\n    })();\n\n    return AttributeProto;\n  })();\n\n  onnx.ValueInfoProto = (function () {\n    /**\n     * Properties of a ValueInfoProto.\n     * @memberof onnx\n     * @interface IValueInfoProto\n     * @property {string|null} [name] ValueInfoProto name\n     * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n     * @property {string|null} [docString] ValueInfoProto docString\n     */\n\n    /**\n     * Constructs a new ValueInfoProto.\n     * @memberof onnx\n     * @classdesc Represents a ValueInfoProto.\n     * @implements IValueInfoProto\n     * @constructor\n     * @param {onnx.IValueInfoProto=} [properties] Properties to set\n     */\n    function ValueInfoProto(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ValueInfoProto name.\n     * @member {string} name\n     * @memberof onnx.ValueInfoProto\n     * @instance\n     */\n    ValueInfoProto.prototype.name = '';\n\n    /**\n     * ValueInfoProto type.\n     * @member {onnx.ITypeProto|null|undefined} type\n     * @memberof onnx.ValueInfoProto\n     * @instance\n     */\n    ValueInfoProto.prototype.type = null;\n\n    /**\n     * ValueInfoProto docString.\n     * @member {string} docString\n     * @memberof onnx.ValueInfoProto\n     * @instance\n     */\n    ValueInfoProto.prototype.docString = '';\n\n    /**\n     * Creates a new ValueInfoProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {onnx.IValueInfoProto=} [properties] Properties to set\n     * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n     */\n    ValueInfoProto.create = function create(properties) {\n      return new ValueInfoProto(properties);\n    };\n\n    /**\n     * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ValueInfoProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n      if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n        $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.docString);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ValueInfoProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.ValueInfoProto} ValueInfoProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ValueInfoProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.ValueInfoProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.name = reader.string();\n            break;\n          }\n          case 2: {\n            message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 3: {\n            message.docString = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.ValueInfoProto} ValueInfoProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ValueInfoProto message.\n     * @function verify\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ValueInfoProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.type != null && message.hasOwnProperty('type')) {\n        var error = $root.onnx.TypeProto.verify(message.type);\n        if (error) return 'type.' + error;\n      }\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.ValueInfoProto} ValueInfoProto\n     */\n    ValueInfoProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.ValueInfoProto) return object;\n      var message = new $root.onnx.ValueInfoProto();\n      if (object.name != null) message.name = String(object.name);\n      if (object.type != null) {\n        if (typeof object.type !== 'object') throw TypeError('.onnx.ValueInfoProto.type: object expected');\n        message.type = $root.onnx.TypeProto.fromObject(object.type);\n      }\n      if (object.docString != null) message.docString = String(object.docString);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {onnx.ValueInfoProto} message ValueInfoProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ValueInfoProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.name = '';\n        object.type = null;\n        object.docString = '';\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.type != null && message.hasOwnProperty('type'))\n        object.type = $root.onnx.TypeProto.toObject(message.type, options);\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      return object;\n    };\n\n    /**\n     * Converts this ValueInfoProto to JSON.\n     * @function toJSON\n     * @memberof onnx.ValueInfoProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ValueInfoProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for ValueInfoProto\n     * @function getTypeUrl\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.ValueInfoProto';\n    };\n\n    return ValueInfoProto;\n  })();\n\n  onnx.NodeProto = (function () {\n    /**\n     * Properties of a NodeProto.\n     * @memberof onnx\n     * @interface INodeProto\n     * @property {Array.<string>|null} [input] NodeProto input\n     * @property {Array.<string>|null} [output] NodeProto output\n     * @property {string|null} [name] NodeProto name\n     * @property {string|null} [opType] NodeProto opType\n     * @property {string|null} [domain] NodeProto domain\n     * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n     * @property {string|null} [docString] NodeProto docString\n     */\n\n    /**\n     * Constructs a new NodeProto.\n     * @memberof onnx\n     * @classdesc Represents a NodeProto.\n     * @implements INodeProto\n     * @constructor\n     * @param {onnx.INodeProto=} [properties] Properties to set\n     */\n    function NodeProto(properties) {\n      this.input = [];\n      this.output = [];\n      this.attribute = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * NodeProto input.\n     * @member {Array.<string>} input\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.input = $util.emptyArray;\n\n    /**\n     * NodeProto output.\n     * @member {Array.<string>} output\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.output = $util.emptyArray;\n\n    /**\n     * NodeProto name.\n     * @member {string} name\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.name = '';\n\n    /**\n     * NodeProto opType.\n     * @member {string} opType\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.opType = '';\n\n    /**\n     * NodeProto domain.\n     * @member {string} domain\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.domain = '';\n\n    /**\n     * NodeProto attribute.\n     * @member {Array.<onnx.IAttributeProto>} attribute\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.attribute = $util.emptyArray;\n\n    /**\n     * NodeProto docString.\n     * @member {string} docString\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.docString = '';\n\n    /**\n     * Creates a new NodeProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {onnx.INodeProto=} [properties] Properties to set\n     * @returns {onnx.NodeProto} NodeProto instance\n     */\n    NodeProto.create = function create(properties) {\n      return new NodeProto(properties);\n    };\n\n    /**\n     * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NodeProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.input != null && message.input.length)\n        for (var i = 0; i < message.input.length; ++i)\n          writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.input[i]);\n      if (message.output != null && message.output.length)\n        for (var i = 0; i < message.output.length; ++i)\n          writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.output[i]);\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.name);\n      if (message.opType != null && Object.hasOwnProperty.call(message, 'opType'))\n        writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.opType);\n      if (message.attribute != null && message.attribute.length)\n        for (var i = 0; i < message.attribute.length; ++i)\n          $root.onnx.AttributeProto.encode(\n            message.attribute[i],\n            writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n          ).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.docString);\n      if (message.domain != null && Object.hasOwnProperty.call(message, 'domain'))\n        writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.domain);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a NodeProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.NodeProto} NodeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NodeProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.NodeProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            if (!(message.input && message.input.length)) message.input = [];\n            message.input.push(reader.string());\n            break;\n          }\n          case 2: {\n            if (!(message.output && message.output.length)) message.output = [];\n            message.output.push(reader.string());\n            break;\n          }\n          case 3: {\n            message.name = reader.string();\n            break;\n          }\n          case 4: {\n            message.opType = reader.string();\n            break;\n          }\n          case 7: {\n            message.domain = reader.string();\n            break;\n          }\n          case 5: {\n            if (!(message.attribute && message.attribute.length)) message.attribute = [];\n            message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 6: {\n            message.docString = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.NodeProto} NodeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NodeProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a NodeProto message.\n     * @function verify\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    NodeProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.input != null && message.hasOwnProperty('input')) {\n        if (!Array.isArray(message.input)) return 'input: array expected';\n        for (var i = 0; i < message.input.length; ++i)\n          if (!$util.isString(message.input[i])) return 'input: string[] expected';\n      }\n      if (message.output != null && message.hasOwnProperty('output')) {\n        if (!Array.isArray(message.output)) return 'output: array expected';\n        for (var i = 0; i < message.output.length; ++i)\n          if (!$util.isString(message.output[i])) return 'output: string[] expected';\n      }\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.opType != null && message.hasOwnProperty('opType'))\n        if (!$util.isString(message.opType)) return 'opType: string expected';\n      if (message.domain != null && message.hasOwnProperty('domain'))\n        if (!$util.isString(message.domain)) return 'domain: string expected';\n      if (message.attribute != null && message.hasOwnProperty('attribute')) {\n        if (!Array.isArray(message.attribute)) return 'attribute: array expected';\n        for (var i = 0; i < message.attribute.length; ++i) {\n          var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n          if (error) return 'attribute.' + error;\n        }\n      }\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.NodeProto} NodeProto\n     */\n    NodeProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.NodeProto) return object;\n      var message = new $root.onnx.NodeProto();\n      if (object.input) {\n        if (!Array.isArray(object.input)) throw TypeError('.onnx.NodeProto.input: array expected');\n        message.input = [];\n        for (var i = 0; i < object.input.length; ++i) message.input[i] = String(object.input[i]);\n      }\n      if (object.output) {\n        if (!Array.isArray(object.output)) throw TypeError('.onnx.NodeProto.output: array expected');\n        message.output = [];\n        for (var i = 0; i < object.output.length; ++i) message.output[i] = String(object.output[i]);\n      }\n      if (object.name != null) message.name = String(object.name);\n      if (object.opType != null) message.opType = String(object.opType);\n      if (object.domain != null) message.domain = String(object.domain);\n      if (object.attribute) {\n        if (!Array.isArray(object.attribute)) throw TypeError('.onnx.NodeProto.attribute: array expected');\n        message.attribute = [];\n        for (var i = 0; i < object.attribute.length; ++i) {\n          if (typeof object.attribute[i] !== 'object') throw TypeError('.onnx.NodeProto.attribute: object expected');\n          message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n        }\n      }\n      if (object.docString != null) message.docString = String(object.docString);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {onnx.NodeProto} message NodeProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    NodeProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.input = [];\n        object.output = [];\n        object.attribute = [];\n      }\n      if (options.defaults) {\n        object.name = '';\n        object.opType = '';\n        object.docString = '';\n        object.domain = '';\n      }\n      if (message.input && message.input.length) {\n        object.input = [];\n        for (var j = 0; j < message.input.length; ++j) object.input[j] = message.input[j];\n      }\n      if (message.output && message.output.length) {\n        object.output = [];\n        for (var j = 0; j < message.output.length; ++j) object.output[j] = message.output[j];\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.opType != null && message.hasOwnProperty('opType')) object.opType = message.opType;\n      if (message.attribute && message.attribute.length) {\n        object.attribute = [];\n        for (var j = 0; j < message.attribute.length; ++j)\n          object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.domain != null && message.hasOwnProperty('domain')) object.domain = message.domain;\n      return object;\n    };\n\n    /**\n     * Converts this NodeProto to JSON.\n     * @function toJSON\n     * @memberof onnx.NodeProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    NodeProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for NodeProto\n     * @function getTypeUrl\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.NodeProto';\n    };\n\n    return NodeProto;\n  })();\n\n  onnx.TrainingInfoProto = (function () {\n    /**\n     * Properties of a TrainingInfoProto.\n     * @memberof onnx\n     * @interface ITrainingInfoProto\n     * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n     * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n     */\n\n    /**\n     * Constructs a new TrainingInfoProto.\n     * @memberof onnx\n     * @classdesc Represents a TrainingInfoProto.\n     * @implements ITrainingInfoProto\n     * @constructor\n     * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n     */\n    function TrainingInfoProto(properties) {\n      this.initializationBinding = [];\n      this.updateBinding = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TrainingInfoProto initialization.\n     * @member {onnx.IGraphProto|null|undefined} initialization\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     */\n    TrainingInfoProto.prototype.initialization = null;\n\n    /**\n     * TrainingInfoProto algorithm.\n     * @member {onnx.IGraphProto|null|undefined} algorithm\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     */\n    TrainingInfoProto.prototype.algorithm = null;\n\n    /**\n     * TrainingInfoProto initializationBinding.\n     * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     */\n    TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n    /**\n     * TrainingInfoProto updateBinding.\n     * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     */\n    TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n    /**\n     * Creates a new TrainingInfoProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n     * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n     */\n    TrainingInfoProto.create = function create(properties) {\n      return new TrainingInfoProto(properties);\n    };\n\n    /**\n     * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TrainingInfoProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.initialization != null && Object.hasOwnProperty.call(message, 'initialization'))\n        $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n      if (message.algorithm != null && Object.hasOwnProperty.call(message, 'algorithm'))\n        $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n      if (message.initializationBinding != null && message.initializationBinding.length)\n        for (var i = 0; i < message.initializationBinding.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.initializationBinding[i],\n            writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n          ).ldelim();\n      if (message.updateBinding != null && message.updateBinding.length)\n        for (var i = 0; i < message.updateBinding.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.updateBinding[i],\n            writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TrainingInfoProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TrainingInfoProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TrainingInfoProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 2: {\n            message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 3: {\n            if (!(message.initializationBinding && message.initializationBinding.length))\n              message.initializationBinding = [];\n            message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 4: {\n            if (!(message.updateBinding && message.updateBinding.length)) message.updateBinding = [];\n            message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TrainingInfoProto message.\n     * @function verify\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TrainingInfoProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.initialization != null && message.hasOwnProperty('initialization')) {\n        var error = $root.onnx.GraphProto.verify(message.initialization);\n        if (error) return 'initialization.' + error;\n      }\n      if (message.algorithm != null && message.hasOwnProperty('algorithm')) {\n        var error = $root.onnx.GraphProto.verify(message.algorithm);\n        if (error) return 'algorithm.' + error;\n      }\n      if (message.initializationBinding != null && message.hasOwnProperty('initializationBinding')) {\n        if (!Array.isArray(message.initializationBinding)) return 'initializationBinding: array expected';\n        for (var i = 0; i < message.initializationBinding.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n          if (error) return 'initializationBinding.' + error;\n        }\n      }\n      if (message.updateBinding != null && message.hasOwnProperty('updateBinding')) {\n        if (!Array.isArray(message.updateBinding)) return 'updateBinding: array expected';\n        for (var i = 0; i < message.updateBinding.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n          if (error) return 'updateBinding.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n     */\n    TrainingInfoProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TrainingInfoProto) return object;\n      var message = new $root.onnx.TrainingInfoProto();\n      if (object.initialization != null) {\n        if (typeof object.initialization !== 'object')\n          throw TypeError('.onnx.TrainingInfoProto.initialization: object expected');\n        message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n      }\n      if (object.algorithm != null) {\n        if (typeof object.algorithm !== 'object') throw TypeError('.onnx.TrainingInfoProto.algorithm: object expected');\n        message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n      }\n      if (object.initializationBinding) {\n        if (!Array.isArray(object.initializationBinding))\n          throw TypeError('.onnx.TrainingInfoProto.initializationBinding: array expected');\n        message.initializationBinding = [];\n        for (var i = 0; i < object.initializationBinding.length; ++i) {\n          if (typeof object.initializationBinding[i] !== 'object')\n            throw TypeError('.onnx.TrainingInfoProto.initializationBinding: object expected');\n          message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(\n            object.initializationBinding[i],\n          );\n        }\n      }\n      if (object.updateBinding) {\n        if (!Array.isArray(object.updateBinding))\n          throw TypeError('.onnx.TrainingInfoProto.updateBinding: array expected');\n        message.updateBinding = [];\n        for (var i = 0; i < object.updateBinding.length; ++i) {\n          if (typeof object.updateBinding[i] !== 'object')\n            throw TypeError('.onnx.TrainingInfoProto.updateBinding: object expected');\n          message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TrainingInfoProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.initializationBinding = [];\n        object.updateBinding = [];\n      }\n      if (options.defaults) {\n        object.initialization = null;\n        object.algorithm = null;\n      }\n      if (message.initialization != null && message.hasOwnProperty('initialization'))\n        object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n      if (message.algorithm != null && message.hasOwnProperty('algorithm'))\n        object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n      if (message.initializationBinding && message.initializationBinding.length) {\n        object.initializationBinding = [];\n        for (var j = 0; j < message.initializationBinding.length; ++j)\n          object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(\n            message.initializationBinding[j],\n            options,\n          );\n      }\n      if (message.updateBinding && message.updateBinding.length) {\n        object.updateBinding = [];\n        for (var j = 0; j < message.updateBinding.length; ++j)\n          object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this TrainingInfoProto to JSON.\n     * @function toJSON\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TrainingInfoProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TrainingInfoProto\n     * @function getTypeUrl\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TrainingInfoProto';\n    };\n\n    return TrainingInfoProto;\n  })();\n\n  onnx.ModelProto = (function () {\n    /**\n     * Properties of a ModelProto.\n     * @memberof onnx\n     * @interface IModelProto\n     * @property {number|Long|null} [irVersion] ModelProto irVersion\n     * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n     * @property {string|null} [producerName] ModelProto producerName\n     * @property {string|null} [producerVersion] ModelProto producerVersion\n     * @property {string|null} [domain] ModelProto domain\n     * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n     * @property {string|null} [docString] ModelProto docString\n     * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n     * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n     * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n     */\n\n    /**\n     * Constructs a new ModelProto.\n     * @memberof onnx\n     * @classdesc Represents a ModelProto.\n     * @implements IModelProto\n     * @constructor\n     * @param {onnx.IModelProto=} [properties] Properties to set\n     */\n    function ModelProto(properties) {\n      this.opsetImport = [];\n      this.metadataProps = [];\n      this.trainingInfo = [];\n      this.functions = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ModelProto irVersion.\n     * @member {number|Long} irVersion\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * ModelProto opsetImport.\n     * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.opsetImport = $util.emptyArray;\n\n    /**\n     * ModelProto producerName.\n     * @member {string} producerName\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.producerName = '';\n\n    /**\n     * ModelProto producerVersion.\n     * @member {string} producerVersion\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.producerVersion = '';\n\n    /**\n     * ModelProto domain.\n     * @member {string} domain\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.domain = '';\n\n    /**\n     * ModelProto modelVersion.\n     * @member {number|Long} modelVersion\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * ModelProto docString.\n     * @member {string} docString\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.docString = '';\n\n    /**\n     * ModelProto graph.\n     * @member {onnx.IGraphProto|null|undefined} graph\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.graph = null;\n\n    /**\n     * ModelProto metadataProps.\n     * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.metadataProps = $util.emptyArray;\n\n    /**\n     * ModelProto trainingInfo.\n     * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n    /**\n     * ModelProto functions.\n     * @member {Array.<onnx.IFunctionProto>} functions\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.functions = $util.emptyArray;\n\n    /**\n     * Creates a new ModelProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {onnx.IModelProto=} [properties] Properties to set\n     * @returns {onnx.ModelProto} ModelProto instance\n     */\n    ModelProto.create = function create(properties) {\n      return new ModelProto(properties);\n    };\n\n    /**\n     * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ModelProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.irVersion != null && Object.hasOwnProperty.call(message, 'irVersion'))\n        writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.irVersion);\n      if (message.producerName != null && Object.hasOwnProperty.call(message, 'producerName'))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.producerName);\n      if (message.producerVersion != null && Object.hasOwnProperty.call(message, 'producerVersion'))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.producerVersion);\n      if (message.domain != null && Object.hasOwnProperty.call(message, 'domain'))\n        writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.domain);\n      if (message.modelVersion != null && Object.hasOwnProperty.call(message, 'modelVersion'))\n        writer.uint32(/* id 5, wireType 0 =*/ 40).int64(message.modelVersion);\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.docString);\n      if (message.graph != null && Object.hasOwnProperty.call(message, 'graph'))\n        $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n      if (message.opsetImport != null && message.opsetImport.length)\n        for (var i = 0; i < message.opsetImport.length; ++i)\n          $root.onnx.OperatorSetIdProto.encode(\n            message.opsetImport[i],\n            writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n          ).ldelim();\n      if (message.metadataProps != null && message.metadataProps.length)\n        for (var i = 0; i < message.metadataProps.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.metadataProps[i],\n            writer.uint32(/* id 14, wireType 2 =*/ 114).fork(),\n          ).ldelim();\n      if (message.trainingInfo != null && message.trainingInfo.length)\n        for (var i = 0; i < message.trainingInfo.length; ++i)\n          $root.onnx.TrainingInfoProto.encode(\n            message.trainingInfo[i],\n            writer.uint32(/* id 20, wireType 2 =*/ 162).fork(),\n          ).ldelim();\n      if (message.functions != null && message.functions.length)\n        for (var i = 0; i < message.functions.length; ++i)\n          $root.onnx.FunctionProto.encode(\n            message.functions[i],\n            writer.uint32(/* id 25, wireType 2 =*/ 202).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ModelProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.ModelProto} ModelProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ModelProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.ModelProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.irVersion = reader.int64();\n            break;\n          }\n          case 8: {\n            if (!(message.opsetImport && message.opsetImport.length)) message.opsetImport = [];\n            message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 2: {\n            message.producerName = reader.string();\n            break;\n          }\n          case 3: {\n            message.producerVersion = reader.string();\n            break;\n          }\n          case 4: {\n            message.domain = reader.string();\n            break;\n          }\n          case 5: {\n            message.modelVersion = reader.int64();\n            break;\n          }\n          case 6: {\n            message.docString = reader.string();\n            break;\n          }\n          case 7: {\n            message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 14: {\n            if (!(message.metadataProps && message.metadataProps.length)) message.metadataProps = [];\n            message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 20: {\n            if (!(message.trainingInfo && message.trainingInfo.length)) message.trainingInfo = [];\n            message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 25: {\n            if (!(message.functions && message.functions.length)) message.functions = [];\n            message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.ModelProto} ModelProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ModelProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ModelProto message.\n     * @function verify\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ModelProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.irVersion != null && message.hasOwnProperty('irVersion'))\n        if (\n          !$util.isInteger(message.irVersion) &&\n          !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high))\n        )\n          return 'irVersion: integer|Long expected';\n      if (message.opsetImport != null && message.hasOwnProperty('opsetImport')) {\n        if (!Array.isArray(message.opsetImport)) return 'opsetImport: array expected';\n        for (var i = 0; i < message.opsetImport.length; ++i) {\n          var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n          if (error) return 'opsetImport.' + error;\n        }\n      }\n      if (message.producerName != null && message.hasOwnProperty('producerName'))\n        if (!$util.isString(message.producerName)) return 'producerName: string expected';\n      if (message.producerVersion != null && message.hasOwnProperty('producerVersion'))\n        if (!$util.isString(message.producerVersion)) return 'producerVersion: string expected';\n      if (message.domain != null && message.hasOwnProperty('domain'))\n        if (!$util.isString(message.domain)) return 'domain: string expected';\n      if (message.modelVersion != null && message.hasOwnProperty('modelVersion'))\n        if (\n          !$util.isInteger(message.modelVersion) &&\n          !(\n            message.modelVersion &&\n            $util.isInteger(message.modelVersion.low) &&\n            $util.isInteger(message.modelVersion.high)\n          )\n        )\n          return 'modelVersion: integer|Long expected';\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.graph != null && message.hasOwnProperty('graph')) {\n        var error = $root.onnx.GraphProto.verify(message.graph);\n        if (error) return 'graph.' + error;\n      }\n      if (message.metadataProps != null && message.hasOwnProperty('metadataProps')) {\n        if (!Array.isArray(message.metadataProps)) return 'metadataProps: array expected';\n        for (var i = 0; i < message.metadataProps.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n          if (error) return 'metadataProps.' + error;\n        }\n      }\n      if (message.trainingInfo != null && message.hasOwnProperty('trainingInfo')) {\n        if (!Array.isArray(message.trainingInfo)) return 'trainingInfo: array expected';\n        for (var i = 0; i < message.trainingInfo.length; ++i) {\n          var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n          if (error) return 'trainingInfo.' + error;\n        }\n      }\n      if (message.functions != null && message.hasOwnProperty('functions')) {\n        if (!Array.isArray(message.functions)) return 'functions: array expected';\n        for (var i = 0; i < message.functions.length; ++i) {\n          var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n          if (error) return 'functions.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.ModelProto} ModelProto\n     */\n    ModelProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.ModelProto) return object;\n      var message = new $root.onnx.ModelProto();\n      if (object.irVersion != null)\n        if ($util.Long) (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n        else if (typeof object.irVersion === 'string') message.irVersion = parseInt(object.irVersion, 10);\n        else if (typeof object.irVersion === 'number') message.irVersion = object.irVersion;\n        else if (typeof object.irVersion === 'object')\n          message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n      if (object.opsetImport) {\n        if (!Array.isArray(object.opsetImport)) throw TypeError('.onnx.ModelProto.opsetImport: array expected');\n        message.opsetImport = [];\n        for (var i = 0; i < object.opsetImport.length; ++i) {\n          if (typeof object.opsetImport[i] !== 'object')\n            throw TypeError('.onnx.ModelProto.opsetImport: object expected');\n          message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n        }\n      }\n      if (object.producerName != null) message.producerName = String(object.producerName);\n      if (object.producerVersion != null) message.producerVersion = String(object.producerVersion);\n      if (object.domain != null) message.domain = String(object.domain);\n      if (object.modelVersion != null)\n        if ($util.Long) (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n        else if (typeof object.modelVersion === 'string') message.modelVersion = parseInt(object.modelVersion, 10);\n        else if (typeof object.modelVersion === 'number') message.modelVersion = object.modelVersion;\n        else if (typeof object.modelVersion === 'object')\n          message.modelVersion = new $util.LongBits(\n            object.modelVersion.low >>> 0,\n            object.modelVersion.high >>> 0,\n          ).toNumber();\n      if (object.docString != null) message.docString = String(object.docString);\n      if (object.graph != null) {\n        if (typeof object.graph !== 'object') throw TypeError('.onnx.ModelProto.graph: object expected');\n        message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n      }\n      if (object.metadataProps) {\n        if (!Array.isArray(object.metadataProps)) throw TypeError('.onnx.ModelProto.metadataProps: array expected');\n        message.metadataProps = [];\n        for (var i = 0; i < object.metadataProps.length; ++i) {\n          if (typeof object.metadataProps[i] !== 'object')\n            throw TypeError('.onnx.ModelProto.metadataProps: object expected');\n          message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n        }\n      }\n      if (object.trainingInfo) {\n        if (!Array.isArray(object.trainingInfo)) throw TypeError('.onnx.ModelProto.trainingInfo: array expected');\n        message.trainingInfo = [];\n        for (var i = 0; i < object.trainingInfo.length; ++i) {\n          if (typeof object.trainingInfo[i] !== 'object')\n            throw TypeError('.onnx.ModelProto.trainingInfo: object expected');\n          message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n        }\n      }\n      if (object.functions) {\n        if (!Array.isArray(object.functions)) throw TypeError('.onnx.ModelProto.functions: array expected');\n        message.functions = [];\n        for (var i = 0; i < object.functions.length; ++i) {\n          if (typeof object.functions[i] !== 'object') throw TypeError('.onnx.ModelProto.functions: object expected');\n          message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {onnx.ModelProto} message ModelProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ModelProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.opsetImport = [];\n        object.metadataProps = [];\n        object.trainingInfo = [];\n        object.functions = [];\n      }\n      if (options.defaults) {\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.irVersion =\n            options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.irVersion = options.longs === String ? '0' : 0;\n        object.producerName = '';\n        object.producerVersion = '';\n        object.domain = '';\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.modelVersion =\n            options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.modelVersion = options.longs === String ? '0' : 0;\n        object.docString = '';\n        object.graph = null;\n      }\n      if (message.irVersion != null && message.hasOwnProperty('irVersion'))\n        if (typeof message.irVersion === 'number')\n          object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n        else\n          object.irVersion =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.irVersion)\n              : options.longs === Number\n                ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber()\n                : message.irVersion;\n      if (message.producerName != null && message.hasOwnProperty('producerName'))\n        object.producerName = message.producerName;\n      if (message.producerVersion != null && message.hasOwnProperty('producerVersion'))\n        object.producerVersion = message.producerVersion;\n      if (message.domain != null && message.hasOwnProperty('domain')) object.domain = message.domain;\n      if (message.modelVersion != null && message.hasOwnProperty('modelVersion'))\n        if (typeof message.modelVersion === 'number')\n          object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n        else\n          object.modelVersion =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.modelVersion)\n              : options.longs === Number\n                ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber()\n                : message.modelVersion;\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.graph != null && message.hasOwnProperty('graph'))\n        object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n      if (message.opsetImport && message.opsetImport.length) {\n        object.opsetImport = [];\n        for (var j = 0; j < message.opsetImport.length; ++j)\n          object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n      }\n      if (message.metadataProps && message.metadataProps.length) {\n        object.metadataProps = [];\n        for (var j = 0; j < message.metadataProps.length; ++j)\n          object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n      }\n      if (message.trainingInfo && message.trainingInfo.length) {\n        object.trainingInfo = [];\n        for (var j = 0; j < message.trainingInfo.length; ++j)\n          object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n      }\n      if (message.functions && message.functions.length) {\n        object.functions = [];\n        for (var j = 0; j < message.functions.length; ++j)\n          object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this ModelProto to JSON.\n     * @function toJSON\n     * @memberof onnx.ModelProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ModelProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for ModelProto\n     * @function getTypeUrl\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.ModelProto';\n    };\n\n    return ModelProto;\n  })();\n\n  onnx.StringStringEntryProto = (function () {\n    /**\n     * Properties of a StringStringEntryProto.\n     * @memberof onnx\n     * @interface IStringStringEntryProto\n     * @property {string|null} [key] StringStringEntryProto key\n     * @property {string|null} [value] StringStringEntryProto value\n     */\n\n    /**\n     * Constructs a new StringStringEntryProto.\n     * @memberof onnx\n     * @classdesc Represents a StringStringEntryProto.\n     * @implements IStringStringEntryProto\n     * @constructor\n     * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n     */\n    function StringStringEntryProto(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StringStringEntryProto key.\n     * @member {string} key\n     * @memberof onnx.StringStringEntryProto\n     * @instance\n     */\n    StringStringEntryProto.prototype.key = '';\n\n    /**\n     * StringStringEntryProto value.\n     * @member {string} value\n     * @memberof onnx.StringStringEntryProto\n     * @instance\n     */\n    StringStringEntryProto.prototype.value = '';\n\n    /**\n     * Creates a new StringStringEntryProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n     * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n     */\n    StringStringEntryProto.create = function create(properties) {\n      return new StringStringEntryProto(properties);\n    };\n\n    /**\n     * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StringStringEntryProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && Object.hasOwnProperty.call(message, 'key'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.key);\n      if (message.value != null && Object.hasOwnProperty.call(message, 'value'))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.value);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StringStringEntryProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StringStringEntryProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.StringStringEntryProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.key = reader.string();\n            break;\n          }\n          case 2: {\n            message.value = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StringStringEntryProto message.\n     * @function verify\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StringStringEntryProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.key != null && message.hasOwnProperty('key'))\n        if (!$util.isString(message.key)) return 'key: string expected';\n      if (message.value != null && message.hasOwnProperty('value'))\n        if (!$util.isString(message.value)) return 'value: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n     */\n    StringStringEntryProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.StringStringEntryProto) return object;\n      var message = new $root.onnx.StringStringEntryProto();\n      if (object.key != null) message.key = String(object.key);\n      if (object.value != null) message.value = String(object.value);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StringStringEntryProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.key = '';\n        object.value = '';\n      }\n      if (message.key != null && message.hasOwnProperty('key')) object.key = message.key;\n      if (message.value != null && message.hasOwnProperty('value')) object.value = message.value;\n      return object;\n    };\n\n    /**\n     * Converts this StringStringEntryProto to JSON.\n     * @function toJSON\n     * @memberof onnx.StringStringEntryProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StringStringEntryProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for StringStringEntryProto\n     * @function getTypeUrl\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.StringStringEntryProto';\n    };\n\n    return StringStringEntryProto;\n  })();\n\n  onnx.TensorAnnotation = (function () {\n    /**\n     * Properties of a TensorAnnotation.\n     * @memberof onnx\n     * @interface ITensorAnnotation\n     * @property {string|null} [tensorName] TensorAnnotation tensorName\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n     */\n\n    /**\n     * Constructs a new TensorAnnotation.\n     * @memberof onnx\n     * @classdesc Represents a TensorAnnotation.\n     * @implements ITensorAnnotation\n     * @constructor\n     * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n     */\n    function TensorAnnotation(properties) {\n      this.quantParameterTensorNames = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TensorAnnotation tensorName.\n     * @member {string} tensorName\n     * @memberof onnx.TensorAnnotation\n     * @instance\n     */\n    TensorAnnotation.prototype.tensorName = '';\n\n    /**\n     * TensorAnnotation quantParameterTensorNames.\n     * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n     * @memberof onnx.TensorAnnotation\n     * @instance\n     */\n    TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n    /**\n     * Creates a new TensorAnnotation instance using the specified properties.\n     * @function create\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n     * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n     */\n    TensorAnnotation.create = function create(properties) {\n      return new TensorAnnotation(properties);\n    };\n\n    /**\n     * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorAnnotation.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.tensorName != null && Object.hasOwnProperty.call(message, 'tensorName'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.tensorName);\n      if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n        for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.quantParameterTensorNames[i],\n            writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TensorAnnotation message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TensorAnnotation} TensorAnnotation\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorAnnotation.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TensorAnnotation();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.tensorName = reader.string();\n            break;\n          }\n          case 2: {\n            if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n              message.quantParameterTensorNames = [];\n            message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TensorAnnotation} TensorAnnotation\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TensorAnnotation message.\n     * @function verify\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TensorAnnotation.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.tensorName != null && message.hasOwnProperty('tensorName'))\n        if (!$util.isString(message.tensorName)) return 'tensorName: string expected';\n      if (message.quantParameterTensorNames != null && message.hasOwnProperty('quantParameterTensorNames')) {\n        if (!Array.isArray(message.quantParameterTensorNames)) return 'quantParameterTensorNames: array expected';\n        for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n          if (error) return 'quantParameterTensorNames.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TensorAnnotation} TensorAnnotation\n     */\n    TensorAnnotation.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TensorAnnotation) return object;\n      var message = new $root.onnx.TensorAnnotation();\n      if (object.tensorName != null) message.tensorName = String(object.tensorName);\n      if (object.quantParameterTensorNames) {\n        if (!Array.isArray(object.quantParameterTensorNames))\n          throw TypeError('.onnx.TensorAnnotation.quantParameterTensorNames: array expected');\n        message.quantParameterTensorNames = [];\n        for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n          if (typeof object.quantParameterTensorNames[i] !== 'object')\n            throw TypeError('.onnx.TensorAnnotation.quantParameterTensorNames: object expected');\n          message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(\n            object.quantParameterTensorNames[i],\n          );\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {onnx.TensorAnnotation} message TensorAnnotation\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TensorAnnotation.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.quantParameterTensorNames = [];\n      if (options.defaults) object.tensorName = '';\n      if (message.tensorName != null && message.hasOwnProperty('tensorName')) object.tensorName = message.tensorName;\n      if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n        object.quantParameterTensorNames = [];\n        for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n          object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(\n            message.quantParameterTensorNames[j],\n            options,\n          );\n      }\n      return object;\n    };\n\n    /**\n     * Converts this TensorAnnotation to JSON.\n     * @function toJSON\n     * @memberof onnx.TensorAnnotation\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TensorAnnotation.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TensorAnnotation\n     * @function getTypeUrl\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TensorAnnotation';\n    };\n\n    return TensorAnnotation;\n  })();\n\n  onnx.GraphProto = (function () {\n    /**\n     * Properties of a GraphProto.\n     * @memberof onnx\n     * @interface IGraphProto\n     * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n     * @property {string|null} [name] GraphProto name\n     * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n     * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n     * @property {string|null} [docString] GraphProto docString\n     * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n     * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n     * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n     * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n     */\n\n    /**\n     * Constructs a new GraphProto.\n     * @memberof onnx\n     * @classdesc Represents a GraphProto.\n     * @implements IGraphProto\n     * @constructor\n     * @param {onnx.IGraphProto=} [properties] Properties to set\n     */\n    function GraphProto(properties) {\n      this.node = [];\n      this.initializer = [];\n      this.sparseInitializer = [];\n      this.input = [];\n      this.output = [];\n      this.valueInfo = [];\n      this.quantizationAnnotation = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * GraphProto node.\n     * @member {Array.<onnx.INodeProto>} node\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.node = $util.emptyArray;\n\n    /**\n     * GraphProto name.\n     * @member {string} name\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.name = '';\n\n    /**\n     * GraphProto initializer.\n     * @member {Array.<onnx.ITensorProto>} initializer\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.initializer = $util.emptyArray;\n\n    /**\n     * GraphProto sparseInitializer.\n     * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n    /**\n     * GraphProto docString.\n     * @member {string} docString\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.docString = '';\n\n    /**\n     * GraphProto input.\n     * @member {Array.<onnx.IValueInfoProto>} input\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.input = $util.emptyArray;\n\n    /**\n     * GraphProto output.\n     * @member {Array.<onnx.IValueInfoProto>} output\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.output = $util.emptyArray;\n\n    /**\n     * GraphProto valueInfo.\n     * @member {Array.<onnx.IValueInfoProto>} valueInfo\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.valueInfo = $util.emptyArray;\n\n    /**\n     * GraphProto quantizationAnnotation.\n     * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n    /**\n     * Creates a new GraphProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {onnx.IGraphProto=} [properties] Properties to set\n     * @returns {onnx.GraphProto} GraphProto instance\n     */\n    GraphProto.create = function create(properties) {\n      return new GraphProto(properties);\n    };\n\n    /**\n     * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GraphProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.node != null && message.node.length)\n        for (var i = 0; i < message.node.length; ++i)\n          $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name);\n      if (message.initializer != null && message.initializer.length)\n        for (var i = 0; i < message.initializer.length; ++i)\n          $root.onnx.TensorProto.encode(\n            message.initializer[i],\n            writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n          ).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 10, wireType 2 =*/ 82).string(message.docString);\n      if (message.input != null && message.input.length)\n        for (var i = 0; i < message.input.length; ++i)\n          $root.onnx.ValueInfoProto.encode(\n            message.input[i],\n            writer.uint32(/* id 11, wireType 2 =*/ 90).fork(),\n          ).ldelim();\n      if (message.output != null && message.output.length)\n        for (var i = 0; i < message.output.length; ++i)\n          $root.onnx.ValueInfoProto.encode(\n            message.output[i],\n            writer.uint32(/* id 12, wireType 2 =*/ 98).fork(),\n          ).ldelim();\n      if (message.valueInfo != null && message.valueInfo.length)\n        for (var i = 0; i < message.valueInfo.length; ++i)\n          $root.onnx.ValueInfoProto.encode(\n            message.valueInfo[i],\n            writer.uint32(/* id 13, wireType 2 =*/ 106).fork(),\n          ).ldelim();\n      if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n        for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n          $root.onnx.TensorAnnotation.encode(\n            message.quantizationAnnotation[i],\n            writer.uint32(/* id 14, wireType 2 =*/ 114).fork(),\n          ).ldelim();\n      if (message.sparseInitializer != null && message.sparseInitializer.length)\n        for (var i = 0; i < message.sparseInitializer.length; ++i)\n          $root.onnx.SparseTensorProto.encode(\n            message.sparseInitializer[i],\n            writer.uint32(/* id 15, wireType 2 =*/ 122).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a GraphProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.GraphProto} GraphProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GraphProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.GraphProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            if (!(message.node && message.node.length)) message.node = [];\n            message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 2: {\n            message.name = reader.string();\n            break;\n          }\n          case 5: {\n            if (!(message.initializer && message.initializer.length)) message.initializer = [];\n            message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 15: {\n            if (!(message.sparseInitializer && message.sparseInitializer.length)) message.sparseInitializer = [];\n            message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 10: {\n            message.docString = reader.string();\n            break;\n          }\n          case 11: {\n            if (!(message.input && message.input.length)) message.input = [];\n            message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 12: {\n            if (!(message.output && message.output.length)) message.output = [];\n            message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 13: {\n            if (!(message.valueInfo && message.valueInfo.length)) message.valueInfo = [];\n            message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 14: {\n            if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n              message.quantizationAnnotation = [];\n            message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.GraphProto} GraphProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GraphProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a GraphProto message.\n     * @function verify\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    GraphProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.node != null && message.hasOwnProperty('node')) {\n        if (!Array.isArray(message.node)) return 'node: array expected';\n        for (var i = 0; i < message.node.length; ++i) {\n          var error = $root.onnx.NodeProto.verify(message.node[i]);\n          if (error) return 'node.' + error;\n        }\n      }\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.initializer != null && message.hasOwnProperty('initializer')) {\n        if (!Array.isArray(message.initializer)) return 'initializer: array expected';\n        for (var i = 0; i < message.initializer.length; ++i) {\n          var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n          if (error) return 'initializer.' + error;\n        }\n      }\n      if (message.sparseInitializer != null && message.hasOwnProperty('sparseInitializer')) {\n        if (!Array.isArray(message.sparseInitializer)) return 'sparseInitializer: array expected';\n        for (var i = 0; i < message.sparseInitializer.length; ++i) {\n          var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n          if (error) return 'sparseInitializer.' + error;\n        }\n      }\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.input != null && message.hasOwnProperty('input')) {\n        if (!Array.isArray(message.input)) return 'input: array expected';\n        for (var i = 0; i < message.input.length; ++i) {\n          var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n          if (error) return 'input.' + error;\n        }\n      }\n      if (message.output != null && message.hasOwnProperty('output')) {\n        if (!Array.isArray(message.output)) return 'output: array expected';\n        for (var i = 0; i < message.output.length; ++i) {\n          var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n          if (error) return 'output.' + error;\n        }\n      }\n      if (message.valueInfo != null && message.hasOwnProperty('valueInfo')) {\n        if (!Array.isArray(message.valueInfo)) return 'valueInfo: array expected';\n        for (var i = 0; i < message.valueInfo.length; ++i) {\n          var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n          if (error) return 'valueInfo.' + error;\n        }\n      }\n      if (message.quantizationAnnotation != null && message.hasOwnProperty('quantizationAnnotation')) {\n        if (!Array.isArray(message.quantizationAnnotation)) return 'quantizationAnnotation: array expected';\n        for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n          var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n          if (error) return 'quantizationAnnotation.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.GraphProto} GraphProto\n     */\n    GraphProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.GraphProto) return object;\n      var message = new $root.onnx.GraphProto();\n      if (object.node) {\n        if (!Array.isArray(object.node)) throw TypeError('.onnx.GraphProto.node: array expected');\n        message.node = [];\n        for (var i = 0; i < object.node.length; ++i) {\n          if (typeof object.node[i] !== 'object') throw TypeError('.onnx.GraphProto.node: object expected');\n          message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n        }\n      }\n      if (object.name != null) message.name = String(object.name);\n      if (object.initializer) {\n        if (!Array.isArray(object.initializer)) throw TypeError('.onnx.GraphProto.initializer: array expected');\n        message.initializer = [];\n        for (var i = 0; i < object.initializer.length; ++i) {\n          if (typeof object.initializer[i] !== 'object')\n            throw TypeError('.onnx.GraphProto.initializer: object expected');\n          message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n        }\n      }\n      if (object.sparseInitializer) {\n        if (!Array.isArray(object.sparseInitializer))\n          throw TypeError('.onnx.GraphProto.sparseInitializer: array expected');\n        message.sparseInitializer = [];\n        for (var i = 0; i < object.sparseInitializer.length; ++i) {\n          if (typeof object.sparseInitializer[i] !== 'object')\n            throw TypeError('.onnx.GraphProto.sparseInitializer: object expected');\n          message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n        }\n      }\n      if (object.docString != null) message.docString = String(object.docString);\n      if (object.input) {\n        if (!Array.isArray(object.input)) throw TypeError('.onnx.GraphProto.input: array expected');\n        message.input = [];\n        for (var i = 0; i < object.input.length; ++i) {\n          if (typeof object.input[i] !== 'object') throw TypeError('.onnx.GraphProto.input: object expected');\n          message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n        }\n      }\n      if (object.output) {\n        if (!Array.isArray(object.output)) throw TypeError('.onnx.GraphProto.output: array expected');\n        message.output = [];\n        for (var i = 0; i < object.output.length; ++i) {\n          if (typeof object.output[i] !== 'object') throw TypeError('.onnx.GraphProto.output: object expected');\n          message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n        }\n      }\n      if (object.valueInfo) {\n        if (!Array.isArray(object.valueInfo)) throw TypeError('.onnx.GraphProto.valueInfo: array expected');\n        message.valueInfo = [];\n        for (var i = 0; i < object.valueInfo.length; ++i) {\n          if (typeof object.valueInfo[i] !== 'object') throw TypeError('.onnx.GraphProto.valueInfo: object expected');\n          message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n        }\n      }\n      if (object.quantizationAnnotation) {\n        if (!Array.isArray(object.quantizationAnnotation))\n          throw TypeError('.onnx.GraphProto.quantizationAnnotation: array expected');\n        message.quantizationAnnotation = [];\n        for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n          if (typeof object.quantizationAnnotation[i] !== 'object')\n            throw TypeError('.onnx.GraphProto.quantizationAnnotation: object expected');\n          message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {onnx.GraphProto} message GraphProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    GraphProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.node = [];\n        object.initializer = [];\n        object.input = [];\n        object.output = [];\n        object.valueInfo = [];\n        object.quantizationAnnotation = [];\n        object.sparseInitializer = [];\n      }\n      if (options.defaults) {\n        object.name = '';\n        object.docString = '';\n      }\n      if (message.node && message.node.length) {\n        object.node = [];\n        for (var j = 0; j < message.node.length; ++j)\n          object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.initializer && message.initializer.length) {\n        object.initializer = [];\n        for (var j = 0; j < message.initializer.length; ++j)\n          object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.input && message.input.length) {\n        object.input = [];\n        for (var j = 0; j < message.input.length; ++j)\n          object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n      }\n      if (message.output && message.output.length) {\n        object.output = [];\n        for (var j = 0; j < message.output.length; ++j)\n          object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n      }\n      if (message.valueInfo && message.valueInfo.length) {\n        object.valueInfo = [];\n        for (var j = 0; j < message.valueInfo.length; ++j)\n          object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n      }\n      if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n        object.quantizationAnnotation = [];\n        for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n          object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(\n            message.quantizationAnnotation[j],\n            options,\n          );\n      }\n      if (message.sparseInitializer && message.sparseInitializer.length) {\n        object.sparseInitializer = [];\n        for (var j = 0; j < message.sparseInitializer.length; ++j)\n          object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this GraphProto to JSON.\n     * @function toJSON\n     * @memberof onnx.GraphProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    GraphProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for GraphProto\n     * @function getTypeUrl\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.GraphProto';\n    };\n\n    return GraphProto;\n  })();\n\n  onnx.TensorProto = (function () {\n    /**\n     * Properties of a TensorProto.\n     * @memberof onnx\n     * @interface ITensorProto\n     * @property {Array.<number|Long>|null} [dims] TensorProto dims\n     * @property {number|null} [dataType] TensorProto dataType\n     * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n     * @property {Array.<number>|null} [floatData] TensorProto floatData\n     * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n     * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n     * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n     * @property {string|null} [name] TensorProto name\n     * @property {string|null} [docString] TensorProto docString\n     * @property {Uint8Array|null} [rawData] TensorProto rawData\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n     * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n     * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n     * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n     */\n\n    /**\n     * Constructs a new TensorProto.\n     * @memberof onnx\n     * @classdesc Represents a TensorProto.\n     * @implements ITensorProto\n     * @constructor\n     * @param {onnx.ITensorProto=} [properties] Properties to set\n     */\n    function TensorProto(properties) {\n      this.dims = [];\n      this.floatData = [];\n      this.int32Data = [];\n      this.stringData = [];\n      this.int64Data = [];\n      this.externalData = [];\n      this.doubleData = [];\n      this.uint64Data = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TensorProto dims.\n     * @member {Array.<number|Long>} dims\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.dims = $util.emptyArray;\n\n    /**\n     * TensorProto dataType.\n     * @member {number} dataType\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.dataType = 0;\n\n    /**\n     * TensorProto segment.\n     * @member {onnx.TensorProto.ISegment|null|undefined} segment\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.segment = null;\n\n    /**\n     * TensorProto floatData.\n     * @member {Array.<number>} floatData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.floatData = $util.emptyArray;\n\n    /**\n     * TensorProto int32Data.\n     * @member {Array.<number>} int32Data\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.int32Data = $util.emptyArray;\n\n    /**\n     * TensorProto stringData.\n     * @member {Array.<Uint8Array>} stringData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.stringData = $util.emptyArray;\n\n    /**\n     * TensorProto int64Data.\n     * @member {Array.<number|Long>} int64Data\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.int64Data = $util.emptyArray;\n\n    /**\n     * TensorProto name.\n     * @member {string} name\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.name = '';\n\n    /**\n     * TensorProto docString.\n     * @member {string} docString\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.docString = '';\n\n    /**\n     * TensorProto rawData.\n     * @member {Uint8Array} rawData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.rawData = $util.newBuffer([]);\n\n    /**\n     * TensorProto externalData.\n     * @member {Array.<onnx.IStringStringEntryProto>} externalData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.externalData = $util.emptyArray;\n\n    /**\n     * TensorProto dataLocation.\n     * @member {onnx.TensorProto.DataLocation} dataLocation\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.dataLocation = 0;\n\n    /**\n     * TensorProto doubleData.\n     * @member {Array.<number>} doubleData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.doubleData = $util.emptyArray;\n\n    /**\n     * TensorProto uint64Data.\n     * @member {Array.<number|Long>} uint64Data\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.uint64Data = $util.emptyArray;\n\n    /**\n     * Creates a new TensorProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {onnx.ITensorProto=} [properties] Properties to set\n     * @returns {onnx.TensorProto} TensorProto instance\n     */\n    TensorProto.create = function create(properties) {\n      return new TensorProto(properties);\n    };\n\n    /**\n     * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.dims != null && message.dims.length) {\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork();\n        for (var i = 0; i < message.dims.length; ++i) writer.int64(message.dims[i]);\n        writer.ldelim();\n      }\n      if (message.dataType != null && Object.hasOwnProperty.call(message, 'dataType'))\n        writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.dataType);\n      if (message.segment != null && Object.hasOwnProperty.call(message, 'segment'))\n        $root.onnx.TensorProto.Segment.encode(\n          message.segment,\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim();\n      if (message.floatData != null && message.floatData.length) {\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork();\n        for (var i = 0; i < message.floatData.length; ++i) writer.float(message.floatData[i]);\n        writer.ldelim();\n      }\n      if (message.int32Data != null && message.int32Data.length) {\n        writer.uint32(/* id 5, wireType 2 =*/ 42).fork();\n        for (var i = 0; i < message.int32Data.length; ++i) writer.int32(message.int32Data[i]);\n        writer.ldelim();\n      }\n      if (message.stringData != null && message.stringData.length)\n        for (var i = 0; i < message.stringData.length; ++i)\n          writer.uint32(/* id 6, wireType 2 =*/ 50).bytes(message.stringData[i]);\n      if (message.int64Data != null && message.int64Data.length) {\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork();\n        for (var i = 0; i < message.int64Data.length; ++i) writer.int64(message.int64Data[i]);\n        writer.ldelim();\n      }\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 8, wireType 2 =*/ 66).string(message.name);\n      if (message.rawData != null && Object.hasOwnProperty.call(message, 'rawData'))\n        writer.uint32(/* id 9, wireType 2 =*/ 74).bytes(message.rawData);\n      if (message.doubleData != null && message.doubleData.length) {\n        writer.uint32(/* id 10, wireType 2 =*/ 82).fork();\n        for (var i = 0; i < message.doubleData.length; ++i) writer.double(message.doubleData[i]);\n        writer.ldelim();\n      }\n      if (message.uint64Data != null && message.uint64Data.length) {\n        writer.uint32(/* id 11, wireType 2 =*/ 90).fork();\n        for (var i = 0; i < message.uint64Data.length; ++i) writer.uint64(message.uint64Data[i]);\n        writer.ldelim();\n      }\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 12, wireType 2 =*/ 98).string(message.docString);\n      if (message.externalData != null && message.externalData.length)\n        for (var i = 0; i < message.externalData.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.externalData[i],\n            writer.uint32(/* id 13, wireType 2 =*/ 106).fork(),\n          ).ldelim();\n      if (message.dataLocation != null && Object.hasOwnProperty.call(message, 'dataLocation'))\n        writer.uint32(/* id 14, wireType 0 =*/ 112).int32(message.dataLocation);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TensorProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TensorProto} TensorProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TensorProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            if (!(message.dims && message.dims.length)) message.dims = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.dims.push(reader.int64());\n            } else message.dims.push(reader.int64());\n            break;\n          }\n          case 2: {\n            message.dataType = reader.int32();\n            break;\n          }\n          case 3: {\n            message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n            break;\n          }\n          case 4: {\n            if (!(message.floatData && message.floatData.length)) message.floatData = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.floatData.push(reader.float());\n            } else message.floatData.push(reader.float());\n            break;\n          }\n          case 5: {\n            if (!(message.int32Data && message.int32Data.length)) message.int32Data = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.int32Data.push(reader.int32());\n            } else message.int32Data.push(reader.int32());\n            break;\n          }\n          case 6: {\n            if (!(message.stringData && message.stringData.length)) message.stringData = [];\n            message.stringData.push(reader.bytes());\n            break;\n          }\n          case 7: {\n            if (!(message.int64Data && message.int64Data.length)) message.int64Data = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.int64Data.push(reader.int64());\n            } else message.int64Data.push(reader.int64());\n            break;\n          }\n          case 8: {\n            message.name = reader.string();\n            break;\n          }\n          case 12: {\n            message.docString = reader.string();\n            break;\n          }\n          case 9: {\n            message.rawData = reader.bytes();\n            break;\n          }\n          case 13: {\n            if (!(message.externalData && message.externalData.length)) message.externalData = [];\n            message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 14: {\n            message.dataLocation = reader.int32();\n            break;\n          }\n          case 10: {\n            if (!(message.doubleData && message.doubleData.length)) message.doubleData = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.doubleData.push(reader.double());\n            } else message.doubleData.push(reader.double());\n            break;\n          }\n          case 11: {\n            if (!(message.uint64Data && message.uint64Data.length)) message.uint64Data = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.uint64Data.push(reader.uint64());\n            } else message.uint64Data.push(reader.uint64());\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TensorProto} TensorProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TensorProto message.\n     * @function verify\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TensorProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.dims != null && message.hasOwnProperty('dims')) {\n        if (!Array.isArray(message.dims)) return 'dims: array expected';\n        for (var i = 0; i < message.dims.length; ++i)\n          if (\n            !$util.isInteger(message.dims[i]) &&\n            !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high))\n          )\n            return 'dims: integer|Long[] expected';\n      }\n      if (message.dataType != null && message.hasOwnProperty('dataType'))\n        if (!$util.isInteger(message.dataType)) return 'dataType: integer expected';\n      if (message.segment != null && message.hasOwnProperty('segment')) {\n        var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n        if (error) return 'segment.' + error;\n      }\n      if (message.floatData != null && message.hasOwnProperty('floatData')) {\n        if (!Array.isArray(message.floatData)) return 'floatData: array expected';\n        for (var i = 0; i < message.floatData.length; ++i)\n          if (typeof message.floatData[i] !== 'number') return 'floatData: number[] expected';\n      }\n      if (message.int32Data != null && message.hasOwnProperty('int32Data')) {\n        if (!Array.isArray(message.int32Data)) return 'int32Data: array expected';\n        for (var i = 0; i < message.int32Data.length; ++i)\n          if (!$util.isInteger(message.int32Data[i])) return 'int32Data: integer[] expected';\n      }\n      if (message.stringData != null && message.hasOwnProperty('stringData')) {\n        if (!Array.isArray(message.stringData)) return 'stringData: array expected';\n        for (var i = 0; i < message.stringData.length; ++i)\n          if (\n            !(\n              (message.stringData[i] && typeof message.stringData[i].length === 'number') ||\n              $util.isString(message.stringData[i])\n            )\n          )\n            return 'stringData: buffer[] expected';\n      }\n      if (message.int64Data != null && message.hasOwnProperty('int64Data')) {\n        if (!Array.isArray(message.int64Data)) return 'int64Data: array expected';\n        for (var i = 0; i < message.int64Data.length; ++i)\n          if (\n            !$util.isInteger(message.int64Data[i]) &&\n            !(\n              message.int64Data[i] &&\n              $util.isInteger(message.int64Data[i].low) &&\n              $util.isInteger(message.int64Data[i].high)\n            )\n          )\n            return 'int64Data: integer|Long[] expected';\n      }\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.rawData != null && message.hasOwnProperty('rawData'))\n        if (!((message.rawData && typeof message.rawData.length === 'number') || $util.isString(message.rawData)))\n          return 'rawData: buffer expected';\n      if (message.externalData != null && message.hasOwnProperty('externalData')) {\n        if (!Array.isArray(message.externalData)) return 'externalData: array expected';\n        for (var i = 0; i < message.externalData.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n          if (error) return 'externalData.' + error;\n        }\n      }\n      if (message.dataLocation != null && message.hasOwnProperty('dataLocation'))\n        switch (message.dataLocation) {\n          default:\n            return 'dataLocation: enum value expected';\n          case 0:\n          case 1:\n            break;\n        }\n      if (message.doubleData != null && message.hasOwnProperty('doubleData')) {\n        if (!Array.isArray(message.doubleData)) return 'doubleData: array expected';\n        for (var i = 0; i < message.doubleData.length; ++i)\n          if (typeof message.doubleData[i] !== 'number') return 'doubleData: number[] expected';\n      }\n      if (message.uint64Data != null && message.hasOwnProperty('uint64Data')) {\n        if (!Array.isArray(message.uint64Data)) return 'uint64Data: array expected';\n        for (var i = 0; i < message.uint64Data.length; ++i)\n          if (\n            !$util.isInteger(message.uint64Data[i]) &&\n            !(\n              message.uint64Data[i] &&\n              $util.isInteger(message.uint64Data[i].low) &&\n              $util.isInteger(message.uint64Data[i].high)\n            )\n          )\n            return 'uint64Data: integer|Long[] expected';\n      }\n      return null;\n    };\n\n    /**\n     * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TensorProto} TensorProto\n     */\n    TensorProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TensorProto) return object;\n      var message = new $root.onnx.TensorProto();\n      if (object.dims) {\n        if (!Array.isArray(object.dims)) throw TypeError('.onnx.TensorProto.dims: array expected');\n        message.dims = [];\n        for (var i = 0; i < object.dims.length; ++i)\n          if ($util.Long) (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n          else if (typeof object.dims[i] === 'string') message.dims[i] = parseInt(object.dims[i], 10);\n          else if (typeof object.dims[i] === 'number') message.dims[i] = object.dims[i];\n          else if (typeof object.dims[i] === 'object')\n            message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n      }\n      if (object.dataType != null) message.dataType = object.dataType | 0;\n      if (object.segment != null) {\n        if (typeof object.segment !== 'object') throw TypeError('.onnx.TensorProto.segment: object expected');\n        message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n      }\n      if (object.floatData) {\n        if (!Array.isArray(object.floatData)) throw TypeError('.onnx.TensorProto.floatData: array expected');\n        message.floatData = [];\n        for (var i = 0; i < object.floatData.length; ++i) message.floatData[i] = Number(object.floatData[i]);\n      }\n      if (object.int32Data) {\n        if (!Array.isArray(object.int32Data)) throw TypeError('.onnx.TensorProto.int32Data: array expected');\n        message.int32Data = [];\n        for (var i = 0; i < object.int32Data.length; ++i) message.int32Data[i] = object.int32Data[i] | 0;\n      }\n      if (object.stringData) {\n        if (!Array.isArray(object.stringData)) throw TypeError('.onnx.TensorProto.stringData: array expected');\n        message.stringData = [];\n        for (var i = 0; i < object.stringData.length; ++i)\n          if (typeof object.stringData[i] === 'string')\n            $util.base64.decode(\n              object.stringData[i],\n              (message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i]))),\n              0,\n            );\n          else if (object.stringData[i].length >= 0) message.stringData[i] = object.stringData[i];\n      }\n      if (object.int64Data) {\n        if (!Array.isArray(object.int64Data)) throw TypeError('.onnx.TensorProto.int64Data: array expected');\n        message.int64Data = [];\n        for (var i = 0; i < object.int64Data.length; ++i)\n          if ($util.Long) (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n          else if (typeof object.int64Data[i] === 'string') message.int64Data[i] = parseInt(object.int64Data[i], 10);\n          else if (typeof object.int64Data[i] === 'number') message.int64Data[i] = object.int64Data[i];\n          else if (typeof object.int64Data[i] === 'object')\n            message.int64Data[i] = new $util.LongBits(\n              object.int64Data[i].low >>> 0,\n              object.int64Data[i].high >>> 0,\n            ).toNumber();\n      }\n      if (object.name != null) message.name = String(object.name);\n      if (object.docString != null) message.docString = String(object.docString);\n      if (object.rawData != null)\n        if (typeof object.rawData === 'string')\n          $util.base64.decode(\n            object.rawData,\n            (message.rawData = $util.newBuffer($util.base64.length(object.rawData))),\n            0,\n          );\n        else if (object.rawData.length >= 0) message.rawData = object.rawData;\n      if (object.externalData) {\n        if (!Array.isArray(object.externalData)) throw TypeError('.onnx.TensorProto.externalData: array expected');\n        message.externalData = [];\n        for (var i = 0; i < object.externalData.length; ++i) {\n          if (typeof object.externalData[i] !== 'object')\n            throw TypeError('.onnx.TensorProto.externalData: object expected');\n          message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n        }\n      }\n      switch (object.dataLocation) {\n        default:\n          if (typeof object.dataLocation === 'number') {\n            message.dataLocation = object.dataLocation;\n            break;\n          }\n          break;\n        case 'DEFAULT':\n        case 0:\n          message.dataLocation = 0;\n          break;\n        case 'EXTERNAL':\n        case 1:\n          message.dataLocation = 1;\n          break;\n      }\n      if (object.doubleData) {\n        if (!Array.isArray(object.doubleData)) throw TypeError('.onnx.TensorProto.doubleData: array expected');\n        message.doubleData = [];\n        for (var i = 0; i < object.doubleData.length; ++i) message.doubleData[i] = Number(object.doubleData[i]);\n      }\n      if (object.uint64Data) {\n        if (!Array.isArray(object.uint64Data)) throw TypeError('.onnx.TensorProto.uint64Data: array expected');\n        message.uint64Data = [];\n        for (var i = 0; i < object.uint64Data.length; ++i)\n          if ($util.Long) (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n          else if (typeof object.uint64Data[i] === 'string') message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n          else if (typeof object.uint64Data[i] === 'number') message.uint64Data[i] = object.uint64Data[i];\n          else if (typeof object.uint64Data[i] === 'object')\n            message.uint64Data[i] = new $util.LongBits(\n              object.uint64Data[i].low >>> 0,\n              object.uint64Data[i].high >>> 0,\n            ).toNumber(true);\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {onnx.TensorProto} message TensorProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TensorProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.dims = [];\n        object.floatData = [];\n        object.int32Data = [];\n        object.stringData = [];\n        object.int64Data = [];\n        object.doubleData = [];\n        object.uint64Data = [];\n        object.externalData = [];\n      }\n      if (options.defaults) {\n        object.dataType = 0;\n        object.segment = null;\n        object.name = '';\n        if (options.bytes === String) object.rawData = '';\n        else {\n          object.rawData = [];\n          if (options.bytes !== Array) object.rawData = $util.newBuffer(object.rawData);\n        }\n        object.docString = '';\n        object.dataLocation = options.enums === String ? 'DEFAULT' : 0;\n      }\n      if (message.dims && message.dims.length) {\n        object.dims = [];\n        for (var j = 0; j < message.dims.length; ++j)\n          if (typeof message.dims[j] === 'number')\n            object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n          else\n            object.dims[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.dims[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber()\n                  : message.dims[j];\n      }\n      if (message.dataType != null && message.hasOwnProperty('dataType')) object.dataType = message.dataType;\n      if (message.segment != null && message.hasOwnProperty('segment'))\n        object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n      if (message.floatData && message.floatData.length) {\n        object.floatData = [];\n        for (var j = 0; j < message.floatData.length; ++j)\n          object.floatData[j] =\n            options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n      }\n      if (message.int32Data && message.int32Data.length) {\n        object.int32Data = [];\n        for (var j = 0; j < message.int32Data.length; ++j) object.int32Data[j] = message.int32Data[j];\n      }\n      if (message.stringData && message.stringData.length) {\n        object.stringData = [];\n        for (var j = 0; j < message.stringData.length; ++j)\n          object.stringData[j] =\n            options.bytes === String\n              ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length)\n              : options.bytes === Array\n                ? Array.prototype.slice.call(message.stringData[j])\n                : message.stringData[j];\n      }\n      if (message.int64Data && message.int64Data.length) {\n        object.int64Data = [];\n        for (var j = 0; j < message.int64Data.length; ++j)\n          if (typeof message.int64Data[j] === 'number')\n            object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n          else\n            object.int64Data[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.int64Data[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber()\n                  : message.int64Data[j];\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.rawData != null && message.hasOwnProperty('rawData'))\n        object.rawData =\n          options.bytes === String\n            ? $util.base64.encode(message.rawData, 0, message.rawData.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.rawData)\n              : message.rawData;\n      if (message.doubleData && message.doubleData.length) {\n        object.doubleData = [];\n        for (var j = 0; j < message.doubleData.length; ++j)\n          object.doubleData[j] =\n            options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n      }\n      if (message.uint64Data && message.uint64Data.length) {\n        object.uint64Data = [];\n        for (var j = 0; j < message.uint64Data.length; ++j)\n          if (typeof message.uint64Data[j] === 'number')\n            object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n          else\n            object.uint64Data[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.uint64Data[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true)\n                  : message.uint64Data[j];\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.externalData && message.externalData.length) {\n        object.externalData = [];\n        for (var j = 0; j < message.externalData.length; ++j)\n          object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n      }\n      if (message.dataLocation != null && message.hasOwnProperty('dataLocation'))\n        object.dataLocation =\n          options.enums === String\n            ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined\n              ? message.dataLocation\n              : $root.onnx.TensorProto.DataLocation[message.dataLocation]\n            : message.dataLocation;\n      return object;\n    };\n\n    /**\n     * Converts this TensorProto to JSON.\n     * @function toJSON\n     * @memberof onnx.TensorProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TensorProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TensorProto\n     * @function getTypeUrl\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TensorProto';\n    };\n\n    /**\n     * DataType enum.\n     * @name onnx.TensorProto.DataType\n     * @enum {number}\n     * @property {number} UNDEFINED=0 UNDEFINED value\n     * @property {number} FLOAT=1 FLOAT value\n     * @property {number} UINT8=2 UINT8 value\n     * @property {number} INT8=3 INT8 value\n     * @property {number} UINT16=4 UINT16 value\n     * @property {number} INT16=5 INT16 value\n     * @property {number} INT32=6 INT32 value\n     * @property {number} INT64=7 INT64 value\n     * @property {number} STRING=8 STRING value\n     * @property {number} BOOL=9 BOOL value\n     * @property {number} FLOAT16=10 FLOAT16 value\n     * @property {number} DOUBLE=11 DOUBLE value\n     * @property {number} UINT32=12 UINT32 value\n     * @property {number} UINT64=13 UINT64 value\n     * @property {number} COMPLEX64=14 COMPLEX64 value\n     * @property {number} COMPLEX128=15 COMPLEX128 value\n     * @property {number} BFLOAT16=16 BFLOAT16 value\n     * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n     * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n     * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n     * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n     */\n    TensorProto.DataType = (function () {\n      var valuesById = {},\n        values = Object.create(valuesById);\n      values[(valuesById[0] = 'UNDEFINED')] = 0;\n      values[(valuesById[1] = 'FLOAT')] = 1;\n      values[(valuesById[2] = 'UINT8')] = 2;\n      values[(valuesById[3] = 'INT8')] = 3;\n      values[(valuesById[4] = 'UINT16')] = 4;\n      values[(valuesById[5] = 'INT16')] = 5;\n      values[(valuesById[6] = 'INT32')] = 6;\n      values[(valuesById[7] = 'INT64')] = 7;\n      values[(valuesById[8] = 'STRING')] = 8;\n      values[(valuesById[9] = 'BOOL')] = 9;\n      values[(valuesById[10] = 'FLOAT16')] = 10;\n      values[(valuesById[11] = 'DOUBLE')] = 11;\n      values[(valuesById[12] = 'UINT32')] = 12;\n      values[(valuesById[13] = 'UINT64')] = 13;\n      values[(valuesById[14] = 'COMPLEX64')] = 14;\n      values[(valuesById[15] = 'COMPLEX128')] = 15;\n      values[(valuesById[16] = 'BFLOAT16')] = 16;\n      values[(valuesById[17] = 'FLOAT8E4M3FN')] = 17;\n      values[(valuesById[18] = 'FLOAT8E4M3FNUZ')] = 18;\n      values[(valuesById[19] = 'FLOAT8E5M2')] = 19;\n      values[(valuesById[20] = 'FLOAT8E5M2FNUZ')] = 20;\n      return values;\n    })();\n\n    TensorProto.Segment = (function () {\n      /**\n       * Properties of a Segment.\n       * @memberof onnx.TensorProto\n       * @interface ISegment\n       * @property {number|Long|null} [begin] Segment begin\n       * @property {number|Long|null} [end] Segment end\n       */\n\n      /**\n       * Constructs a new Segment.\n       * @memberof onnx.TensorProto\n       * @classdesc Represents a Segment.\n       * @implements ISegment\n       * @constructor\n       * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n       */\n      function Segment(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Segment begin.\n       * @member {number|Long} begin\n       * @memberof onnx.TensorProto.Segment\n       * @instance\n       */\n      Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Segment end.\n       * @member {number|Long} end\n       * @memberof onnx.TensorProto.Segment\n       * @instance\n       */\n      Segment.prototype.end = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Creates a new Segment instance using the specified properties.\n       * @function create\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n       * @returns {onnx.TensorProto.Segment} Segment instance\n       */\n      Segment.create = function create(properties) {\n        return new Segment(properties);\n      };\n\n      /**\n       * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Segment.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.begin != null && Object.hasOwnProperty.call(message, 'begin'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.begin);\n        if (message.end != null && Object.hasOwnProperty.call(message, 'end'))\n          writer.uint32(/* id 2, wireType 0 =*/ 16).int64(message.end);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Segment.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Segment message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TensorProto.Segment} Segment\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Segment.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TensorProto.Segment();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.begin = reader.int64();\n              break;\n            }\n            case 2: {\n              message.end = reader.int64();\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Segment message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TensorProto.Segment} Segment\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Segment.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Segment message.\n       * @function verify\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Segment.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.begin != null && message.hasOwnProperty('begin'))\n          if (\n            !$util.isInteger(message.begin) &&\n            !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high))\n          )\n            return 'begin: integer|Long expected';\n        if (message.end != null && message.hasOwnProperty('end'))\n          if (\n            !$util.isInteger(message.end) &&\n            !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high))\n          )\n            return 'end: integer|Long expected';\n        return null;\n      };\n\n      /**\n       * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TensorProto.Segment} Segment\n       */\n      Segment.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TensorProto.Segment) return object;\n        var message = new $root.onnx.TensorProto.Segment();\n        if (object.begin != null)\n          if ($util.Long) (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n          else if (typeof object.begin === 'string') message.begin = parseInt(object.begin, 10);\n          else if (typeof object.begin === 'number') message.begin = object.begin;\n          else if (typeof object.begin === 'object')\n            message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n        if (object.end != null)\n          if ($util.Long) (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n          else if (typeof object.end === 'string') message.end = parseInt(object.end, 10);\n          else if (typeof object.end === 'number') message.end = object.end;\n          else if (typeof object.end === 'object')\n            message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Segment message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {onnx.TensorProto.Segment} message Segment\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Segment.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.begin =\n              options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.begin = options.longs === String ? '0' : 0;\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.end = options.longs === String ? '0' : 0;\n        }\n        if (message.begin != null && message.hasOwnProperty('begin'))\n          if (typeof message.begin === 'number')\n            object.begin = options.longs === String ? String(message.begin) : message.begin;\n          else\n            object.begin =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.begin)\n                : options.longs === Number\n                  ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber()\n                  : message.begin;\n        if (message.end != null && message.hasOwnProperty('end'))\n          if (typeof message.end === 'number')\n            object.end = options.longs === String ? String(message.end) : message.end;\n          else\n            object.end =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.end)\n                : options.longs === Number\n                  ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber()\n                  : message.end;\n        return object;\n      };\n\n      /**\n       * Converts this Segment to JSON.\n       * @function toJSON\n       * @memberof onnx.TensorProto.Segment\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Segment.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Segment\n       * @function getTypeUrl\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TensorProto.Segment';\n      };\n\n      return Segment;\n    })();\n\n    /**\n     * DataLocation enum.\n     * @name onnx.TensorProto.DataLocation\n     * @enum {number}\n     * @property {number} DEFAULT=0 DEFAULT value\n     * @property {number} EXTERNAL=1 EXTERNAL value\n     */\n    TensorProto.DataLocation = (function () {\n      var valuesById = {},\n        values = Object.create(valuesById);\n      values[(valuesById[0] = 'DEFAULT')] = 0;\n      values[(valuesById[1] = 'EXTERNAL')] = 1;\n      return values;\n    })();\n\n    return TensorProto;\n  })();\n\n  onnx.SparseTensorProto = (function () {\n    /**\n     * Properties of a SparseTensorProto.\n     * @memberof onnx\n     * @interface ISparseTensorProto\n     * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n     * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n     * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n     */\n\n    /**\n     * Constructs a new SparseTensorProto.\n     * @memberof onnx\n     * @classdesc Represents a SparseTensorProto.\n     * @implements ISparseTensorProto\n     * @constructor\n     * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n     */\n    function SparseTensorProto(properties) {\n      this.dims = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * SparseTensorProto values.\n     * @member {onnx.ITensorProto|null|undefined} values\n     * @memberof onnx.SparseTensorProto\n     * @instance\n     */\n    SparseTensorProto.prototype.values = null;\n\n    /**\n     * SparseTensorProto indices.\n     * @member {onnx.ITensorProto|null|undefined} indices\n     * @memberof onnx.SparseTensorProto\n     * @instance\n     */\n    SparseTensorProto.prototype.indices = null;\n\n    /**\n     * SparseTensorProto dims.\n     * @member {Array.<number|Long>} dims\n     * @memberof onnx.SparseTensorProto\n     * @instance\n     */\n    SparseTensorProto.prototype.dims = $util.emptyArray;\n\n    /**\n     * Creates a new SparseTensorProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n     * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n     */\n    SparseTensorProto.create = function create(properties) {\n      return new SparseTensorProto(properties);\n    };\n\n    /**\n     * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SparseTensorProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.values != null && Object.hasOwnProperty.call(message, 'values'))\n        $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n      if (message.indices != null && Object.hasOwnProperty.call(message, 'indices'))\n        $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n      if (message.dims != null && message.dims.length) {\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork();\n        for (var i = 0; i < message.dims.length; ++i) writer.int64(message.dims[i]);\n        writer.ldelim();\n      }\n      return writer;\n    };\n\n    /**\n     * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a SparseTensorProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.SparseTensorProto} SparseTensorProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SparseTensorProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.SparseTensorProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 2: {\n            message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 3: {\n            if (!(message.dims && message.dims.length)) message.dims = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.dims.push(reader.int64());\n            } else message.dims.push(reader.int64());\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.SparseTensorProto} SparseTensorProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a SparseTensorProto message.\n     * @function verify\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    SparseTensorProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.values != null && message.hasOwnProperty('values')) {\n        var error = $root.onnx.TensorProto.verify(message.values);\n        if (error) return 'values.' + error;\n      }\n      if (message.indices != null && message.hasOwnProperty('indices')) {\n        var error = $root.onnx.TensorProto.verify(message.indices);\n        if (error) return 'indices.' + error;\n      }\n      if (message.dims != null && message.hasOwnProperty('dims')) {\n        if (!Array.isArray(message.dims)) return 'dims: array expected';\n        for (var i = 0; i < message.dims.length; ++i)\n          if (\n            !$util.isInteger(message.dims[i]) &&\n            !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high))\n          )\n            return 'dims: integer|Long[] expected';\n      }\n      return null;\n    };\n\n    /**\n     * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.SparseTensorProto} SparseTensorProto\n     */\n    SparseTensorProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.SparseTensorProto) return object;\n      var message = new $root.onnx.SparseTensorProto();\n      if (object.values != null) {\n        if (typeof object.values !== 'object') throw TypeError('.onnx.SparseTensorProto.values: object expected');\n        message.values = $root.onnx.TensorProto.fromObject(object.values);\n      }\n      if (object.indices != null) {\n        if (typeof object.indices !== 'object') throw TypeError('.onnx.SparseTensorProto.indices: object expected');\n        message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n      }\n      if (object.dims) {\n        if (!Array.isArray(object.dims)) throw TypeError('.onnx.SparseTensorProto.dims: array expected');\n        message.dims = [];\n        for (var i = 0; i < object.dims.length; ++i)\n          if ($util.Long) (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n          else if (typeof object.dims[i] === 'string') message.dims[i] = parseInt(object.dims[i], 10);\n          else if (typeof object.dims[i] === 'number') message.dims[i] = object.dims[i];\n          else if (typeof object.dims[i] === 'object')\n            message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {onnx.SparseTensorProto} message SparseTensorProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    SparseTensorProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.dims = [];\n      if (options.defaults) {\n        object.values = null;\n        object.indices = null;\n      }\n      if (message.values != null && message.hasOwnProperty('values'))\n        object.values = $root.onnx.TensorProto.toObject(message.values, options);\n      if (message.indices != null && message.hasOwnProperty('indices'))\n        object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n      if (message.dims && message.dims.length) {\n        object.dims = [];\n        for (var j = 0; j < message.dims.length; ++j)\n          if (typeof message.dims[j] === 'number')\n            object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n          else\n            object.dims[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.dims[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber()\n                  : message.dims[j];\n      }\n      return object;\n    };\n\n    /**\n     * Converts this SparseTensorProto to JSON.\n     * @function toJSON\n     * @memberof onnx.SparseTensorProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    SparseTensorProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for SparseTensorProto\n     * @function getTypeUrl\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.SparseTensorProto';\n    };\n\n    return SparseTensorProto;\n  })();\n\n  onnx.TensorShapeProto = (function () {\n    /**\n     * Properties of a TensorShapeProto.\n     * @memberof onnx\n     * @interface ITensorShapeProto\n     * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n     */\n\n    /**\n     * Constructs a new TensorShapeProto.\n     * @memberof onnx\n     * @classdesc Represents a TensorShapeProto.\n     * @implements ITensorShapeProto\n     * @constructor\n     * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n     */\n    function TensorShapeProto(properties) {\n      this.dim = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TensorShapeProto dim.\n     * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n     * @memberof onnx.TensorShapeProto\n     * @instance\n     */\n    TensorShapeProto.prototype.dim = $util.emptyArray;\n\n    /**\n     * Creates a new TensorShapeProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n     * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n     */\n    TensorShapeProto.create = function create(properties) {\n      return new TensorShapeProto(properties);\n    };\n\n    /**\n     * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorShapeProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.dim != null && message.dim.length)\n        for (var i = 0; i < message.dim.length; ++i)\n          $root.onnx.TensorShapeProto.Dimension.encode(\n            message.dim[i],\n            writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TensorShapeProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TensorShapeProto} TensorShapeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorShapeProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TensorShapeProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            if (!(message.dim && message.dim.length)) message.dim = [];\n            message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TensorShapeProto} TensorShapeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TensorShapeProto message.\n     * @function verify\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TensorShapeProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.dim != null && message.hasOwnProperty('dim')) {\n        if (!Array.isArray(message.dim)) return 'dim: array expected';\n        for (var i = 0; i < message.dim.length; ++i) {\n          var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n          if (error) return 'dim.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TensorShapeProto} TensorShapeProto\n     */\n    TensorShapeProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TensorShapeProto) return object;\n      var message = new $root.onnx.TensorShapeProto();\n      if (object.dim) {\n        if (!Array.isArray(object.dim)) throw TypeError('.onnx.TensorShapeProto.dim: array expected');\n        message.dim = [];\n        for (var i = 0; i < object.dim.length; ++i) {\n          if (typeof object.dim[i] !== 'object') throw TypeError('.onnx.TensorShapeProto.dim: object expected');\n          message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {onnx.TensorShapeProto} message TensorShapeProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TensorShapeProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.dim = [];\n      if (message.dim && message.dim.length) {\n        object.dim = [];\n        for (var j = 0; j < message.dim.length; ++j)\n          object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this TensorShapeProto to JSON.\n     * @function toJSON\n     * @memberof onnx.TensorShapeProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TensorShapeProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TensorShapeProto\n     * @function getTypeUrl\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TensorShapeProto';\n    };\n\n    TensorShapeProto.Dimension = (function () {\n      /**\n       * Properties of a Dimension.\n       * @memberof onnx.TensorShapeProto\n       * @interface IDimension\n       * @property {number|Long|null} [dimValue] Dimension dimValue\n       * @property {string|null} [dimParam] Dimension dimParam\n       * @property {string|null} [denotation] Dimension denotation\n       */\n\n      /**\n       * Constructs a new Dimension.\n       * @memberof onnx.TensorShapeProto\n       * @classdesc Represents a Dimension.\n       * @implements IDimension\n       * @constructor\n       * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n       */\n      function Dimension(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Dimension dimValue.\n       * @member {number|Long|null|undefined} dimValue\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       */\n      Dimension.prototype.dimValue = null;\n\n      /**\n       * Dimension dimParam.\n       * @member {string|null|undefined} dimParam\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       */\n      Dimension.prototype.dimParam = null;\n\n      /**\n       * Dimension denotation.\n       * @member {string} denotation\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       */\n      Dimension.prototype.denotation = '';\n\n      // OneOf field names bound to virtual getters and setters\n      var $oneOfFields;\n\n      /**\n       * Dimension value.\n       * @member {\"dimValue\"|\"dimParam\"|undefined} value\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       */\n      Object.defineProperty(Dimension.prototype, 'value', {\n        get: $util.oneOfGetter(($oneOfFields = ['dimValue', 'dimParam'])),\n        set: $util.oneOfSetter($oneOfFields),\n      });\n\n      /**\n       * Creates a new Dimension instance using the specified properties.\n       * @function create\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n       * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n       */\n      Dimension.create = function create(properties) {\n        return new Dimension(properties);\n      };\n\n      /**\n       * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Dimension.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.dimValue != null && Object.hasOwnProperty.call(message, 'dimValue'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.dimValue);\n        if (message.dimParam != null && Object.hasOwnProperty.call(message, 'dimParam'))\n          writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.dimParam);\n        if (message.denotation != null && Object.hasOwnProperty.call(message, 'denotation'))\n          writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.denotation);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Dimension message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TensorShapeProto.Dimension} Dimension\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Dimension.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TensorShapeProto.Dimension();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.dimValue = reader.int64();\n              break;\n            }\n            case 2: {\n              message.dimParam = reader.string();\n              break;\n            }\n            case 3: {\n              message.denotation = reader.string();\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Dimension message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TensorShapeProto.Dimension} Dimension\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Dimension.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Dimension message.\n       * @function verify\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Dimension.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        var properties = {};\n        if (message.dimValue != null && message.hasOwnProperty('dimValue')) {\n          properties.value = 1;\n          if (\n            !$util.isInteger(message.dimValue) &&\n            !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high))\n          )\n            return 'dimValue: integer|Long expected';\n        }\n        if (message.dimParam != null && message.hasOwnProperty('dimParam')) {\n          if (properties.value === 1) return 'value: multiple values';\n          properties.value = 1;\n          if (!$util.isString(message.dimParam)) return 'dimParam: string expected';\n        }\n        if (message.denotation != null && message.hasOwnProperty('denotation'))\n          if (!$util.isString(message.denotation)) return 'denotation: string expected';\n        return null;\n      };\n\n      /**\n       * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TensorShapeProto.Dimension} Dimension\n       */\n      Dimension.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TensorShapeProto.Dimension) return object;\n        var message = new $root.onnx.TensorShapeProto.Dimension();\n        if (object.dimValue != null)\n          if ($util.Long) (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n          else if (typeof object.dimValue === 'string') message.dimValue = parseInt(object.dimValue, 10);\n          else if (typeof object.dimValue === 'number') message.dimValue = object.dimValue;\n          else if (typeof object.dimValue === 'object')\n            message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n        if (object.dimParam != null) message.dimParam = String(object.dimParam);\n        if (object.denotation != null) message.denotation = String(object.denotation);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {onnx.TensorShapeProto.Dimension} message Dimension\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Dimension.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.denotation = '';\n        if (message.dimValue != null && message.hasOwnProperty('dimValue')) {\n          if (typeof message.dimValue === 'number')\n            object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n          else\n            object.dimValue =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.dimValue)\n                : options.longs === Number\n                  ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber()\n                  : message.dimValue;\n          if (options.oneofs) object.value = 'dimValue';\n        }\n        if (message.dimParam != null && message.hasOwnProperty('dimParam')) {\n          object.dimParam = message.dimParam;\n          if (options.oneofs) object.value = 'dimParam';\n        }\n        if (message.denotation != null && message.hasOwnProperty('denotation')) object.denotation = message.denotation;\n        return object;\n      };\n\n      /**\n       * Converts this Dimension to JSON.\n       * @function toJSON\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Dimension.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Dimension\n       * @function getTypeUrl\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TensorShapeProto.Dimension';\n      };\n\n      return Dimension;\n    })();\n\n    return TensorShapeProto;\n  })();\n\n  onnx.TypeProto = (function () {\n    /**\n     * Properties of a TypeProto.\n     * @memberof onnx\n     * @interface ITypeProto\n     * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n     * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n     * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n     * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n     * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n     * @property {string|null} [denotation] TypeProto denotation\n     */\n\n    /**\n     * Constructs a new TypeProto.\n     * @memberof onnx\n     * @classdesc Represents a TypeProto.\n     * @implements ITypeProto\n     * @constructor\n     * @param {onnx.ITypeProto=} [properties] Properties to set\n     */\n    function TypeProto(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeProto tensorType.\n     * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.tensorType = null;\n\n    /**\n     * TypeProto sequenceType.\n     * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.sequenceType = null;\n\n    /**\n     * TypeProto mapType.\n     * @member {onnx.TypeProto.IMap|null|undefined} mapType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.mapType = null;\n\n    /**\n     * TypeProto optionalType.\n     * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.optionalType = null;\n\n    /**\n     * TypeProto sparseTensorType.\n     * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.sparseTensorType = null;\n\n    /**\n     * TypeProto denotation.\n     * @member {string} denotation\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.denotation = '';\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * TypeProto value.\n     * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    Object.defineProperty(TypeProto.prototype, 'value', {\n      get: $util.oneOfGetter(\n        ($oneOfFields = ['tensorType', 'sequenceType', 'mapType', 'optionalType', 'sparseTensorType']),\n      ),\n      set: $util.oneOfSetter($oneOfFields),\n    });\n\n    /**\n     * Creates a new TypeProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {onnx.ITypeProto=} [properties] Properties to set\n     * @returns {onnx.TypeProto} TypeProto instance\n     */\n    TypeProto.create = function create(properties) {\n      return new TypeProto(properties);\n    };\n\n    /**\n     * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.tensorType != null && Object.hasOwnProperty.call(message, 'tensorType'))\n        $root.onnx.TypeProto.Tensor.encode(\n          message.tensorType,\n          writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n        ).ldelim();\n      if (message.sequenceType != null && Object.hasOwnProperty.call(message, 'sequenceType'))\n        $root.onnx.TypeProto.Sequence.encode(\n          message.sequenceType,\n          writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n        ).ldelim();\n      if (message.mapType != null && Object.hasOwnProperty.call(message, 'mapType'))\n        $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n      if (message.denotation != null && Object.hasOwnProperty.call(message, 'denotation'))\n        writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.denotation);\n      if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, 'sparseTensorType'))\n        $root.onnx.TypeProto.SparseTensor.encode(\n          message.sparseTensorType,\n          writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n        ).ldelim();\n      if (message.optionalType != null && Object.hasOwnProperty.call(message, 'optionalType'))\n        $root.onnx.TypeProto.Optional.encode(\n          message.optionalType,\n          writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n        ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TypeProto} TypeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TypeProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n            break;\n          }\n          case 4: {\n            message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n            break;\n          }\n          case 5: {\n            message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n            break;\n          }\n          case 9: {\n            message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n            break;\n          }\n          case 8: {\n            message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n            break;\n          }\n          case 6: {\n            message.denotation = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TypeProto} TypeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeProto message.\n     * @function verify\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      var properties = {};\n      if (message.tensorType != null && message.hasOwnProperty('tensorType')) {\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n          if (error) return 'tensorType.' + error;\n        }\n      }\n      if (message.sequenceType != null && message.hasOwnProperty('sequenceType')) {\n        if (properties.value === 1) return 'value: multiple values';\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n          if (error) return 'sequenceType.' + error;\n        }\n      }\n      if (message.mapType != null && message.hasOwnProperty('mapType')) {\n        if (properties.value === 1) return 'value: multiple values';\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n          if (error) return 'mapType.' + error;\n        }\n      }\n      if (message.optionalType != null && message.hasOwnProperty('optionalType')) {\n        if (properties.value === 1) return 'value: multiple values';\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n          if (error) return 'optionalType.' + error;\n        }\n      }\n      if (message.sparseTensorType != null && message.hasOwnProperty('sparseTensorType')) {\n        if (properties.value === 1) return 'value: multiple values';\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n          if (error) return 'sparseTensorType.' + error;\n        }\n      }\n      if (message.denotation != null && message.hasOwnProperty('denotation'))\n        if (!$util.isString(message.denotation)) return 'denotation: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TypeProto} TypeProto\n     */\n    TypeProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TypeProto) return object;\n      var message = new $root.onnx.TypeProto();\n      if (object.tensorType != null) {\n        if (typeof object.tensorType !== 'object') throw TypeError('.onnx.TypeProto.tensorType: object expected');\n        message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n      }\n      if (object.sequenceType != null) {\n        if (typeof object.sequenceType !== 'object') throw TypeError('.onnx.TypeProto.sequenceType: object expected');\n        message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n      }\n      if (object.mapType != null) {\n        if (typeof object.mapType !== 'object') throw TypeError('.onnx.TypeProto.mapType: object expected');\n        message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n      }\n      if (object.optionalType != null) {\n        if (typeof object.optionalType !== 'object') throw TypeError('.onnx.TypeProto.optionalType: object expected');\n        message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n      }\n      if (object.sparseTensorType != null) {\n        if (typeof object.sparseTensorType !== 'object')\n          throw TypeError('.onnx.TypeProto.sparseTensorType: object expected');\n        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n      }\n      if (object.denotation != null) message.denotation = String(object.denotation);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {onnx.TypeProto} message TypeProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) object.denotation = '';\n      if (message.tensorType != null && message.hasOwnProperty('tensorType')) {\n        object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n        if (options.oneofs) object.value = 'tensorType';\n      }\n      if (message.sequenceType != null && message.hasOwnProperty('sequenceType')) {\n        object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n        if (options.oneofs) object.value = 'sequenceType';\n      }\n      if (message.mapType != null && message.hasOwnProperty('mapType')) {\n        object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n        if (options.oneofs) object.value = 'mapType';\n      }\n      if (message.denotation != null && message.hasOwnProperty('denotation')) object.denotation = message.denotation;\n      if (message.sparseTensorType != null && message.hasOwnProperty('sparseTensorType')) {\n        object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n        if (options.oneofs) object.value = 'sparseTensorType';\n      }\n      if (message.optionalType != null && message.hasOwnProperty('optionalType')) {\n        object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n        if (options.oneofs) object.value = 'optionalType';\n      }\n      return object;\n    };\n\n    /**\n     * Converts this TypeProto to JSON.\n     * @function toJSON\n     * @memberof onnx.TypeProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TypeProto\n     * @function getTypeUrl\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TypeProto';\n    };\n\n    TypeProto.Tensor = (function () {\n      /**\n       * Properties of a Tensor.\n       * @memberof onnx.TypeProto\n       * @interface ITensor\n       * @property {number|null} [elemType] Tensor elemType\n       * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n       */\n\n      /**\n       * Constructs a new Tensor.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents a Tensor.\n       * @implements ITensor\n       * @constructor\n       * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n       */\n      function Tensor(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Tensor elemType.\n       * @member {number} elemType\n       * @memberof onnx.TypeProto.Tensor\n       * @instance\n       */\n      Tensor.prototype.elemType = 0;\n\n      /**\n       * Tensor shape.\n       * @member {onnx.ITensorShapeProto|null|undefined} shape\n       * @memberof onnx.TypeProto.Tensor\n       * @instance\n       */\n      Tensor.prototype.shape = null;\n\n      /**\n       * Creates a new Tensor instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n       * @returns {onnx.TypeProto.Tensor} Tensor instance\n       */\n      Tensor.create = function create(properties) {\n        return new Tensor(properties);\n      };\n\n      /**\n       * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Tensor.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.elemType != null && Object.hasOwnProperty.call(message, 'elemType'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.elemType);\n        if (message.shape != null && Object.hasOwnProperty.call(message, 'shape'))\n          $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Tensor message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.Tensor} Tensor\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Tensor.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.Tensor();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.elemType = reader.int32();\n              break;\n            }\n            case 2: {\n              message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Tensor message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.Tensor} Tensor\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Tensor.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Tensor message.\n       * @function verify\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Tensor.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.elemType != null && message.hasOwnProperty('elemType'))\n          if (!$util.isInteger(message.elemType)) return 'elemType: integer expected';\n        if (message.shape != null && message.hasOwnProperty('shape')) {\n          var error = $root.onnx.TensorShapeProto.verify(message.shape);\n          if (error) return 'shape.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.Tensor} Tensor\n       */\n      Tensor.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.Tensor) return object;\n        var message = new $root.onnx.TypeProto.Tensor();\n        if (object.elemType != null) message.elemType = object.elemType | 0;\n        if (object.shape != null) {\n          if (typeof object.shape !== 'object') throw TypeError('.onnx.TypeProto.Tensor.shape: object expected');\n          message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {onnx.TypeProto.Tensor} message Tensor\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Tensor.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.elemType = 0;\n          object.shape = null;\n        }\n        if (message.elemType != null && message.hasOwnProperty('elemType')) object.elemType = message.elemType;\n        if (message.shape != null && message.hasOwnProperty('shape'))\n          object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n        return object;\n      };\n\n      /**\n       * Converts this Tensor to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.Tensor\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Tensor.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Tensor\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.Tensor';\n      };\n\n      return Tensor;\n    })();\n\n    TypeProto.Sequence = (function () {\n      /**\n       * Properties of a Sequence.\n       * @memberof onnx.TypeProto\n       * @interface ISequence\n       * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n       */\n\n      /**\n       * Constructs a new Sequence.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents a Sequence.\n       * @implements ISequence\n       * @constructor\n       * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n       */\n      function Sequence(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Sequence elemType.\n       * @member {onnx.ITypeProto|null|undefined} elemType\n       * @memberof onnx.TypeProto.Sequence\n       * @instance\n       */\n      Sequence.prototype.elemType = null;\n\n      /**\n       * Creates a new Sequence instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n       * @returns {onnx.TypeProto.Sequence} Sequence instance\n       */\n      Sequence.create = function create(properties) {\n        return new Sequence(properties);\n      };\n\n      /**\n       * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Sequence.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.elemType != null && Object.hasOwnProperty.call(message, 'elemType'))\n          $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Sequence message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.Sequence} Sequence\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Sequence.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.Sequence();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Sequence message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.Sequence} Sequence\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Sequence.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Sequence message.\n       * @function verify\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Sequence.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.elemType != null && message.hasOwnProperty('elemType')) {\n          var error = $root.onnx.TypeProto.verify(message.elemType);\n          if (error) return 'elemType.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.Sequence} Sequence\n       */\n      Sequence.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.Sequence) return object;\n        var message = new $root.onnx.TypeProto.Sequence();\n        if (object.elemType != null) {\n          if (typeof object.elemType !== 'object')\n            throw TypeError('.onnx.TypeProto.Sequence.elemType: object expected');\n          message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {onnx.TypeProto.Sequence} message Sequence\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Sequence.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.elemType = null;\n        if (message.elemType != null && message.hasOwnProperty('elemType'))\n          object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n        return object;\n      };\n\n      /**\n       * Converts this Sequence to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.Sequence\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Sequence.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Sequence\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.Sequence';\n      };\n\n      return Sequence;\n    })();\n\n    TypeProto.Map = (function () {\n      /**\n       * Properties of a Map.\n       * @memberof onnx.TypeProto\n       * @interface IMap\n       * @property {number|null} [keyType] Map keyType\n       * @property {onnx.ITypeProto|null} [valueType] Map valueType\n       */\n\n      /**\n       * Constructs a new Map.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents a Map.\n       * @implements IMap\n       * @constructor\n       * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n       */\n      function Map(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Map keyType.\n       * @member {number} keyType\n       * @memberof onnx.TypeProto.Map\n       * @instance\n       */\n      Map.prototype.keyType = 0;\n\n      /**\n       * Map valueType.\n       * @member {onnx.ITypeProto|null|undefined} valueType\n       * @memberof onnx.TypeProto.Map\n       * @instance\n       */\n      Map.prototype.valueType = null;\n\n      /**\n       * Creates a new Map instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n       * @returns {onnx.TypeProto.Map} Map instance\n       */\n      Map.create = function create(properties) {\n        return new Map(properties);\n      };\n\n      /**\n       * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Map.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.keyType != null && Object.hasOwnProperty.call(message, 'keyType'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.keyType);\n        if (message.valueType != null && Object.hasOwnProperty.call(message, 'valueType'))\n          $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Map.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Map message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.Map} Map\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Map.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.Map();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.keyType = reader.int32();\n              break;\n            }\n            case 2: {\n              message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Map message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.Map} Map\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Map.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Map message.\n       * @function verify\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Map.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.keyType != null && message.hasOwnProperty('keyType'))\n          if (!$util.isInteger(message.keyType)) return 'keyType: integer expected';\n        if (message.valueType != null && message.hasOwnProperty('valueType')) {\n          var error = $root.onnx.TypeProto.verify(message.valueType);\n          if (error) return 'valueType.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Map message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.Map} Map\n       */\n      Map.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.Map) return object;\n        var message = new $root.onnx.TypeProto.Map();\n        if (object.keyType != null) message.keyType = object.keyType | 0;\n        if (object.valueType != null) {\n          if (typeof object.valueType !== 'object') throw TypeError('.onnx.TypeProto.Map.valueType: object expected');\n          message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Map message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {onnx.TypeProto.Map} message Map\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Map.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.keyType = 0;\n          object.valueType = null;\n        }\n        if (message.keyType != null && message.hasOwnProperty('keyType')) object.keyType = message.keyType;\n        if (message.valueType != null && message.hasOwnProperty('valueType'))\n          object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n        return object;\n      };\n\n      /**\n       * Converts this Map to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.Map\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Map.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Map\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.Map';\n      };\n\n      return Map;\n    })();\n\n    TypeProto.Optional = (function () {\n      /**\n       * Properties of an Optional.\n       * @memberof onnx.TypeProto\n       * @interface IOptional\n       * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n       */\n\n      /**\n       * Constructs a new Optional.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents an Optional.\n       * @implements IOptional\n       * @constructor\n       * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n       */\n      function Optional(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Optional elemType.\n       * @member {onnx.ITypeProto|null|undefined} elemType\n       * @memberof onnx.TypeProto.Optional\n       * @instance\n       */\n      Optional.prototype.elemType = null;\n\n      /**\n       * Creates a new Optional instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n       * @returns {onnx.TypeProto.Optional} Optional instance\n       */\n      Optional.create = function create(properties) {\n        return new Optional(properties);\n      };\n\n      /**\n       * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Optional.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.elemType != null && Object.hasOwnProperty.call(message, 'elemType'))\n          $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Optional.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an Optional message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.Optional} Optional\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Optional.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.Optional();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an Optional message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.Optional} Optional\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Optional.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an Optional message.\n       * @function verify\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Optional.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.elemType != null && message.hasOwnProperty('elemType')) {\n          var error = $root.onnx.TypeProto.verify(message.elemType);\n          if (error) return 'elemType.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.Optional} Optional\n       */\n      Optional.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.Optional) return object;\n        var message = new $root.onnx.TypeProto.Optional();\n        if (object.elemType != null) {\n          if (typeof object.elemType !== 'object')\n            throw TypeError('.onnx.TypeProto.Optional.elemType: object expected');\n          message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an Optional message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {onnx.TypeProto.Optional} message Optional\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Optional.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.elemType = null;\n        if (message.elemType != null && message.hasOwnProperty('elemType'))\n          object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n        return object;\n      };\n\n      /**\n       * Converts this Optional to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.Optional\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Optional.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Optional\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.Optional';\n      };\n\n      return Optional;\n    })();\n\n    TypeProto.SparseTensor = (function () {\n      /**\n       * Properties of a SparseTensor.\n       * @memberof onnx.TypeProto\n       * @interface ISparseTensor\n       * @property {number|null} [elemType] SparseTensor elemType\n       * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n       */\n\n      /**\n       * Constructs a new SparseTensor.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents a SparseTensor.\n       * @implements ISparseTensor\n       * @constructor\n       * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n       */\n      function SparseTensor(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * SparseTensor elemType.\n       * @member {number} elemType\n       * @memberof onnx.TypeProto.SparseTensor\n       * @instance\n       */\n      SparseTensor.prototype.elemType = 0;\n\n      /**\n       * SparseTensor shape.\n       * @member {onnx.ITensorShapeProto|null|undefined} shape\n       * @memberof onnx.TypeProto.SparseTensor\n       * @instance\n       */\n      SparseTensor.prototype.shape = null;\n\n      /**\n       * Creates a new SparseTensor instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n       * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n       */\n      SparseTensor.create = function create(properties) {\n        return new SparseTensor(properties);\n      };\n\n      /**\n       * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SparseTensor.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.elemType != null && Object.hasOwnProperty.call(message, 'elemType'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.elemType);\n        if (message.shape != null && Object.hasOwnProperty.call(message, 'shape'))\n          $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a SparseTensor message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SparseTensor.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.SparseTensor();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.elemType = reader.int32();\n              break;\n            }\n            case 2: {\n              message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a SparseTensor message.\n       * @function verify\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      SparseTensor.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.elemType != null && message.hasOwnProperty('elemType'))\n          if (!$util.isInteger(message.elemType)) return 'elemType: integer expected';\n        if (message.shape != null && message.hasOwnProperty('shape')) {\n          var error = $root.onnx.TensorShapeProto.verify(message.shape);\n          if (error) return 'shape.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n       */\n      SparseTensor.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.SparseTensor) return object;\n        var message = new $root.onnx.TypeProto.SparseTensor();\n        if (object.elemType != null) message.elemType = object.elemType | 0;\n        if (object.shape != null) {\n          if (typeof object.shape !== 'object') throw TypeError('.onnx.TypeProto.SparseTensor.shape: object expected');\n          message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      SparseTensor.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.elemType = 0;\n          object.shape = null;\n        }\n        if (message.elemType != null && message.hasOwnProperty('elemType')) object.elemType = message.elemType;\n        if (message.shape != null && message.hasOwnProperty('shape'))\n          object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n        return object;\n      };\n\n      /**\n       * Converts this SparseTensor to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.SparseTensor\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      SparseTensor.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for SparseTensor\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.SparseTensor';\n      };\n\n      return SparseTensor;\n    })();\n\n    return TypeProto;\n  })();\n\n  onnx.OperatorSetIdProto = (function () {\n    /**\n     * Properties of an OperatorSetIdProto.\n     * @memberof onnx\n     * @interface IOperatorSetIdProto\n     * @property {string|null} [domain] OperatorSetIdProto domain\n     * @property {number|Long|null} [version] OperatorSetIdProto version\n     */\n\n    /**\n     * Constructs a new OperatorSetIdProto.\n     * @memberof onnx\n     * @classdesc Represents an OperatorSetIdProto.\n     * @implements IOperatorSetIdProto\n     * @constructor\n     * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n     */\n    function OperatorSetIdProto(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * OperatorSetIdProto domain.\n     * @member {string} domain\n     * @memberof onnx.OperatorSetIdProto\n     * @instance\n     */\n    OperatorSetIdProto.prototype.domain = '';\n\n    /**\n     * OperatorSetIdProto version.\n     * @member {number|Long} version\n     * @memberof onnx.OperatorSetIdProto\n     * @instance\n     */\n    OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * Creates a new OperatorSetIdProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n     * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n     */\n    OperatorSetIdProto.create = function create(properties) {\n      return new OperatorSetIdProto(properties);\n    };\n\n    /**\n     * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    OperatorSetIdProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.domain != null && Object.hasOwnProperty.call(message, 'domain'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.domain);\n      if (message.version != null && Object.hasOwnProperty.call(message, 'version'))\n        writer.uint32(/* id 2, wireType 0 =*/ 16).int64(message.version);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    OperatorSetIdProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.OperatorSetIdProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.domain = reader.string();\n            break;\n          }\n          case 2: {\n            message.version = reader.int64();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an OperatorSetIdProto message.\n     * @function verify\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    OperatorSetIdProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.domain != null && message.hasOwnProperty('domain'))\n        if (!$util.isString(message.domain)) return 'domain: string expected';\n      if (message.version != null && message.hasOwnProperty('version'))\n        if (\n          !$util.isInteger(message.version) &&\n          !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high))\n        )\n          return 'version: integer|Long expected';\n      return null;\n    };\n\n    /**\n     * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n     */\n    OperatorSetIdProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.OperatorSetIdProto) return object;\n      var message = new $root.onnx.OperatorSetIdProto();\n      if (object.domain != null) message.domain = String(object.domain);\n      if (object.version != null)\n        if ($util.Long) (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n        else if (typeof object.version === 'string') message.version = parseInt(object.version, 10);\n        else if (typeof object.version === 'number') message.version = object.version;\n        else if (typeof object.version === 'object')\n          message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n      return message;\n    };\n\n    /**\n     * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    OperatorSetIdProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.domain = '';\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.version =\n            options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.version = options.longs === String ? '0' : 0;\n      }\n      if (message.domain != null && message.hasOwnProperty('domain')) object.domain = message.domain;\n      if (message.version != null && message.hasOwnProperty('version'))\n        if (typeof message.version === 'number')\n          object.version = options.longs === String ? String(message.version) : message.version;\n        else\n          object.version =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.version)\n              : options.longs === Number\n                ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber()\n                : message.version;\n      return object;\n    };\n\n    /**\n     * Converts this OperatorSetIdProto to JSON.\n     * @function toJSON\n     * @memberof onnx.OperatorSetIdProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    OperatorSetIdProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for OperatorSetIdProto\n     * @function getTypeUrl\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.OperatorSetIdProto';\n    };\n\n    return OperatorSetIdProto;\n  })();\n\n  /**\n   * OperatorStatus enum.\n   * @name onnx.OperatorStatus\n   * @enum {number}\n   * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n   * @property {number} STABLE=1 STABLE value\n   */\n  onnx.OperatorStatus = (function () {\n    var valuesById = {},\n      values = Object.create(valuesById);\n    values[(valuesById[0] = 'EXPERIMENTAL')] = 0;\n    values[(valuesById[1] = 'STABLE')] = 1;\n    return values;\n  })();\n\n  onnx.FunctionProto = (function () {\n    /**\n     * Properties of a FunctionProto.\n     * @memberof onnx\n     * @interface IFunctionProto\n     * @property {string|null} [name] FunctionProto name\n     * @property {Array.<string>|null} [input] FunctionProto input\n     * @property {Array.<string>|null} [output] FunctionProto output\n     * @property {Array.<string>|null} [attribute] FunctionProto attribute\n     * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n     * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n     * @property {string|null} [docString] FunctionProto docString\n     * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n     * @property {string|null} [domain] FunctionProto domain\n     */\n\n    /**\n     * Constructs a new FunctionProto.\n     * @memberof onnx\n     * @classdesc Represents a FunctionProto.\n     * @implements IFunctionProto\n     * @constructor\n     * @param {onnx.IFunctionProto=} [properties] Properties to set\n     */\n    function FunctionProto(properties) {\n      this.input = [];\n      this.output = [];\n      this.attribute = [];\n      this.attributeProto = [];\n      this.node = [];\n      this.opsetImport = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FunctionProto name.\n     * @member {string} name\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.name = '';\n\n    /**\n     * FunctionProto input.\n     * @member {Array.<string>} input\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.input = $util.emptyArray;\n\n    /**\n     * FunctionProto output.\n     * @member {Array.<string>} output\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.output = $util.emptyArray;\n\n    /**\n     * FunctionProto attribute.\n     * @member {Array.<string>} attribute\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.attribute = $util.emptyArray;\n\n    /**\n     * FunctionProto attributeProto.\n     * @member {Array.<onnx.IAttributeProto>} attributeProto\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n    /**\n     * FunctionProto node.\n     * @member {Array.<onnx.INodeProto>} node\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.node = $util.emptyArray;\n\n    /**\n     * FunctionProto docString.\n     * @member {string} docString\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.docString = '';\n\n    /**\n     * FunctionProto opsetImport.\n     * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n    /**\n     * FunctionProto domain.\n     * @member {string} domain\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.domain = '';\n\n    /**\n     * Creates a new FunctionProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {onnx.IFunctionProto=} [properties] Properties to set\n     * @returns {onnx.FunctionProto} FunctionProto instance\n     */\n    FunctionProto.create = function create(properties) {\n      return new FunctionProto(properties);\n    };\n\n    /**\n     * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FunctionProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n      if (message.input != null && message.input.length)\n        for (var i = 0; i < message.input.length; ++i)\n          writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.input[i]);\n      if (message.output != null && message.output.length)\n        for (var i = 0; i < message.output.length; ++i)\n          writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.output[i]);\n      if (message.attribute != null && message.attribute.length)\n        for (var i = 0; i < message.attribute.length; ++i)\n          writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.attribute[i]);\n      if (message.node != null && message.node.length)\n        for (var i = 0; i < message.node.length; ++i)\n          $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 8, wireType 2 =*/ 66).string(message.docString);\n      if (message.opsetImport != null && message.opsetImport.length)\n        for (var i = 0; i < message.opsetImport.length; ++i)\n          $root.onnx.OperatorSetIdProto.encode(\n            message.opsetImport[i],\n            writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n          ).ldelim();\n      if (message.domain != null && Object.hasOwnProperty.call(message, 'domain'))\n        writer.uint32(/* id 10, wireType 2 =*/ 82).string(message.domain);\n      if (message.attributeProto != null && message.attributeProto.length)\n        for (var i = 0; i < message.attributeProto.length; ++i)\n          $root.onnx.AttributeProto.encode(\n            message.attributeProto[i],\n            writer.uint32(/* id 11, wireType 2 =*/ 90).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FunctionProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.FunctionProto} FunctionProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FunctionProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.FunctionProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.name = reader.string();\n            break;\n          }\n          case 4: {\n            if (!(message.input && message.input.length)) message.input = [];\n            message.input.push(reader.string());\n            break;\n          }\n          case 5: {\n            if (!(message.output && message.output.length)) message.output = [];\n            message.output.push(reader.string());\n            break;\n          }\n          case 6: {\n            if (!(message.attribute && message.attribute.length)) message.attribute = [];\n            message.attribute.push(reader.string());\n            break;\n          }\n          case 11: {\n            if (!(message.attributeProto && message.attributeProto.length)) message.attributeProto = [];\n            message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 7: {\n            if (!(message.node && message.node.length)) message.node = [];\n            message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 8: {\n            message.docString = reader.string();\n            break;\n          }\n          case 9: {\n            if (!(message.opsetImport && message.opsetImport.length)) message.opsetImport = [];\n            message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 10: {\n            message.domain = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.FunctionProto} FunctionProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FunctionProto message.\n     * @function verify\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FunctionProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.input != null && message.hasOwnProperty('input')) {\n        if (!Array.isArray(message.input)) return 'input: array expected';\n        for (var i = 0; i < message.input.length; ++i)\n          if (!$util.isString(message.input[i])) return 'input: string[] expected';\n      }\n      if (message.output != null && message.hasOwnProperty('output')) {\n        if (!Array.isArray(message.output)) return 'output: array expected';\n        for (var i = 0; i < message.output.length; ++i)\n          if (!$util.isString(message.output[i])) return 'output: string[] expected';\n      }\n      if (message.attribute != null && message.hasOwnProperty('attribute')) {\n        if (!Array.isArray(message.attribute)) return 'attribute: array expected';\n        for (var i = 0; i < message.attribute.length; ++i)\n          if (!$util.isString(message.attribute[i])) return 'attribute: string[] expected';\n      }\n      if (message.attributeProto != null && message.hasOwnProperty('attributeProto')) {\n        if (!Array.isArray(message.attributeProto)) return 'attributeProto: array expected';\n        for (var i = 0; i < message.attributeProto.length; ++i) {\n          var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n          if (error) return 'attributeProto.' + error;\n        }\n      }\n      if (message.node != null && message.hasOwnProperty('node')) {\n        if (!Array.isArray(message.node)) return 'node: array expected';\n        for (var i = 0; i < message.node.length; ++i) {\n          var error = $root.onnx.NodeProto.verify(message.node[i]);\n          if (error) return 'node.' + error;\n        }\n      }\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.opsetImport != null && message.hasOwnProperty('opsetImport')) {\n        if (!Array.isArray(message.opsetImport)) return 'opsetImport: array expected';\n        for (var i = 0; i < message.opsetImport.length; ++i) {\n          var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n          if (error) return 'opsetImport.' + error;\n        }\n      }\n      if (message.domain != null && message.hasOwnProperty('domain'))\n        if (!$util.isString(message.domain)) return 'domain: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.FunctionProto} FunctionProto\n     */\n    FunctionProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.FunctionProto) return object;\n      var message = new $root.onnx.FunctionProto();\n      if (object.name != null) message.name = String(object.name);\n      if (object.input) {\n        if (!Array.isArray(object.input)) throw TypeError('.onnx.FunctionProto.input: array expected');\n        message.input = [];\n        for (var i = 0; i < object.input.length; ++i) message.input[i] = String(object.input[i]);\n      }\n      if (object.output) {\n        if (!Array.isArray(object.output)) throw TypeError('.onnx.FunctionProto.output: array expected');\n        message.output = [];\n        for (var i = 0; i < object.output.length; ++i) message.output[i] = String(object.output[i]);\n      }\n      if (object.attribute) {\n        if (!Array.isArray(object.attribute)) throw TypeError('.onnx.FunctionProto.attribute: array expected');\n        message.attribute = [];\n        for (var i = 0; i < object.attribute.length; ++i) message.attribute[i] = String(object.attribute[i]);\n      }\n      if (object.attributeProto) {\n        if (!Array.isArray(object.attributeProto))\n          throw TypeError('.onnx.FunctionProto.attributeProto: array expected');\n        message.attributeProto = [];\n        for (var i = 0; i < object.attributeProto.length; ++i) {\n          if (typeof object.attributeProto[i] !== 'object')\n            throw TypeError('.onnx.FunctionProto.attributeProto: object expected');\n          message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n        }\n      }\n      if (object.node) {\n        if (!Array.isArray(object.node)) throw TypeError('.onnx.FunctionProto.node: array expected');\n        message.node = [];\n        for (var i = 0; i < object.node.length; ++i) {\n          if (typeof object.node[i] !== 'object') throw TypeError('.onnx.FunctionProto.node: object expected');\n          message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n        }\n      }\n      if (object.docString != null) message.docString = String(object.docString);\n      if (object.opsetImport) {\n        if (!Array.isArray(object.opsetImport)) throw TypeError('.onnx.FunctionProto.opsetImport: array expected');\n        message.opsetImport = [];\n        for (var i = 0; i < object.opsetImport.length; ++i) {\n          if (typeof object.opsetImport[i] !== 'object')\n            throw TypeError('.onnx.FunctionProto.opsetImport: object expected');\n          message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n        }\n      }\n      if (object.domain != null) message.domain = String(object.domain);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {onnx.FunctionProto} message FunctionProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FunctionProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.input = [];\n        object.output = [];\n        object.attribute = [];\n        object.node = [];\n        object.opsetImport = [];\n        object.attributeProto = [];\n      }\n      if (options.defaults) {\n        object.name = '';\n        object.docString = '';\n        object.domain = '';\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.input && message.input.length) {\n        object.input = [];\n        for (var j = 0; j < message.input.length; ++j) object.input[j] = message.input[j];\n      }\n      if (message.output && message.output.length) {\n        object.output = [];\n        for (var j = 0; j < message.output.length; ++j) object.output[j] = message.output[j];\n      }\n      if (message.attribute && message.attribute.length) {\n        object.attribute = [];\n        for (var j = 0; j < message.attribute.length; ++j) object.attribute[j] = message.attribute[j];\n      }\n      if (message.node && message.node.length) {\n        object.node = [];\n        for (var j = 0; j < message.node.length; ++j)\n          object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.opsetImport && message.opsetImport.length) {\n        object.opsetImport = [];\n        for (var j = 0; j < message.opsetImport.length; ++j)\n          object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n      }\n      if (message.domain != null && message.hasOwnProperty('domain')) object.domain = message.domain;\n      if (message.attributeProto && message.attributeProto.length) {\n        object.attributeProto = [];\n        for (var j = 0; j < message.attributeProto.length; ++j)\n          object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this FunctionProto to JSON.\n     * @function toJSON\n     * @memberof onnx.FunctionProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FunctionProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for FunctionProto\n     * @function getTypeUrl\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.FunctionProto';\n    };\n\n    return FunctionProto;\n  })();\n\n  return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long from 'long';\n\nimport { Graph } from './graph';\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { Tensor } from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n    n1:\n      | readonly number[]\n      | Int8Array\n      | Uint8Array\n      | Int16Array\n      | Uint16Array\n      | Int32Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array,\n    n2:\n      | readonly number[]\n      | Int8Array\n      | Uint8Array\n      | Int16Array\n      | Uint16Array\n      | Int32Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array,\n  ) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(\n    dimsA: readonly number[],\n    dimsB: readonly number[],\n  ): [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = dimsA.length === 1 ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = dimsB.length === 1 ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number] | undefined {\n    return a[1] !== b[0] ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(\n    adims: readonly number[],\n    bdims: readonly number[],\n    isMatMul = false,\n  ): readonly number[] | undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul = MatMulUtil.calcMatMulShape(\n        [adims[arank - 2], adims[arank - 1]],\n        [bdims[brank - 2], bdims[brank - 1]],\n      );\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n    a: Tensor,\n    b: Tensor,\n    op: (a: string | number, b: string | number) => string | number,\n    inplace: boolean,\n    resultType?: Tensor.DataType,\n  ): Tensor | undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string | number = 0;\n        let valB: string | number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n  target: number[] | Tensor.NumberType,\n  source: number[] | Tensor.NumberType,\n  targetIndex: number,\n  sourceIndex: number,\n  blockSize: number,\n) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n    leftShape: readonly number[],\n    transLeft: boolean,\n    rightShape: readonly number[],\n    transRight: boolean,\n    biasShape?: readonly number[],\n  ): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(\n    typeProto: onnx.TensorProto.DataType | onnxruntime.experimental.fbs.TensorDataType,\n  ): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number | Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map((d) => (Long.isLong(d) ? d.toNumber() : d));\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: { dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map((d) => d.dimValue!)) },\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional parameter to convert to a unsigned number.\n  static longToNumber(n: Long | flatbuffers.Long | number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({ low: n.low, high: n.high, unsigned: unsigned ?? false }).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n          // eslint-disable-next-line max-len\n          'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.',\n        );\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map((x) => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(\n          `the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims\n          }] Output shape: [${shapeHints}]`,\n        );\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error(\"reshapedDims and originalDims don't have matching sizes\");\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error(\"'axes' has an out of range axis\");\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error(\"'axes' has a duplicate axis\");\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n    target: number[] | Tensor.NumberType,\n    source: number[] | Tensor.NumberType,\n    targetIndex: number,\n    sourceIndex: number,\n    blockSize: number,\n  ) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n    target: number[] | Tensor.NumberType,\n    source: number[] | Tensor.NumberType,\n    targetIndex: number,\n    sourceIndex: number,\n    blockSize: number,\n    alpha: number,\n  ) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += alpha * source[sourceIndex + offset];\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n    target: number[] | Tensor.NumberType,\n    source: number[] | Tensor.NumberType,\n    targetIndex: number,\n    sourceIndex: number,\n    blockSize: number,\n    b: number,\n  ) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n    target: number[] | Tensor.NumberType,\n    source: number[] | Tensor.NumberType,\n    targetIndex: number,\n    sourceIndex: number,\n    blockSize: number,\n  ) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = source[sourceIndex + offset] * target[targetIndex + offset];\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(\n    dims: readonly number[],\n    axis: number,\n    split: number[],\n    numOutputs?: number,\n  ): [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error(\"need to know number of outputs when the 'split' attribute is not specified\");\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n    a: Tensor,\n    axes: number[],\n    keepdims: boolean,\n    op1: (b: number) => number,\n    op2: (a: number, b: number) => number,\n  ): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((_d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n        indices,\n        ReduceUtil.calcReduceByAxis(\n          a.numberData,\n          axes,\n          dims,\n          0,\n          ShapeUtil.indicesToOffset(indicesY, inputStrides),\n          op1,\n          op2,\n        ),\n      );\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n        ReduceUtil.calcReduceShape(dims, axes, keepdims),\n        y.type,\n        undefined,\n        undefined,\n        y.data,\n        y.dataId,\n      );\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n    input: Tensor.NumberType,\n    axes: number[],\n    dims: number[],\n    curAxisInd: number,\n    pos: number,\n    op1: (b: number) => number,\n    op2: (a: number, b: number) => number,\n  ): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res =\n        i === 0\n          ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2)\n          : op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter((dim) => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    kernelShape: number[],\n    strides: number[],\n    dilations: number[],\n    pads: number[],\n  ) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n    inputDims: readonly number[],\n    strides: readonly number[],\n    dilations: readonly number[],\n    kernelShape: readonly number[],\n    pads: number[],\n    autoPad?: string,\n  ) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== inputDims.length - 2) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n        inputDims[dim + 2],\n        strides[dim],\n        dilations[dim],\n        kernelShape[dim],\n        pads,\n        dim,\n        dim + inputDims.length - 2,\n        autoPad,\n      );\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    strides: number[],\n    dilations: number[],\n    kernelShape: number[],\n    pads: number[],\n    autoPad?: string,\n  ): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n      isGlobalOperator,\n      inputDims,\n      outputDims,\n      strides,\n      dilations,\n      kernelShape,\n      pads,\n      autoPad,\n    );\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n    inputDims: readonly number[],\n    filterDims: readonly number[],\n    strides: number[],\n    dilations: number[],\n    kernelShape: number[],\n    pads: number[],\n    autoPad?: string,\n  ): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    outputDims: number[],\n    strides: readonly number[],\n    dilations: readonly number[],\n    kernelShape: readonly number[],\n    pads: number[],\n    autoPad?: string,\n  ) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(\n          PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2],\n            strides[dim],\n            dilations[dim],\n            kernelShape[dim],\n            pads,\n            dim,\n            dim + inputDims.length - 2,\n            autoPad,\n          ),\n        );\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n    inSize: number,\n    stride: number,\n    dilation: number,\n    kernel: number,\n    pads: number[],\n    padHeadIndex: number,\n    padTailIndex: number,\n    autoPad?: string,\n  ): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor((inSize - dkernel) / stride + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] = autoPad === 'SAME_LOWER' ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor((inSize + padNeeded - kernel) / stride + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e38;\nexport const MAX_CLIP = 3.4028234663852886e38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Guid } from 'guid-typescript';\nimport Long from 'long';\n\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { decodeUtf8String, ProtoUtil, ShapeUtil } from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType =\n    | Tensor.DataTypeMap['int8']\n    | Tensor.DataTypeMap['uint8']\n    | Tensor.DataTypeMap['int16']\n    | Tensor.DataTypeMap['uint16']\n    | Tensor.DataTypeMap['int32']\n    | Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32'] | Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType | IntegerType | FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n    /**\n     * get the dimensions of the tensor\n     */\n    public readonly dims: readonly number[],\n    /**\n     * get the type of the tensor\n     */\n    public readonly type: Tensor.DataType,\n    private dataProvider?: DataProvider,\n    private asyncDataProvider?: AsyncDataProvider,\n    private cache?: TensorData,\n    /**\n     * get the data ID that used to map to a tensor data\n     */\n    public readonly dataId: Guid = Guid.create(),\n  ) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = dataProvider === undefined && asyncDataProvider === undefined && cache === undefined;\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError(\"Input dims doesn't match data length.\");\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every((i) => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n    } else if (\n      tensorProto.rawData &&\n      typeof tensorProto.rawData.byteLength === 'number' &&\n      tensorProto.rawData.byteLength > 0\n    ) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n        tensorProto.rawData.buffer,\n        tensorProto.rawData.byteOffset,\n        tensorProto.rawData.byteLength,\n      );\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number | Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n    } else if (\n      ortTensor.rawDataArray() &&\n      typeof ortTensor.rawDataLength() === 'number' &&\n      ortTensor.rawDataLength() > 0\n    ) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n        ortTensor.rawDataArray()!.buffer,\n        ortTensor.rawDataArray()!.byteOffset,\n        ortTensor.rawDataLength(),\n      );\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType | ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType | ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n    type === onnx.TensorProto.DataType.UINT32 ||\n    type === ortFbs.TensorDataType.UINT32 ||\n    type === onnx.TensorProto.DataType.UINT64 ||\n    type === ortFbs.TensorDataType.UINT64\n  ) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(\n  view: DataView,\n  type: onnx.TensorProto.DataType | ortFbs.TensorDataType,\n  byteOffset: number,\n): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n        Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false),\n        type,\n      );\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n        Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true),\n        type,\n      );\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1 | 2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1 | 2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1 | 2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1 | 2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1 | 2 | 3 | 4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked, // <-- normal unpacked texture\n  unpackedReversed, // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed, // <-- normal packed texture\n  downloadUint8AsFloat, // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension, // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float' | 'int';\n  name: string;\n  arrayLength?: number;\n  data: number | number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float' | 'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float' | 'int';\n  name: string;\n  arrayLength?: number;\n  data: number | number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D' | VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: { position: number; textureCoord: number };\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number | number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { assert } from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n  checkFn: () => boolean,\n  delayFn = (_counter: number) => 0,\n  maxCounter?: number,\n): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map((d) => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getGlChannels } from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map((d) => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, TextureType } from '../types';\nimport { getCoordsDataType } from '../utils';\n\nimport { getChannels } from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed],\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: { dims: input.dims, type: input.type, textureType: TextureType.packed },\n    shaderSource,\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader => ({\n  ...packProgramMetadata,\n  get: () => createPackProgramInfo(handler, input),\n});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordinates\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { unpackFromChannel } from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) => ({\n  name: 'Reshape (packed)',\n  inputTypes: [TextureType.packed],\n  inputNames: ['A'],\n  cacheHint: `${outputShape3D}`,\n});\n\nconst createPackedReshape3DProgramInfo = (\n  handler: WebGLInferenceHandler,\n  input3D: Tensor,\n  metadata: ProgramMetadata,\n  outputShape3D: readonly number[],\n): ProgramInfo => {\n  const inputShape3D = input3D.dims as [number, number, number];\n  const squeezedOutputShape = outputShape3D as [number, number, number];\n\n  let mainLoop = '';\n  for (let i = 0; i < 4; i++) {\n    let outputCoords = '';\n    switch (i) {\n      case 0:\n        outputCoords = 'outputCoords = rc;';\n        break;\n      case 1:\n        outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n        break;\n      case 2:\n        outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n        break;\n      case 3:\n        outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n        break;\n      default:\n        throw new Error();\n    }\n\n    mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n  }\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n\n  const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n  return {\n    ...metadata,\n    output: { dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createPackedReshape3DProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  input3D: Tensor,\n  outputShape3D: readonly number[],\n): ProgramInfoLoader => {\n  const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n  return { ...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D) };\n};\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {\n    // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {\n    // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {\n    // 2D +\n    isCheapReshape =\n      dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n      dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n    .map((stride, i) => {\n      const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n      const line2 =\n        i === strides.length - 1\n          ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}`\n          : `index -= ${coords[i]} * ${stride}`;\n      return `${line1}; ${line2};`;\n    })\n    .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { TextureData, TextureType } from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: { dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat },\n    shaderSource,\n    hasMain: true,\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, TextureType } from '../types';\nimport { getCoordsDataType } from '../utils';\n\nimport { getChannels, unpackFromChannel } from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = input.dims.length === 0;\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: { dims: input.dims, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader => ({\n  ...unpackProgramMetadata,\n  get: () => createUnpackProgramInfo(handler, input),\n});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger } from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const enum EncoderUsage {\n  Default = 0,\n  UploadOnly,\n  Download4BytesAsFloat32,\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => (result[i] = v));\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((_value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => (dest[i * 4] = v));\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((_value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA; // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ShapeUtil } from '../../util';\n\nimport { TextureLayoutStrategy, WidthHeightPrefs } from './texture-layout-strategy';\nimport { TextureLayout, TextureType } from './types';\n\nexport const createTextureLayoutFromTextureType = (\n  textureLayoutStrategy: TextureLayoutStrategy,\n  shape: readonly number[],\n  textureType: TextureType,\n): TextureLayout => {\n  const channel = textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed ? 1 : 4;\n  const isPacked = textureType === TextureType.packed;\n  const reverseWH = textureType === TextureType.unpackedReversed || textureType === TextureType.packed;\n  const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n  const unpackedShape =\n    textureType === TextureType.packedLastDimension\n      ? shape.map((d, i) => (i === shape.length - 1 ? d * 4 : d))\n      : undefined;\n  return createTextureLayoutFromShape(textureLayoutStrategy, shape, channel, unpackedShape, {\n    isPacked,\n    reverseWH,\n    breakAxis,\n  });\n};\n\nexport const calculateTextureWidthAndHeight = (\n  textureLayoutStrategy: TextureLayoutStrategy,\n  shape: readonly number[],\n  textureType: TextureType,\n): [number, number] => {\n  const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n  return [layout.width, layout.height];\n};\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape = (\n  textureLayoutStrategy: TextureLayoutStrategy,\n  shape: readonly number[],\n  channels: 1 | 4 = 1,\n  unpackedShape?: readonly number[],\n  prefs?: WidthHeightPrefs,\n): TextureLayout => {\n  const isPacked = !!(prefs && prefs.isPacked);\n  const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n  const rank = shape.length;\n  let inferredDims = shape.slice(0);\n  if (rank === 0) {\n    inferredDims = [1];\n  }\n  if (channels === 1) {\n    // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n    unpackedShape = shape;\n  } else if (isPacked) {\n    if (channels !== 4) {\n      throw new Error('a packed texture must be 4-channel');\n    }\n    unpackedShape = shape;\n    if (rank > 0) {\n      inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n    }\n    if (rank > 1) {\n      inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n    }\n  } else if (!unpackedShape) {\n    throw new Error('Unpacked shape is needed when using channels > 1');\n  }\n  return {\n    width,\n    height,\n    channels,\n    isPacked,\n    shape: inferredDims,\n    strides: ShapeUtil.computeStrides(inferredDims),\n    unpackedShape,\n    reversedWH: prefs && prefs.reverseWH,\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceHandler } from '../../backend';\nimport { Logger } from '../../instrument';\nimport { Tensor } from '../../tensor';\nimport { ShapeUtil } from '../../util';\n\nimport { createPackProgramInfoLoader } from './ops/pack';\nimport { createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D } from './ops/reshape-packed';\nimport { encodeAsUint8 } from './ops/uint8-encode';\nimport { createUnpackProgramInfoLoader } from './ops/unpack';\nimport { WebGLSessionHandler } from './session-handler';\nimport { EncoderUsage } from './texture-data-encoder';\nimport {\n  calculateTextureWidthAndHeight,\n  createTextureLayoutFromShape,\n  createTextureLayoutFromTextureType,\n} from './texture-layout';\nimport { Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType } from './types';\n\nconst getProgramInfoUniqueKey = (\n  programInfo: ProgramInfo | ProgramInfoLoader,\n  inputTextureDatas: TextureData[],\n): string => {\n  const inputs = inputTextureDatas\n    .map((texture) => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n    .join('_');\n  let key = programInfo.name;\n  if (programInfo.cacheHint) {\n    key += '[' + programInfo.cacheHint + ']';\n  }\n  key += ':' + inputs;\n  return key;\n};\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo | ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact\n      ? artifact.programInfo\n      : typeof (program as ProgramInfoLoader).get === 'function'\n        ? (program as ProgramInfoLoader).get()\n        : (program as ProgramInfo);\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n      this.session.layoutStrategy,\n      programInfo.output.dims,\n      programInfo.output.textureType,\n    );\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = EncoderUsage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout = createTextureLayoutFromTextureType(\n            this.session.layoutStrategy,\n            adjustedKernelShape,\n            textureType,\n          );\n          let buffer = tensor.numberData;\n          if ((shape[1] * shape[2] * shape[3]) % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil((oldRowSize * group) / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + (f % group) * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, EncoderUsage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout = createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {\n          reverseWH: true,\n        });\n        const unpackedTextureData = this.createTextureData(\n          unpackedTextureLayout,\n          tensor.type,\n          tensor.numberData,\n          tensor,\n          EncoderUsage.UploadOnly,\n        );\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, EncoderUsage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = EncoderUsage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n    layout: TextureLayout,\n    dataType: Tensor.DataType,\n    data: Tensor.NumberType,\n    tensor: Tensor,\n  ): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, EncoderUsage.UploadOnly);\n  }\n\n  private createTextureData(\n    layout: TextureLayout,\n    dataType: Tensor.DataType,\n    data?: Tensor.NumberType,\n    tensor?: Tensor,\n    usage?: EncoderUsage,\n  ): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true,\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n      createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape),\n      [squeezedInputTensor],\n    );\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n    layout: TextureLayout,\n    dataType: Tensor.DataType,\n    texture: WebGLTexture,\n    tensor?: Tensor,\n    tensorId?: Tensor.Id,\n  ) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor:\n        tensor ||\n        new Tensor(\n          layout.unpackedShape,\n          dataType,\n          (_id: Tensor.Id) => this.readTexture(textureData),\n          async (_id: Tensor.Id) => this.readTextureAsync(textureData),\n          undefined,\n          tensorId,\n        ),\n      texture,\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData | undefined {\n    return this.session.isInitializer(tensorId)\n      ? this.session.getTextureData(tensorId, isPacked)\n      : isPacked\n        ? this.packedTextureDataCache.get(tensorId)\n        : this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach((td) => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach((td) => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private key: string;\n  public get cacheKey(): string {\n    if (!this.key) {\n      this.key = Object.getOwnPropertyNames(this)\n        .sort()\n        .map((name) => `${(this as Record<string, unknown>)[name]}`)\n        .join(';');\n    }\n    return this.key;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(\n  attribute: T,\n): T & AttributeWithCacheKey => new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes: [\n    TextureType.unpacked,\n    TextureType.unpacked,\n    TextureType.unpacked,\n    TextureType.unpacked,\n    TextureType.unpacked,\n  ],\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: BatchNormalizationAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...batchNormalizationProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> = (\n  node: Graph.Node,\n): BatchNormalizationAttributes => {\n  const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n  const momentum = node.attributes.getFloat('momentum', 0.9);\n  const spatial = node.attributes.getInt('spatial', 1);\n  return createAttributeWithCacheKey({ epsilon, momentum, spatial });\n};\n\nconst createBatchNormalizationProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: BatchNormalizationAttributes,\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const rank = inputs[0].dims.length;\n  const [scaleWidth, scaleHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    inputs[1].dims,\n    TextureType.unpacked,\n  );\n  const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n  return {\n    ...batchNormalizationProgramMetadata,\n    output: { dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (\n    X.dims.length < 3 ||\n    scale.dims.length !== 1 ||\n    B.dims.length !== 1 ||\n    mean.dims.length !== 1 ||\n    var_.dims.length !== 1\n  ) {\n    throw new Error('invalid input shape.');\n  }\n  if (\n    scale.dims[0] !== X.dims[1] ||\n    B.dims[0] !== X.dims[1] ||\n    mean.dims[0] !== X.dims[1] ||\n    var_.dims[0] !== X.dims[1]\n  ) {\n    throw new Error('invalid input shape.');\n  }\n  if (\n    (X.type !== 'float32' && X.type !== 'float64') ||\n    (scale.type !== 'float32' && scale.type !== 'float64') ||\n    (B.type !== 'float32' && B.type !== 'float64') ||\n    (mean.type !== 'float32' && mean.type !== 'float64') ||\n    (var_.type !== 'float32' && var_.type !== 'float64')\n  ) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ProgramInfo, TextureLayout } from './types';\nimport { WebGLContext } from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional,\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n    public glContext: WebGLContext,\n    public programInfo: ProgramInfo,\n    public inputTextureLayouts: TextureLayout[],\n    public outputTextureLayout: TextureLayout,\n  ) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): { [name: string]: GlslLibRoutine };\n  abstract getCustomTypes(): { [name: string]: string };\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(\n    public routineBody: string,\n    public dependencies?: string[],\n  ) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(\n    public name: string,\n    routineBody?: string,\n    dependencies?: GlslLibRoutineNode[],\n  ) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n    graphNodes: GlslLibRoutineNode[],\n    cycleCheck: Set<string>,\n    alreadyTraversed: Set<string>,\n    result: GlslLibRoutineNode[],\n  ) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n    root: GlslLibRoutineNode,\n    cycleCheck: Set<string>,\n    alreadyTraversed: Set<string>,\n    result: GlslLibRoutineNode[],\n  ) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error(\"Cyclic dependency detected. Can't topologically sort routines needed for shader.\");\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { BroadcastUtil, ShapeUtil } from '../../../util';\nimport { FunctionType, GlslValueFunction } from '../glsl-definitions';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, TextureType } from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\n\nconst createBinaryProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  glslFunc: GlslValueFunction,\n  outputTensorType: Tensor.DataType = inputs[0].type,\n  cacheKey?: string,\n): ProgramInfoLoader => {\n  const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n  return {\n    name: glslFunc.name,\n    inputNames: ['A', 'B'],\n    inputTypes: [textureType, textureType],\n    cacheHint: cacheKey,\n    get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType),\n  };\n};\n\nconst createBinaryProgramInfo = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  glslFunc: GlslValueFunction,\n  outputTensorType: Tensor.DataType = inputs[0].type,\n): ProgramInfo => {\n  const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n  const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n  let outputShape = inputs[0].dims;\n\n  const usePackedTexture = handler.session.pack;\n\n  if (isBroadcast) {\n    const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n    if (!calculatedShape) {\n      throw new Error(\"Can't perform binary op on the given tensors\");\n    }\n    outputShape = calculatedShape;\n    const outputRank = outputShape.length;\n    const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n    const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n    const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n    const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = usePackedTexture\n      ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }`\n      : `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n    return {\n      name: glslFunc.name,\n      inputNames: ['A', 'B'],\n      inputTypes: [textureType, textureType],\n      output: { dims: outputShape, type: outputTensorType, textureType },\n      shaderSource,\n      hasMain: usePackedTexture,\n    };\n  }\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n  return {\n    name: glslFunc.name,\n    inputNames: ['A', 'B'],\n    inputTypes: [textureType, textureType],\n    output: { dims: inputs[0].dims, type: outputTensorType, textureType },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs),\n];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs),\n];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs),\n];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs),\n];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs),\n];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs),\n];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs),\n];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs),\n];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs),\n];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs),\n];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs),\n];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs),\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ProtoUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  to: Tensor.DataType,\n): Tensor[] => {\n  validateInputs(inputs);\n  return [handler.cast(inputs[0], to)];\n};\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n  ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\nimport { getCoordsDataType, getGlChannels } from '../utils';\n\nimport { ConcatAttributes } from './concat';\nimport { getChannels, unpackFromChannel } from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({ length: inputCount }, (_v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint,\n});\n\nconst createPackedConcatProgramInfo = (\n  handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  axis: number,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims.slice();\n  if (axis >= inputShape.length || axis < -1 * inputShape.length) {\n    throw new Error(\"axis specified for concat doesn't match input dimensionality\");\n  }\n  if (axis < 0) {\n    axis = inputShape.length + axis;\n  }\n  // ensure all of the non-concatenated axes match each other\n  // calculate the shape of the output tensor while we do that\n  const outputShape = inputShape.slice(0);\n  for (let i = 1; i < inputs.length; i++) {\n    const dataNShape = inputs[i].dims.slice();\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n      // add to the placeholder for computing output shape\n      if (axisIndex === axis) {\n        outputShape[axis] += dataNShape[axisIndex];\n      }\n      // ensure all non-cancatenated axes match each other\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n        throw new Error('non concat dimensions must match');\n      }\n    }\n  }\n\n  const rank = outputShape.length;\n  const coords = getChannels('coords', rank);\n  const dtype = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n\n  const shapes = inputs.map((i) => i.dims);\n  const channels = getGlChannels(rank);\n  const offsets: number[] = new Array(shapes.length - 1);\n\n  offsets[0] = shapes[0][axis];\n  for (let i = 1; i < offsets.length; i++) {\n    offsets[i] = offsets[i - 1] + shapes[i][axis];\n  }\n\n  const channel = channels[axis];\n  const lastChannels = channels.slice(-2);\n  const allChannels = channels.join();\n\n  let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n  for (let i = 1; i < offsets.length; i++) {\n    const shift = offsets[i - 1];\n    getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n  }\n  const lastIndex = offsets.length;\n  const shift = offsets[offsets.length - 1];\n  getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n\n  const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map((x) => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.packed },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createPackedConcatProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConcatAttributes,\n): ProgramInfoLoader => {\n  const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n  return { ...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis) };\n};\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { createPackedConcatProgramInfoLoader } from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConcatAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n    const output = inferenceHandler.run(\n      createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes),\n      inputs,\n    );\n    return [output];\n  } else {\n    const output = inferenceHandler.run(\n      createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes),\n      inputs,\n    );\n    return [output];\n  }\n};\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({ length: inputCount }, (_v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint,\n});\n\nconst createUnpackedConcatProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  axis: number,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims.slice();\n  if (axis >= inputShape.length || axis < -1 * inputShape.length) {\n    throw new Error(\"axis specified for concat doesn't match input dimensionality\");\n  }\n  if (axis < 0) {\n    axis = inputShape.length + axis;\n  }\n  // ensure all of the non-concatenated axes match each other\n  // calculate the shape of the output tensor while we do that\n  const outputShape = inputShape.slice(0);\n  for (let i = 1; i < inputs.length; i++) {\n    const dataNShape = inputs[i].dims.slice();\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n      // add to the placeholder for computing output shape\n      if (axisIndex === axis) {\n        outputShape[axis] += dataNShape[axisIndex];\n      }\n      // ensure all non-cancatenated axes match each other\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n        throw new Error('non concat dimensions must match');\n      }\n    }\n  }\n\n  const rank = outputShape.length;\n\n  const sizeInConcatAxis = new Array<number>(inputs.length);\n  let previousSum = 0;\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    previousSum += inputs[i].dims[axis];\n    sizeInConcatAxis[i] = previousSum;\n  }\n\n  let getTextureIndexWhereDataResidesMethod = '';\n  // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n  if (inputs.length < 5) {\n    getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n  } else {\n    getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n  }\n\n  const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n  const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n  const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst createUnpackedConcatProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConcatAttributes,\n): ProgramInfoLoader => {\n  const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n  return { ...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis) };\n};\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map(\n    (size, i) => `if(index<${size}) {return ${i};}\n`,\n  );\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n  getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push('\\t' + `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push('\\t' + `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push('\\t' + `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push('\\t' + '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push('\\t' + `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push('\\t' + `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push('\\t' + `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push('\\t' + '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n  createAttributeWithCacheKey({ axis: node.attributes.getInt('axis') });\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { Tensor } from '../../../tensor';\nimport { MAX_CLIP, MIN_CLIP } from '../../../util';\nimport { FunctionType, GlslValueFunction } from '../glsl-definitions';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo = (\n  handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  input: Tensor,\n  glslFunc: GlslValueFunction,\n): ProgramInfo => {\n  const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  return {\n    ...metadata,\n    output: { dims: input.dims, type: input.type, textureType },\n    shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n    hasMain: true,\n  };\n};\n\nconst createElementwiseProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  input: Tensor,\n  glslFunc: GlslValueFunction,\n  cacheKey?: string,\n): ProgramInfoLoader => {\n  const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n  const metadata = { name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey };\n  return { ...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc) };\n};\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs),\n];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs),\n];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs),\n];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs),\n];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip = (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [\n  handler.run(\n    createElementwiseProgramInfoLoader(\n      handler,\n      inputs[0],\n      glslClip(attributes.min, attributes.max),\n      attributes.cacheKey,\n    ),\n    inputs,\n  ),\n];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes =>\n  createAttributeWithCacheKey({\n    min: node.attributes.getFloat('min', MIN_CLIP),\n    max: node.attributes.getFloat('max', MAX_CLIP),\n  });\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (\n    inputs.length >= 3 &&\n    (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))\n  ) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = inputs.length >= 3 ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = inputs.length >= 3 ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({ min, max });\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs),\n];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs),\n];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu = (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [\n  handler.run(\n    createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n    inputs,\n  ),\n];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n  createAttributeWithCacheKey({ alpha: node.attributes.getFloat('alpha', 1.0) });\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs),\n];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs),\n];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs),\n];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: LeakyReluAttributes,\n): Tensor[] => [\n  handler.run(\n    createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n    inputs,\n  ),\n];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n  createAttributeWithCacheKey({ alpha: node.attributes.getFloat('alpha', 0.01) });\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs),\n];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs),\n];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs),\n];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs),\n];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs),\n];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs),\n];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs),\n];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs),\n];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs),\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Attribute } from '../../../attribute';\nimport { MAX_CLIP, MIN_CLIP } from '../../../util';\nimport { GlslValueFunction } from '../glsl-definitions';\n\nimport { glslClip, glslRelu, glslSigmoid } from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return { activationFunction: '', applyActivation: '' };\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return { activationFunction, applyActivation };\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return { activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}` };\n  }\n  return { activation, activationCacheKey: activation };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger } from '../../../instrument';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { calculateOutputShape, ConvAttributes } from './conv';\nimport { getActivationSnippet } from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias\n    ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n    : [TextureType.unpacked, TextureType.unpacked],\n  cacheHint,\n});\n\nconst createUnpackedGroupedConvProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  metadata: ProgramMetadata,\n  attributes: ConvAttributes,\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n  const xShape = inputs[0].dims.slice();\n  const wShape = inputs[1].dims.slice();\n  const outputChannelsPerGroup = wShape[0] / attributes.group;\n  Logger.verbose(\n    'GroupedConv',\n    `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n      attributes.kernelShape\n    }, pads:${attributes.pads}, strides:${attributes.strides}`,\n  );\n  const outputShape = calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const { activationFunction, applyActivation } = getActivationSnippet(attributes);\n\n  const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createUnpackedGroupedConvProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): ProgramInfoLoader => {\n  const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n  return {\n    ...metadata,\n    get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes),\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { ConvAttributes } from './conv';\nimport { unpackFromChannel } from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  x: Tensor,\n  w: Tensor,\n  outputShape: readonly number[],\n  attributes: ConvAttributes,\n): ProgramInfo => {\n  const xshape = x.dims;\n  const wshape = w.dims;\n  const rowDim = 2;\n  const colDim = 3;\n  const rank = outputShape.length;\n  const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n  const kernelSize = wshape[2] * wshape[3];\n  const unpackChannel = unpackFromChannel();\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  let unrolled = '';\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n    }\n  }\n\n  const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n  return {\n    ...metadata,\n    output: { dims: im2colShape, type: x.type, textureType: TextureType.packed },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createPackedIm2ColProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  x: Tensor,\n  w: Tensor,\n  outputShape: readonly number[],\n  attributes: ConvAttributes,\n): ProgramInfoLoader => {\n  const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n  return {\n    ...metadata,\n    get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes),\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { BroadcastUtil, ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\nimport { getCoordsDataType, getGlChannels } from '../utils';\n\nimport { getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes } from './fuse-utils';\nimport { createPackedMatmulProgramInfoLoader } from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: InternalActivationAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  if (inferenceHandler.session.pack) {\n    return [inferenceHandler.run(createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n  } else {\n    return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n  }\n};\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> = (\n  node: Graph.Node,\n): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias\n    ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n    : [TextureType.unpacked, TextureType.unpacked],\n  cacheHint,\n});\n\nfunction createMatmulProgramInfo(\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  activationAttributes: InternalActivationAttributes,\n): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error(\"Can't use matmul on the given tensors\");\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const { activationFunction, applyActivation } = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet = hasBias\n    ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}`\n    : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n  inputs: Tensor[],\n  activationAttributes: InternalActivationAttributes,\n): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return { ...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes) };\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (\n    (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n    (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')\n  ) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n  coordsDataType: string,\n  allGlChannels: readonly string[],\n  inShape: readonly number[],\n  outShape: readonly number[],\n  isPacked: boolean,\n): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((_s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map((d) => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked\n    ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}`\n    : `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { BroadcastUtil, ShapeUtil } from '../../../util';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\nimport { getCoordsDataType, getGlChannels } from '../utils';\n\nimport { getActivationSnippet, InternalActivationAttributes } from './fuse-utils';\nimport { getBiasForMatmul } from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias\n    ? [TextureType.packed, TextureType.packed, TextureType.packed]\n    : [TextureType.packed, TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedMatmulProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  activationAttributes: InternalActivationAttributes,\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n  if (!outputShape) {\n    throw new Error(\"Can't use matmul on the given tensors\");\n  }\n  const sharedDim = aShape[aShape.length - 1];\n  const sharedDimIndex = Math.ceil(sharedDim / 2);\n  const aRank = aShape.length;\n  const bRank = bShape.length;\n\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const outRank = outputShape.length;\n  const allGlChannels = getGlChannels();\n  const { activationFunction, applyActivation } = getActivationSnippet(activationAttributes);\n\n  const getBiasForMatmulSnippet = hasBias\n    ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}`\n    : '';\n\n  const getBcastedSamplerForMatmulSnippet = isBroadcast\n    ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}`\n    : '';\n\n  const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n  const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n  const getOutputCoordsSnippet = isBroadcast\n    ? ''\n    : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n  const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.packed },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createPackedMatmulProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  activationAttributes: InternalActivationAttributes,\n): ProgramInfoLoader => {\n  const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {\n    ...metadata,\n    get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes),\n  };\n};\n\nfunction getBcastSamplerForMatmul(\n  coordsDataType: string,\n  allGlChannels: readonly string[],\n  inputs: Tensor[],\n  outShape: readonly number[],\n): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((_s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((_s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map((d) => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map((d) => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` + 'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' + `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nimport { calculateOutputShape, ConvAttributes } from './conv';\nimport { createPackedIm2ColProgramInfoLoader } from './im2col-pack';\nimport { createPackedMatmulProgramInfoLoader } from './matmul-pack';\n\nexport const conv2DPackedPointwise = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): Tensor => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const outputShape = calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n  const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n  const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n  const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n  const matmulOutput = inferenceHandler.run(\n    createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes),\n    matmulInputs,\n  );\n  return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n};\n\nexport const conv2DPacked = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): Tensor => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const outputShape = calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n  // run im2col\n  const im2colOutput = inferenceHandler.run(\n    createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n    [inputs[0]],\n  );\n\n  // reshape kernel\n  const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n  // run matmul\n  const matmulInputs = inputs.length === 3 ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n  const matmulOutput = inferenceHandler.run(\n    createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes),\n    matmulInputs,\n  );\n\n  // reshape output\n  const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n  return outputReshaped;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { ConvAttributes } from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo = (\n  _inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  x: Tensor,\n  w: Tensor,\n  outputShape: readonly number[],\n  attributes: ConvAttributes,\n): ProgramInfo => {\n  const xshape = x.dims;\n  const wshape = w.dims;\n\n  const rank = outputShape.length;\n  const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n  const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n  return {\n    ...metadata,\n    output: { dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension },\n    shaderSource,\n  };\n};\n\nexport const createIm2ColProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  x: Tensor,\n  w: Tensor,\n  outputShape: readonly number[],\n  attributes: ConvAttributes,\n): ProgramInfoLoader => {\n  const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n  return {\n    ...metadata,\n    get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes),\n  };\n};\n\nexport const calculateIm2ColDims = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  outputShape: readonly number[],\n  channels = 4,\n): number[] => [\n  outputShape[0],\n  outputShape[2],\n  outputShape[3],\n  Math.ceil((inputShape[1] * kernelShape[2] * kernelShape[3]) / channels),\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { getActivationSnippet, InternalActivationAttributes } from './fuse-utils';\nimport { calculateIm2ColDims } from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias\n    ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked]\n    : [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey,\n});\n\nconst createDotProductProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: readonly Tensor[],\n  outputShape: number[],\n  attributes: InternalActivationAttributes,\n): ProgramInfo => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n  const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n  const [kWidth, kHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    adjustedKernelShape,\n    TextureType.packedLastDimension,\n  );\n\n  const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n  const [im2colWidth, im2colHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    im2colShape,\n    TextureType.packedLastDimension,\n  );\n  const rank = outputShape.length;\n\n  const initValue = inputs.length < 3 ? '0.0' : '_B(b)';\n  const sharedDim = Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4);\n  const { activationFunction, applyActivation } = getActivationSnippet(attributes);\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n    im2colStrides[2]\n  };\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nexport const createDotProductProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  outputShape: number[],\n  attributes: InternalActivationAttributes,\n): ProgramInfoLoader => {\n  const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n  return {\n    ...metadata,\n    get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes),\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { InferenceHandler } from '../../../backend';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { PoolConvUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nimport { createUnpackedGroupedConvProgramInfoLoader } from './conv-grouped';\nimport { conv2DPacked } from './conv-pack';\nimport { createDotProductProgramInfoLoader } from './dot-product';\nimport { InternalActivationAttributes, parseInternalActivationAttributes } from './fuse-utils';\nimport { createIm2ColProgramInfoLoader } from './im2col';\nimport { createMatmulProgramInfoLoader } from './matmul';\n\nexport const calculateOutputShape = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  dilations: readonly number[],\n  adjustPads: readonly number[],\n  strides: readonly number[],\n): number[] => {\n  const batchSize = inputShape[0];\n  const inputSpatialShape = inputShape.slice(2);\n  const spatialRank = inputSpatialShape.length;\n  const outChannels = kernelShape[0];\n  const kernelSpatialShape = kernelShape.slice(2);\n  const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n  const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n  const outputSpatialShape = inputSpatialShapeWithPad.map((v, i) =>\n    Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]),\n  );\n  const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n  return outputShape;\n};\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> = (\n  inferenceHandler: InferenceHandler,\n  inputs: Tensor[],\n  attributes: ConvAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes); // currently will fail if not conv2D\n  return conv2d(inferenceHandler, inputs, attributes);\n};\n\nconst conv2d: OperatorImplementation<ConvAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConvAttributes,\n): Tensor[] => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n  const packMode = inferenceHandler.session.pack;\n  const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n  if (adjustedAttributes.group > 1) {\n    const result = inferenceHandler.run(\n      createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes),\n      inputs,\n    );\n    return [result];\n  } else if (isPointwise && packMode) {\n    return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n  } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n    return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n  } else {\n    return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n  }\n};\n\nconst conv2DUnpackedPointwise = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): Tensor => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const outputShape = calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n  const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n  const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n  const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n  const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n  return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n};\n\nconst conv2DUnpacked = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): Tensor => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const outputShape = calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n  const xIm2Col = inferenceHandler.run(\n    createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n    [inputs[0]],\n  );\n\n  const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n  const output = inferenceHandler.run(\n    createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes),\n    dotProductInputs,\n  );\n  return output;\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n    inputs[0].dims,\n    attributes.strides,\n    attributes.dilations,\n    kernelShape,\n    pads,\n    attributes.autoPad,\n  );\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, { kernelShape, pads, cacheKey: attributes.cacheKey });\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({\n    autoPad,\n    dilations,\n    group,\n    kernelShape,\n    pads,\n    strides,\n    ...activationAttributes,\n  });\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { InferenceHandler } from '../../../backend';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { ConvAttributes } from './conv';\nimport { getActivationSnippet, parseInternalActivationAttributes } from './fuse-utils';\n\nconst computeTotalPad = (\n  inDim: number,\n  stride: number,\n  adj: number,\n  kernel: number,\n  dilation: number,\n  outSize: number,\n) => (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  dilations: readonly number[],\n  autoPad: string,\n  pads: number[],\n  strides: readonly number[],\n  outputPadding: readonly number[],\n  outputShape: number[],\n) => {\n  const spatialRank = inputShape.length - 2;\n  const updateShape = outputShape.length === 0;\n  for (let i = 0; i < spatialRank; ++i) {\n    const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n    const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n    distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n    if (updateShape) {\n      outputShape.push(\n        strides[i] * (inputShape[i + 2] - 1) +\n          outputPadding[i] +\n          (kernelShape[i] - 1) * dilations[i] +\n          1 -\n          pads[i] -\n          pads[i + spatialRank],\n      );\n    }\n  }\n};\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> = (\n  inferenceHandler: InferenceHandler,\n  inputs: Tensor[],\n  attributes: ConvTransposeAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes); // currently will fail if not convTranspose2D\n  return convTranspose2d(inferenceHandler, inputs, attributes);\n};\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConvTransposeAttributes,\n): Tensor[] => {\n  const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n  return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n};\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias\n    ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n    : [TextureType.unpacked, TextureType.unpacked],\n  cacheHint,\n});\n\nconst createUnpackedConvTransposeProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  metadata: ProgramMetadata,\n  attributes: ConvTransposeAttributes,\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n  const xShape = inputs[0].dims;\n  const wShape = inputs[1].dims;\n  const outputChannelsPerGroup = wShape[1];\n  const inputChannelsPerGroup = wShape[0] / attributes.group;\n  const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const { activationFunction, applyActivation } = getActivationSnippet(attributes);\n\n  const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nconst createUnpackedConvTransposeProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvTransposeAttributes,\n): ProgramInfoLoader => {\n  const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n  return {\n    ...metadata,\n    get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes),\n  };\n};\n\nconst convTranspose2DUnpacked = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvTransposeAttributes,\n): Tensor => {\n  const result = inferenceHandler.run(\n    createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes),\n    inputs,\n  );\n  return result;\n};\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n    inputShape,\n    kernelShape,\n    attributes.dilations,\n    attributes.autoPad,\n    pads,\n    attributes.strides,\n    attributes.outputPadding,\n    outputShape,\n  );\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, { kernelShape, pads, outputShape, cacheKey: attributes.cacheKey });\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> = (\n  node: Graph.Node,\n): ConvTransposeAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const outputPadding = attributes.getInts('output_padding', [0, 0]);\n  const outputShape = attributes.getInts('output_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({\n    autoPad,\n    dilations,\n    group,\n    kernelShape,\n    outputPadding,\n    outputShape,\n    pads,\n    strides,\n    ...activationAttributes,\n  });\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: TransposeAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...transposeProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> = (\n  node: Graph.Node,\n): TransposeAttributes => createAttributeWithCacheKey({ perm: node.attributes.getInts('perm', []) });\n\nconst createTransposeProgramInfo = (\n  _inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  perm: number[],\n): ProgramInfo => {\n  const inputShape = input.dims;\n  perm = getAdjustedPerm(inputShape, perm);\n  const unpackedOutputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n  const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n  return {\n    ...transposeProgramMetadata,\n    output: { dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...inputShape.keys()].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nimport { transpose, TransposeAttributes } from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR' | 'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: DepthToSpaceAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const blocksize = attributes.blocksize;\n  const blocksizeSqr = blocksize * blocksize;\n  const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n  const firstReshapeShape =\n    attributes.mode === 'DCR'\n      ? [\n          inputs[0].dims[0],\n          blocksize,\n          blocksize,\n          inputs[0].dims[1] / blocksizeSqr,\n          inputs[0].dims[2],\n          inputs[0].dims[3],\n        ]\n      : [\n          inputs[0].dims[0],\n          inputs[0].dims[1] / blocksizeSqr,\n          blocksize,\n          blocksize,\n          inputs[0].dims[2],\n          inputs[0].dims[3],\n        ];\n\n  // const transpose = new WebGLTranspose();\n  // const attributes = new Attribute(undefined);\n  // attributes.set('perm', 'ints', transposePerm);\n  // transpose.initialize(attributes);\n\n  // First reshape\n  const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n  // transpose\n  const transposeAttributes: TransposeAttributes = { perm: transposePerm, cacheKey: `${transposePerm}` };\n  const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n  // Second reshape\n  const secondReshapeShape = [\n    inputs[0].dims[0],\n    inputs[0].dims[1] / blocksizeSqr,\n    inputs[0].dims[2] * blocksize,\n    inputs[0].dims[3] * blocksize,\n  ];\n  const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n  return [result];\n};\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> = (\n  node: Graph.Node,\n): DepthToSpaceAttributes => {\n  // processing node attributes\n  const blocksize = node.attributes.getInt('blocksize');\n  if (blocksize < 1) {\n    throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n  }\n  const mode = node.attributes.getString('mode', 'DCR');\n  if (mode !== 'DCR' && mode !== 'CRD') {\n    throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n  }\n  return { mode, blocksize };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  axis: number,\n): Tensor[] => {\n  validateInputs(inputs, axis);\n\n  const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n  return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n};\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n  node.attributes.getInt('axis', 1); // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceHandler } from './backend';\nimport { Graph } from './graph';\nimport { Tensor } from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node | unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] = [\n  'float32',\n  'float64',\n  'int32',\n  'int16',\n  'int8',\n  'uint16',\n  'uint32',\n  'uint8',\n];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { NUMBER_TYPES, OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: GatherAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes.axis);\n  const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n  return [output];\n};\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n  createAttributeWithCacheKey({ axis: node.attributes.getInt('axis', 0) });\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  axis: number,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims.slice();\n  const indexDataShape = inputs[1].dims.slice();\n  const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n  axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n  const indexCopyOps: string[] = [];\n  for (let i = 0; i < outputShape.length; i++) {\n    // outputShape is divided into three parts: A, B, C\n    // |0        axis|  axis + indexDataShape.length |          end|\n    // |     A       |             B                 |      C      |\n    //\n    // inputIdx: [A, inputs[1][B], C]\n    if (i < axis) {\n      // A\n      outputShape[i] = inputShape[i];\n      indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n    } else {\n      if (i < axis + indexDataShape.length) {\n        // B\n        outputShape[i] = indexDataShape[i - axis];\n        indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n      } else {\n        // C\n        outputShape[i] = inputShape[i - indexDataShape.length + 1]; // skip 1 for axis\n        indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n      }\n    }\n  }\n\n  const orank = outputShape.length || 1;\n  const irank = inputShape.length;\n  const iDrank = indexDataShape.length || 1;\n  const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst createGatherProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: GatherAttributes,\n): ProgramInfoLoader => {\n  const metadata = { ...gatherProgramMetadata, cacheHint: attributes.cacheKey };\n  return { ...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis) };\n};\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { GemmUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean; // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: GemmAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes);\n  const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n  return [output];\n};\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({ transA, transB, alpha, beta, isOptionalC });\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n  parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n  parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes:\n      inputs.length === 3\n        ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n        : [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey,\n  };\n\n  return { ...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes) };\n};\n\nconst createGemmProgramInfo = (\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  attributes: GemmAttributes,\n): ProgramInfo => {\n  const aShape = inputs[0].dims.slice();\n  const bShape = inputs[1].dims.slice();\n  const [M, N] = GemmUtil.getShapeOfGemmResult(\n    aShape,\n    attributes.transA,\n    bShape,\n    attributes.transB,\n    inputs.length === 3 ? inputs[2].dims : undefined,\n  );\n  const outputShape = [M, N];\n  if (!outputShape) {\n    throw new Error(\"Can't use gemm on the given tensors\");\n  }\n  let sharedDim = aShape[aShape.length - 1];\n  let line = '';\n  if (attributes.transA) {\n    sharedDim = aShape[0];\n  }\n  if (attributes.transA && attributes.transB) {\n    line = 'value += _A_T(a) * _B_T(b);';\n  } else if (attributes.transA && !attributes.transB) {\n    line = 'value += _A_T(a) * _B(b);';\n  } else if (!attributes.transA && attributes.transB) {\n    line = 'value += _A(a) * _B_T(b);';\n  } else if (!attributes.transA && !attributes.transB) {\n    line = 'value += _A(a) * _B(b);';\n  }\n  const rank = outputShape.length;\n  const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n  const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n  const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n  const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    variables: [\n      { name: 'alpha', type: 'float', data: attributes.alpha },\n      { name: 'beta', type: 'float', data: attributes.beta },\n    ],\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if (\n    (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n    (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n    (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')\n  ) {\n    throw new Error('Invalid input type.');\n  }\n\n  if (inputs[0].type !== inputs[1].type || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ImageScalerAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n  return [output];\n};\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> = (\n  node: Graph.Node,\n): ImageScalerAttributes => {\n  const scale = node.attributes.getFloat('scale');\n  const bias = node.attributes.getFloats('bias');\n  return createAttributeWithCacheKey({ scale, bias });\n};\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  attributes: ImageScalerAttributes,\n): ProgramInfo => {\n  const outputShape = inputs[0].dims.slice();\n  const rank = outputShape.length;\n  const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n  const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    variables: [\n      { name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias },\n      { name: 'scale', type: 'float', data: attributes.scale },\n    ],\n    shaderSource,\n  };\n};\n\nconst createImageScalerProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ImageScalerAttributes,\n): ProgramInfoLoader => {\n  const metadata = { ...imageScalerProgramMetadata, cacheHint: attributes.cacheKey };\n  return { ...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes) };\n};\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push('\\t' + `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push('\\t' + `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push('\\t' + `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push('\\t' + '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  epsilon: number,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n  const output = inferenceHandler.run(\n    createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n    [inputs[0], meanAndVariance, inputs[1], inputs[2]],\n  );\n  return [output];\n};\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n  node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension },\n    shaderSource,\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input),\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  input: Tensor,\n  epsilon: number,\n  meanAndVarianceShape: readonly number[],\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [textureWidth, textureHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    meanAndVarianceShape,\n    TextureType.packedLastDimension,\n  );\n  const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n  const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n  return {\n    ...metadata,\n    output: { dims: input.dims, type: input.type, textureType: TextureType.unpacked },\n    variables: [{ name: 'epsilon', type: 'float', data: epsilon }],\n    shaderSource,\n  };\n};\n\nconst createComputeOutputProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  epsilon: number,\n  meanAndVarianceShape: readonly number[],\n): ProgramInfoLoader => {\n  const metadata = { ...computeOutputProgramMetadata, cacheHint: `${epsilon}` };\n  return {\n    ...metadata,\n    get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape),\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if (\n    (X.type !== 'float32' && X.type !== 'float64') ||\n    (scale.type !== 'float32' && scale.type !== 'float64') ||\n    (B.type !== 'float32' && B.type !== 'float64')\n  ) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, TextureType } from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: LrnAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  // if (inferenceHandler.session.pack) {\n  //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n  //   inputs)];\n  // } else {\n  return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n  //}\n};\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({ alpha, beta, bias, size });\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: { dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return { ...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes) };\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { getGlsl, Glsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: PadAttributes,\n): Tensor[] => {\n  validateInputsV2(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...padProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({ mode, value, pads });\n};\n\nexport const padV11: OperatorImplementation<string> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  mode: string,\n): Tensor[] => {\n  validateInputsV11(inputs);\n  const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n  return padV2(inferenceHandler, [inputs[0]], attrubutes);\n};\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n  node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  mode: string,\n): PadAttributes => {\n  if (\n    !inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n    (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))\n  ) {\n    throw new Error('dynamic pad attributes are not allowed');\n  }\n\n  const pads = Array.from(inputs[1].integerData);\n  const value = inputs.length >= 3 ? inputs[2].floatData[0] : 0.0;\n\n  return createAttributeWithCacheKey({ mode, pads, value });\n};\n\nconst createPadProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  attributes: PadAttributes,\n): ProgramInfo => {\n  const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n  const rank = outputShape.length;\n  const padFunction = getPadFunction(inferenceHandler, input, attributes);\n  const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n  return {\n    name: 'Pad',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant = (\n  glsl: Glsl,\n  shape: readonly number[],\n  strides: readonly number[],\n  width: number,\n  height: number,\n  pads: number[],\n  value: number,\n): string => {\n  const rank = shape.length;\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n  }\n  return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n};\n\nconst getPadReflect = (\n  glsl: Glsl,\n  shape: readonly number[],\n  strides: readonly number[],\n  width: number,\n  height: number,\n  pads: number[],\n): string => {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n  }\n  return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n};\n\nconst getPadEdge = (\n  glsl: Glsl,\n  shape: readonly number[],\n  strides: readonly number[],\n  width: number,\n  height: number,\n  pads: number[],\n): string => {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n  }\n  return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { PoolConvUtil, ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramMetadata, TextureType } from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: AveragePoolAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const metadata = {\n    name: 'AveragePool',\n    inputNames: ['X'],\n    inputTypes: [TextureType.unpacked],\n    cacheHint: attributes.cacheKey,\n  };\n  const output = inferenceHandler.run(\n    { ...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes) },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> = (\n  node: Graph.Node,\n): AveragePoolAttributes => {\n  const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n  const ceilMode = node.attributes.getInt('ceil_mode', 0);\n  const countIncludePad = node.attributes.getInt('count_include_pad', 0) === 0 ? false : true;\n  const kernelShape = node.attributes.getInts('kernel_shape');\n  const strides = node.attributes.getInts('strides', []);\n  const pads = node.attributes.getInts('pads', []);\n\n  // TODO: support attribute 'ceil_mode'\n  if (ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({ autoPad, ceilMode, countIncludePad, kernelShape, strides, pads });\n};\n\nconst createAveragePoolProgramInfo = (\n  inputs: Tensor[],\n  metadata: ProgramMetadata,\n  isGlobalOperator: boolean,\n  attributes: AveragePoolAttributes,\n): ProgramInfo => {\n  const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(\n    inputs,\n    attributes,\n    isGlobalOperator,\n  );\n  const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n  const op1 = 'value += _X(x);';\n  let op2 = '';\n  if (adjustedAttributes.countIncludePad) {\n    op2 += `value /= float(${kernelSize});`;\n  } else {\n    op2 += `value /= float(${kernelSize} - pad);`;\n  }\n  const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n  const shaderSource = `\n        ${poolingCode}\n      `;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: AveragePoolAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const metadata = {\n    name: 'GlobalAveragePool',\n    inputNames: ['X'],\n    inputTypes: [TextureType.unpacked],\n    cacheHint: `${attributes.countIncludePad}`,\n  };\n  const output = inferenceHandler.run(\n    { ...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes) },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> = (\n  node: Graph.Node,\n): AveragePoolAttributes => {\n  const countIncludePad = node.attributes.getInt('count_include_pad', 0) === 0 ? false : true;\n  return createAttributeWithCacheKey({\n    autoPad: '',\n    ceilMode: 0,\n    countIncludePad,\n    kernelShape: [],\n    strides: [],\n    pads: [],\n  });\n};\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: MaxPoolAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const metadata = {\n    name: 'MaxPool',\n    inputNames: ['X'],\n    inputTypes: [TextureType.unpacked],\n    cacheHint: attributes.cacheKey,\n  };\n  const output = inferenceHandler.run(\n    { ...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes) },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> = (\n  node: Graph.Node,\n): MaxPoolAttributes => {\n  const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n  const ceilMode = node.attributes.getInt('ceil_mode', 0);\n  const kernelShape = node.attributes.getInts('kernel_shape');\n  const strides = node.attributes.getInts('strides', []);\n  const pads = node.attributes.getInts('pads', []);\n  const storageOrder = node.attributes.getInt('storage_order', 0);\n  const dilations = node.attributes.getInts('dilations', []);\n\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({\n    autoPad,\n    ceilMode,\n    countIncludePad: false,\n    kernelShape,\n    strides,\n    pads,\n    storageOrder,\n    dilations,\n  });\n};\n\nconst createMaxPoolProgramInfo = (\n  inputs: Tensor[],\n  metadata: ProgramMetadata,\n  isGlobalOperator: boolean,\n  attributes: MaxPoolAttributes,\n): ProgramInfo => {\n  const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(\n    inputs,\n    attributes,\n    isGlobalOperator,\n  );\n  const op1 = `\n      value = max(_X(x), value);\n    `;\n  const op2 = '';\n  const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n  const shaderSource = `\n      ${poolingCode}\n    `;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = (\n  inputs: Tensor[],\n  attributes: AveragePoolAttributes | MaxPoolAttributes,\n  isGlobalOperator: boolean,\n): [AveragePoolAttributes | MaxPoolAttributes, number[]] => {\n  const inputShape = inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n  const outputShape = PoolConvUtil.computePoolOutputShape(\n    isGlobalOperator,\n    inputShape,\n    strides,\n    dilations,\n    kernelShape,\n    pads,\n    attributes.autoPad,\n  );\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, { kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey });\n  } else {\n    Object.assign(newAttributes, { kernelShape, strides, pads, cacheKey: attributes.cacheKey });\n  }\n  return [newAttributes, outputShape];\n};\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: '',\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...globalMaxPoolMetadata,\n      get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode = (\n  inputDims: readonly number[],\n  attributes: AveragePoolAttributes,\n  op1: string,\n  op2: string,\n  start: string,\n): string => {\n  const rank = inputDims.length;\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimW = inputDims[rank - 1];\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n    } else {\n      codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimH = inputDims[rank - 2];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n      } else {\n        codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n      }\n      codeHEnd = `\n          }\n        `;\n    }\n\n    const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n    return poolingCode;\n  } else {\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\n    const copyInputDims = copyArray(inputDims, 'inputDims');\n    const copyPads = copyArray(attributes.pads, 'pads');\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n    const copyStrides = copyArray(attributes.strides, 'strides');\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n    } else {\n      padCode = `\n          }\n          ${op1}\n        `;\n    }\n    const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n    return poolingCode;\n  }\n};\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { NUMBER_TYPES, OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramMetadata, TextureType } from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n  name: string,\n  reduceOp: ReduceOp,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const reduceProgramMetadata = {\n    name,\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n    {\n      ...reduceProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({ axes, keepDims });\n};\n\nconst createReduceProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n  _name: string,\n  reduceOp: ReduceOp,\n  reduceProgramMetadata: ProgramMetadata,\n): ProgramInfo => {\n  const outputShape: number[] = [];\n  const iRank = inputs[0].dims.length || 1;\n\n  const idxCopy = []; // copy output indexes to input indexes\n\n  const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n  const ops = reduceOp(inputs, axes);\n  let reduceOps = ops[1];\n\n  for (let k = 0; k < inputs[0].dims.length; k++) {\n    // if this axis is reduced\n    if (axes.indexOf(k) >= 0 || axes.length === 0) {\n      if (attributes.keepDims) {\n        outputShape.push(1);\n      } // else { remove the axis from outputShape; }\n\n      // loop over the d-th axis\n      reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n    } else {\n      idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n      outputShape.push(inputs[0].dims[k]);\n    }\n  }\n\n  const oRank = outputShape.length || 1;\n\n  const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n  return {\n    ...reduceProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n};\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`]; // ensure real number with `.`\n  };\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n};\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`); // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n  };\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n};\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`); // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n  };\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n};\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n};\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n};\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: UpsampleAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes);\n  const output = inferenceHandler.run(\n    {\n      ...upsampleProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> = (\n  node: Graph.Node,\n): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> = (\n  node: Graph.Node,\n): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = opset >= 10;\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n    opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if (\n    [\n      'asymmetric',\n      'pytorch_half_pixel',\n      'tf_half_pixel_for_nn',\n      'align_corners',\n      'tf_crop_and_resize',\n      'half_pixel',\n    ].indexOf(coordinateTransformMode) === -1\n  ) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = coordinateTransformMode === 'tf_crop_and_resize';\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n    mode === 'nearest' && opset >= 11 ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n    opset < 11 ? true : mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor';\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx,\n  });\n};\n\nconst createUpsampleProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: UpsampleAttributes,\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [inputWidth, inputHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    inputs[0].dims,\n    TextureType.unpacked,\n  );\n\n  const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n  const [outputWidth, outputHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    outputShape,\n    TextureType.unpacked,\n  );\n  const dim = outputShape.length;\n\n  const outputPitches = new Array<number>(dim);\n  const inputPitches = new Array<number>(dim);\n  let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n  for (let d = dim - 1; d >= 0; d--) {\n    outputPitches[d] = d === dim - 1 ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n    inputPitches[d] = d === dim - 1 ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n    precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n  }\n  const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n  const shaderSource =\n    attributes.mode === 'nearest'\n      ? // nearest\n        `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }`\n      : dim === 4\n        ? // bilinear 4D\n          `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }`\n        : // bilinear 2D\n          `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n  return {\n    ...upsampleProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n    variables: [\n      {\n        name: 'scales',\n        type: 'int',\n        arrayLength: attributes.scales.length,\n        data: attributes.scales.map((x) => Math.ceil(x)),\n      },\n    ],\n  };\n};\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (\n    !inputs ||\n    (attribute.opset < 9 && inputs.length !== 1) ||\n    (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n    (attribute.opset >= 11 && inputs.length < 2)\n  ) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\nimport { getCoordsDataType } from '../utils';\n\nimport { unpackFromChannel } from './packing-utils';\nimport { parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs } from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: UpsampleAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes);\n  const output = inferenceHandler.run(\n    {\n      ...resizeProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> = (\n  node: Graph.Node,\n): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> = (\n  node: Graph.Node,\n): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: UpsampleAttributes,\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n  const isSame = scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n  if (isSame) {\n    return {\n      ...resizeProgramMetadata,\n      output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.packed },\n      hasMain: true,\n      shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`,\n    };\n  }\n\n  const dim = outputShape.length;\n  if (dim < 2) {\n    throw new Error(`output dimension should be at least 2, but got ${dim}`);\n  }\n\n  const outputHeight = outputShape[dim - 2];\n  const outputWidth = outputShape[dim - 1];\n\n  const inputShape = inputs[0].dims;\n  if (dim !== inputShape.length) {\n    throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n  }\n  const inputHeight = inputShape[dim - 2];\n  const inputWidth = inputShape[dim - 1];\n\n  const scalesHeight = scales[dim - 2];\n  const scalesWidth = scales[dim - 1];\n\n  let getSourceFracIndex = '';\n\n  if (attributes.mode !== 'linear') {\n    // TODO: support other modes\n    throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n  }\n  switch (attributes.coordinateTransformMode) {\n    case 'asymmetric':\n      getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n      break;\n    case 'half_pixel':\n      getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n      break;\n    case 'pytorch_half_pixel':\n      getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n      break;\n    case 'align_corners':\n      getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n      break;\n    default:\n      // TODO:supporting other coordinateTransformModes\n      throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n  }\n\n  const coordsDataType = getCoordsDataType(dim);\n  const unpackChannel = unpackFromChannel();\n  const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n              scalesWidth\n            }));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n  return {\n    ...resizeProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.packed },\n    hasMain: true,\n    shaderSource,\n  };\n};\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[] | undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || xDims.map((dim, i) => Math.floor(dim * scales[i]));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize = (\n  yDims: readonly number[],\n  xDims: readonly number[],\n  mode: string,\n  isResize: boolean,\n): number[] => {\n  const length = xDims.length;\n  const scales = new Array<number>(length);\n\n  for (let i = 0, end = length; i < end; i++) {\n    if (xDims[i] === 0) {\n      if (yDims[i] !== 0) {\n        throw new Error('Input dim is zero but required output dim is non-zero.');\n      }\n      scales[i] = 1;\n    } else {\n      scales[i] = yDims[i] / xDims[i];\n    }\n  }\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const shape = (_inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { NUMBER_TYPES, OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SliceAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...sliceProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({ starts, ends, axes });\n};\n\nconst createSliceProgramInfo = (\n  _inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  attributes: SliceAttributes,\n): ProgramInfo => {\n  const axes = attributes.axes.length === 0 ? input.dims.slice(0).map((_val, i) => i) : attributes.axes;\n  const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n  const starts = attributes.starts.map((start, i) => {\n    if (start > input.dims[normalizedAxes[i]] - 1) {\n      return input.dims[normalizedAxes[i]];\n    }\n    return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n  });\n  const ends = attributes.ends.map((end, i) => {\n    if (end > input.dims[normalizedAxes[i]] - 1) {\n      return input.dims[normalizedAxes[i]];\n    }\n    return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n  });\n\n  const outputShape = input.dims.slice();\n\n  const sliceOps: string[] = [];\n  for (let i = 0; i < normalizedAxes.length; i++) {\n    outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n    if (starts[i] > 0) {\n      sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n    } // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n  }\n\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n  return {\n    ...sliceProgramMetadata,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n    {\n      ...sliceProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes),\n    },\n    [inputs[0]],\n  );\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n): SliceAttributes => {\n  if (\n    !inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n    !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n    (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n    (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))\n  ) {\n    throw new Error('dynamic slice attributes are not allowed');\n  }\n\n  if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n    throw new Error('currently non-1 steps is not supported for Slice');\n  }\n\n  const starts = Array.from(inputs[1].integerData);\n  const ends = Array.from(inputs[2].integerData);\n  const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n  const cacheKey = `${axes};${starts};${ends}`;\n  return { starts, ends, axes, cacheKey };\n};\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nimport { transpose, TransposeAttributes } from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SoftmaxAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const inputShape = inputs[0].dims.slice();\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n  const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n  const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n  const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n  return output;\n};\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> = (\n  node: Graph.Node,\n): SoftmaxAttributes => createAttributeWithCacheKey({ axis: node.attributes.getInt('axis', 1) });\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> = (\n  node: Graph.Node,\n): SoftmaxAttributes => createAttributeWithCacheKey({ axis: node.attributes.getInt('axis', -1) });\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SoftmaxAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const inputShape = inputs[0].dims.slice();\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n  const rank = inputShape.length;\n\n  const isTransposeRequired = axis !== rank - 1 ? true : false;\n  const transposedInputShape: number[] = [];\n  let perm: number[] = [];\n  let transposedInputs: Tensor[] = [];\n  let transposeAttribute: TransposeAttributes;\n\n  if (isTransposeRequired) {\n    perm = Array.from({ length: rank }).map((_, i) => i);\n\n    // swap the innermost dim with the dim corresponding to axis\n    perm[axis] = rank - 1;\n    perm[rank - 1] = axis;\n\n    perm.map((p) => transposedInputShape.push(inputShape[p]));\n\n    transposeAttribute = createAttributeWithCacheKey({ perm });\n    transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n  }\n\n  const logicalRowCount = isTransposeRequired\n    ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1)\n    : ShapeUtil.sizeToDimension(inputShape, rank - 1);\n  const featureCount = isTransposeRequired\n    ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1)\n    : ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n  const output = computeSoftmax(\n    inferenceHandler,\n    isTransposeRequired ? transposedInputs : inputs,\n    attributes,\n    logicalRowCount,\n    featureCount,\n  );\n\n  if (isTransposeRequired) {\n    const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n    return reversedOutput;\n  } else {\n    return output;\n  }\n};\n\nconst computeSoftmax = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SoftmaxAttributes,\n  logicalRowCount: number,\n  featureCount: number,\n): Tensor[] => {\n  const computeMaxProgramInfo = createComputeMaxProgramInfo(\n    inferenceHandler,\n    inputs[0],\n    logicalRowCount,\n    featureCount,\n    [logicalRowCount],\n  );\n  const max = inferenceHandler.run(\n    { ...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo },\n    inputs,\n  );\n\n  const computeScaleProgramInfo = createComputScaleProgramInfo(\n    inferenceHandler,\n    inputs[0],\n    logicalRowCount,\n    featureCount,\n    computeMaxProgramInfo.output.dims,\n    [logicalRowCount],\n  );\n  const scale = inferenceHandler.run(\n    { ...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo },\n    [inputs[0], max],\n  );\n\n  const softMaxProgramInfo = createSoftMaxProgramInfo(\n    inferenceHandler,\n    inputs[0],\n    logicalRowCount,\n    featureCount,\n    computeMaxProgramInfo.output.dims,\n    computeScaleProgramInfo.output.dims,\n  );\n  const output = inferenceHandler.run(\n    { ...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo },\n    [inputs[0], max, scale],\n  );\n  return [output];\n};\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  logicalRowCount: number,\n  featureCount: number,\n  outputShape: number[],\n): ProgramInfo => {\n  const [textureWidth, textureHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    input.dims,\n    TextureType.unpacked,\n  );\n  const rank = outputShape.length;\n\n  if (logicalRowCount < 1 || featureCount < 1) {\n    throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n  }\n\n  if (outputShape.length !== 1) {\n    throw new Error('Dimensionality of the output should be 1');\n  }\n\n  if (outputShape[0] !== logicalRowCount) {\n    throw new Error('Shape of the output should be equal to logical row count');\n  }\n\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n  return {\n    ...softmaxComputeMaxProgramMetadata,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  logicalRowCount: number,\n  featureCount: number,\n  maxElementPerLogicalRow: readonly number[],\n  outputShape: number[],\n): ProgramInfo => {\n  const [textureWidth, textureHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    input.dims,\n    TextureType.unpacked,\n  );\n  const rank = outputShape.length;\n\n  if (logicalRowCount < 1 || featureCount < 1) {\n    throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n  }\n\n  if (outputShape.length !== 1) {\n    throw new Error('Dimensionality of the output should be 1');\n  }\n\n  if (outputShape[0] !== logicalRowCount) {\n    throw new Error('Shape of the output should be equal to logical row count');\n  }\n\n  if (maxElementPerLogicalRow.length !== 1) {\n    throw new Error('Dimensionality of the intermediate results should be 1');\n  }\n\n  if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n    throw new Error('Shape of the intermediate results should be equal to logical row count');\n  }\n\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n  return {\n    ...softmaxComputeScaleProgramMetadata,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst createSoftMaxProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  logicalRowCount: number,\n  featureCount: number,\n  maxElementPerLogicalRow: readonly number[],\n  normalizationPerLogicalRow: readonly number[],\n): ProgramInfo => {\n  const [textureWidth, textureHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    input.dims,\n    TextureType.unpacked,\n  );\n  const rank = input.dims.length;\n\n  if (logicalRowCount < 1 || featureCount < 1) {\n    throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n  }\n\n  if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n    throw new Error('Dimensionality of the intermediate results should be 1');\n  }\n\n  if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n    throw new Error('Shape of the intermediate results should be equal to logical row count');\n  }\n\n  const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n  return {\n    ...softmaxProgramMetadata,\n    output: { dims: input.dims, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil, SplitUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SplitAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n  const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n  const output: Tensor[] = [];\n  for (let i = 0; i < count; ++i) {\n    output.push(\n      inferenceHandler.run(\n        {\n          ...splitProgramMetadata,\n          cacheHint: `${attributes.cacheKey};${i}`,\n          get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i),\n        },\n        inputs,\n      ),\n    );\n  }\n\n  return output;\n};\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({ axis, split, numOutputs });\n};\n\nconst getProgramCount = (\n  _inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  axis: number,\n  attributes: SplitAttributes,\n): number => {\n  const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n  return offsets.length;\n};\n\nconst createSplitProgramInfo = (\n  _inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  attributes: SplitAttributes,\n  axis: number,\n  index: number,\n): ProgramInfo => {\n  const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n  const offset = offsets[index];\n  const outputShape = shapes[index];\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n  return {\n    ...splitProgramMetadata,\n    cacheHint: `${attributes.cacheKey}:${index}`,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (\n    inputs[0].type !== 'int8' &&\n    inputs[0].type !== 'uint8' &&\n    inputs[0].type !== 'int16' &&\n    inputs[0].type !== 'uint16' &&\n    inputs[0].type !== 'int32' &&\n    inputs[0].type !== 'uint32' &&\n    inputs[0].type !== 'float32' &&\n    inputs[0].type !== 'float64' &&\n    inputs[0].type !== 'bool'\n  ) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  axes: number[],\n): Tensor[] => {\n  validateInputs(inputs);\n  const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n  const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n  return [output];\n};\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n  node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramMetadata, TextureType } from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((_v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked),\n  };\n\n  const output = inferenceHandler.run(\n    { ...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata) },\n    inputs,\n  );\n  return [output];\n};\n\nconst createSumProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  sumProgramMetadata: ProgramMetadata,\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const outputShape = inputs[0].dims.slice();\n  const sumLine = inputs.map((_v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n  const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n  return {\n    ...sumProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    hasMain: true,\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { NUMBER_TYPES } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramMetadata, TextureType } from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n    { ...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata) },\n    inputs,\n  );\n  return [output];\n};\n\nconst createTileProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  tileProgramMetadata: ProgramMetadata,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims.slice();\n  const outputShape = new Array(inputShape.length);\n\n  const tileOps: string[] = [];\n  for (let i = 0; i < inputShape.length; i++) {\n    outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n    tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n  }\n\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n  return {\n    ...tileProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  axes: number[],\n): Tensor[] => {\n  validateInputs(inputs);\n  const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n  const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n  return [output];\n};\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n  node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { OpSet } from '../../opset';\n\nimport { batchNormalization, parseBatchNormalizationAttributes } from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport { cast, parseCastAttributes } from './ops/cast';\nimport { concat, parseConcatAttributes } from './ops/concat';\nimport { conv, parseConvAttributes } from './ops/conv';\nimport { convTranspose, parseConvTransposeAttributes } from './ops/conv-transpose';\nimport { depthToSpace, parseDepthToSpaceAttributes } from './ops/depth-to-space';\nimport { flatten, parseFlattenAttributes } from './ops/flatten';\nimport { gather, parseGatherAttributes } from './ops/gather';\nimport { gemm, parseGemmAttributesV11, parseGemmAttributesV7 } from './ops/gemm';\nimport { imageScaler, parseImageScalerAttributes } from './ops/image-scaler';\nimport { instanceNormalization, parseInstanceNormalizationAttributes } from './ops/instance-normalization';\nimport { lrn, parseLrnAttributes } from './ops/lrn';\nimport { matMul, parseMatMulAttributes } from './ops/matmul';\nimport { padV11, padV2, parsePadAttributesV11, parsePadAttributesV2 } from './ops/pad';\nimport {\n  averagePool,\n  globalAveragePool,\n  globalMaxPool,\n  maxPool,\n  parseAveragePoolAttributes,\n  parseGlobalAveragePoolAttributes,\n  parseMaxPoolAttributes,\n} from './ops/pool';\nimport {\n  parseReduceAttributes,\n  reduceLogSum,\n  reduceLogSumSquare,\n  reduceMax,\n  reduceMean,\n  reduceMin,\n  reduceProd,\n  reduceSum,\n} from './ops/reduce';\nimport { reshape } from './ops/reshape';\nimport { parseResizeAttributesV10, parseResizeAttributesV11, resize } from './ops/resize-packed';\nimport { shape } from './ops/shape';\nimport { parseSliceAttributes, slice, sliceV10 } from './ops/slice';\nimport { parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13 } from './ops/softmax';\nimport { parseSplitAttributes, split } from './ops/split';\nimport { parseSqueezeAttributes, squeeze, squeezeV13 } from './ops/squeeze';\nimport { sum } from './ops/sum';\nimport { tile } from './ops/tile';\nimport { parseTransposeAttributes, transpose } from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport { parseUnsqueezeAttributes, unsqueeze, unsqueezeV13 } from './ops/unsqueeze';\nimport { parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample } from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10], // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: { [name: string]: { params: Array<{ type: string; name: string } | null>; body: string } } = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n      .split(',')\n      .map((s) => {\n        const tokens = s.trim().split(' ');\n        if (tokens && tokens.length === 2) {\n          return { type: tokens[0], name: tokens[1] };\n        }\n        return null;\n      })\n      .filter((v) => v !== null);\n    inlineDefs[match[2]] = { params, body: match[4] };\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = type ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger } from '../../instrument';\nimport { assert } from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n          'TextureLayout',\n          `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`,\n        );\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n          'TextureLayout',\n          `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`,\n        );\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map((_d, i) =>\n        i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i],\n      );\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n      logShape[3] <= maxTextureSize\n    ) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n      logShape.length === 4 &&\n      logShape[0] <= maxTextureSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTextureSize\n    ) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map((d) => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): { newShape: number[]; keptDims: number[] } {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return { newShape, keptDims };\n}\n\nexport function parseAxisParam(axis: number | number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((_s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n    axis.every((ax) => ax >= -rank && ax < rank),\n    () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`,\n  );\n\n  // Check for only integers\n  assert(axis.every(isInt), () => 'All values in axis param must be integers but ' + `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map((a) => (a < 0 ? rank + a : a));\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ArrayUtil, BroadcastUtil, ShapeUtil } from '../../util';\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\nimport { getGlsl } from './glsl-source';\nimport { squeezeShape } from './texture-layout-strategy';\nimport { TextureLayout } from './types';\nimport {\n  generateShaderFuncNameFromInputSamplerName,\n  generateShaderFuncNameFromInputSamplerNameAtOutCoords,\n  getCoordsDataType,\n  getGlChannels,\n  getSqueezedParams,\n  squeezeInputShape,\n} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet(),\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): { [name: string]: GlslLibRoutine } {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `),\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): { [name: string]: GlslLibRoutine } {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `),\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): { [name: string]: GlslLibRoutine } {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: { [name: string]: GlslLibRoutine } = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] = this.getOutputPacked3DCoords(\n          outShape as [number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): { [name: string]: GlslLibRoutine } {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: { [name: string]: GlslLibRoutine } = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputUnpacked2DCoords(\n          outShape as [number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      case 3:\n        result[funcName] = this.getOutputUnpacked3DCoords(\n          outShape as [number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n          outShape as [number, number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n          outShape as [number, number, number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(_shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches =\n        `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(_shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet = strides\n      .map((stride, i) => {\n        const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n        const line2 =\n          i === strides.length - 1\n            ? `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}`\n            : `index -= ${coordsToCompute[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number],\n  ): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet = strides\n      .map((stride, i) => {\n        const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n        const line2 =\n          i === strides.length - 1\n            ? `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}`\n            : `index -= ${coordsToCompute[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number],\n  ): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet = strides\n      .map((stride, i) => {\n        const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n        const line2 =\n          i === strides.length - 1\n            ? `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}`\n            : `index -= ${coordsToCompute[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number],\n  ): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet = strides\n      .map((stride, i) => {\n        const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n        const line2 =\n          i === strides.length - 1\n            ? `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}`\n            : `index -= ${coordsToCompute[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] = this.getPackedSamplerAtOutputCoords(\n            outCoordFuncName,\n            inputLayout,\n            outputLayout,\n            samplerName,\n          );\n        } else {\n          result[outCoordFuncName] = this.getUnpackedSamplerAtOutputCoords(\n            outCoordFuncName,\n            inputLayout,\n            outputLayout,\n            samplerName,\n          );\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n    funcName: string,\n    inputLayout: TextureLayout,\n    outputLayout: TextureLayout,\n    name: string,\n  ): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map((d) => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((_s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' + 'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n    funcName: string,\n    inputLayout: TextureLayout,\n    outputLayout: TextureLayout,\n    name: string,\n  ): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map((d) => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((_s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, [\n      'coordinates.uvFromFlat',\n      'coordinates.sampleTexture',\n      'coordinates.coordsToOffset',\n    ]);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const { newShape, keptDims } = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, [\n      'coordinates.uvFromFlat',\n      'coordinates.sampleTexture',\n      'coordinates.coordsToOffset',\n    ]);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const { newShape, keptDims } = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(source, [\n      'coordinates.uvFromFlat',\n      'coordinates.sampleTexture',\n      'coordinates.coordsToOffset',\n    ]);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const { newShape, keptDims } = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const { newShape, keptDims } = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(source, [\n      'coordinates.uvFromFlat',\n      'coordinates.sampleTexture',\n      'coordinates.coordsToOffset',\n    ]);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordinates (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): { [name: string]: GlslLibRoutine } {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return { toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset']) };\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(this.getValueFromSingle(name, rank, layout.width, layout.height, false), [\n        `shapeUtils.indicesToOffset${funcName}`,\n        'coordinates.offsetToCoords',\n        'fragcolor.getColorAsFloat',\n      ]);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(this.getValueFromSingle(name, rank, layout.width, layout.height, true), [\n        `shapeUtils.indicesToOffset${funcName}`,\n        'coordinates.offsetToCoords',\n        'fragcolor.getColorAsFloat',\n      ]);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(\n    varName: string,\n    rank: number,\n    width: number,\n    height: number,\n    transpose: boolean,\n  ): string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(\n    varName: string,\n    rank: number,\n    width: number,\n    height: number,\n    transpose: boolean,\n  ): string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return { ...this.encodeFloat32(), ...this.decodeFloat32() };\n  }\n  getCustomTypes(): { [name: string]: string } {\n    return {};\n  }\n  protected encodeFloat32(): { [name: string]: GlslLibRoutine } {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `),\n    };\n  }\n  protected decodeFloat32(): { [name: string]: GlslLibRoutine } {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `),\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): { [name: string]: GlslLibRoutine } {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `),\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): { [name: string]: GlslLibRoutine } {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `),\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\nimport { getGlsl } from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return { ...this.setFragColor(), ...this.getColorAsFloat() };\n  }\n  getCustomTypes(): { [name: string]: string } {\n    return {};\n  }\n  protected setFragColor(): { [name: string]: GlslLibRoutine } {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n        `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n        ['encoding.encode'],\n      ),\n    };\n  }\n  protected getColorAsFloat(): { [name: string]: GlslLibRoutine } {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n        `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n        ['encoding.decode'],\n      ),\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices(),\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): { [name: string]: GlslLibRoutine } {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): { [name: string]: GlslLibRoutine } {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] = new GlslLibRoutine(\n        ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()),\n      );\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] = new GlslLibRoutine(\n        ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()),\n      );\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): { [name: string]: string } {\n    return {};\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return { ...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem() };\n  }\n  protected binaryVecFunctions(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: { [name: string]: string } = { add: '+=', sub: '-=', mul: '*=', div: '/=' };\n    const result: { [name: string]: GlslLibRoutine } = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return { copyVec: new GlslLibRoutine(body) };\n  }\n\n  protected setVecItem(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return { setVecItem: new GlslLibRoutine(body) };\n  }\n  protected getVecItem(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return { getVecItem: new GlslLibRoutine(body) };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { CoordsGlslLib } from './glsl-coordinate-lib';\nimport { GlslContext, GlslLib } from './glsl-definitions';\nimport { EncodingGlslLib } from './glsl-encoding-lib';\nimport { FragColorGlslLib } from './glsl-fragcolor-lib';\nimport { ShapeUtilsGlslLib } from './glsl-shape-utils-lib';\nimport { VecGlslLib } from './glsl-vec-lib';\n\nexport const glslRegistry: { [name: string]: new (context: GlslContext) => GlslLib } = {\n  encoding: EncodingGlslLib,\n  fragcolor: FragColorGlslLib,\n  vec: VecGlslLib,\n  shapeUtils: ShapeUtilsGlslLib,\n  coordinates: CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines } from './glsl-definitions';\nimport { replaceInlines } from './glsl-function-inliner';\nimport { glslRegistry } from './glsl-registered-libs';\nimport { getDefaultFragShaderMain, getFragShaderPreamble } from './glsl-source';\nimport { ProgramInfo, TextureLayout, VariableInfo } from './types';\nimport { WebGLContext } from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: { [name: string]: GlslLib } = {};\n  readonly glslLibRoutineDependencyGraph: { [routineName: string]: GlslLibRoutineNode } = {};\n\n  constructor(\n    glContext: WebGLContext,\n    programInfo: ProgramInfo,\n    inputTextureLayouts: TextureLayout[],\n    outputTextureLayout: TextureLayout,\n  ) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach((classAndRoutine) => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n          `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`,\n        );\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { Logger, Profiler } from '../../instrument';\n\nimport { GlslPreprocessor } from './glsl-preprocessor';\nimport { getVertexShaderSource } from './glsl-source';\nimport { TextureLayoutStrategy } from './texture-layout-strategy';\nimport { Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo } from './types';\nimport { WebGLContext } from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>; // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n    public profiler: Readonly<Profiler>,\n    public glContext: WebGLContext,\n    public textureLayoutStrategy: TextureLayoutStrategy,\n  ) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact | undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event(\n      'op',\n      `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`,\n      () => {\n        const gl = this.glContext.gl;\n        const program = buildArtifact.program;\n        gl.useProgram(program);\n        try {\n          this.bindOutput(output);\n          if (!this.attributesBound) {\n            this.bindAttributes(buildArtifact.attribLocations);\n          }\n          this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n        } catch (err) {\n          Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n          throw err;\n        }\n        this.profiler.event('backend', 'GlContext.draw()', () => {\n          this.glContext.draw();\n        });\n      },\n      this.glContext,\n    );\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach((a) => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n          program,\n          preprocessor.context.programInfo.inputNames,\n          preprocessor.context.programInfo.variables,\n        ),\n        attribLocations: this.getAttribLocations(program),\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose(\n        'ProrgramManager',\n        `FragShader:\n${fragShaderScript}\n`,\n      );\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n      'ProrgramManager',\n      `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`,\n    );\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(\n    uniformLocations: Artifact.UniformLocations,\n    variables: ProgramVariable[],\n    textures: TextureData[],\n  ): void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const { name, type, location, arrayLength } of uniformLocations) {\n      const value = variables.find((v) => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord'),\n    };\n  }\n  getUniformLocations(\n    program: WebGLProgram,\n    samplers?: string[],\n    variables?: VariableInfo[],\n  ): Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({\n          name: sampler,\n          type: 'sampler2D',\n          location: this.getUniformLocation(program, sampler),\n        });\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({ ...variable, location: this.getUniformLocation(program, variable.name) });\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger, Profiler } from '../../instrument';\nimport { Tensor } from '../../tensor';\n\nimport { Encoder, EncoderUsage } from './texture-data-encoder';\nimport { TextureLayoutStrategy } from './texture-layout-strategy';\nimport { TextureData, TextureLayout } from './types';\nimport { WebGLContext } from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n    public glContext: WebGLContext,\n    public layoutStrategy: TextureLayoutStrategy,\n    public profiler: Readonly<Profiler>,\n    private config: TextureManagerConfig,\n  ) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n    dataType: Tensor.DataType,\n    layout: TextureLayout,\n    data?: Tensor.NumberType,\n    usage?: EncoderUsage,\n  ) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === EncoderUsage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string | undefined;\n    let inUseTextures: WebGLTexture[] | undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === EncoderUsage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n        td.texture,\n        td.width,\n        td.height,\n        dataSize,\n        this.toEncoderType(dataType),\n        channels!,\n      );\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>((resolve) => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n        td.texture,\n        td.width,\n        td.height,\n        dataSize,\n        this.toEncoderType(dataType),\n        channels!,\n      );\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach((resolve) => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string | undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(_dataType: Tensor.DataType, data: Tensor.NumberType | undefined): Encoder.DataArrayType | undefined {\n    if (!data) {\n      return undefined;\n    }\n    return data instanceof Float32Array ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SessionHandler } from '../../backend';\nimport { Graph } from '../../graph';\nimport { Logger } from '../../instrument';\nimport { Operator } from '../../operators';\nimport { OpSet, resolveOperator } from '../../opset';\nimport { Session } from '../../session';\nimport { Tensor } from '../../tensor';\nimport { WebGLBackend } from '../backend-webgl';\n\nimport { WebGLInferenceHandler } from './inference-handler';\nimport { WEBGL_OP_RESOLVE_RULES } from './op-resolve-rules';\nimport { ProgramManager } from './program-manager';\nimport { PreferLogicalStrategy, TextureLayoutStrategy } from './texture-layout-strategy';\nimport { TextureManager } from './texture-manager';\nimport { TextureData } from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(\n    public readonly backend: WebGLBackend,\n    public readonly context: Session.Context,\n  ) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(backend.glContext, this.layoutStrategy, this.context.profiler, {\n      reuseTextures: backend.textureCacheMode === 'full',\n    });\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph\n      .getValues()\n      .filter((v) => v.from === -1 && v.tensor)\n      .map((v) => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData | undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach((td) => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach((td) => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return { impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport { DataEncoder, Encoder, EncoderUsage } from './texture-data-encoder';\nimport { repeatedTry } from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync | null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean;\n  resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1 | 2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float | null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float | null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown | null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: { TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum } | null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1 | 2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0, // Level of detail.\n      encoder.internalFormat,\n      width,\n      height,\n      0, // Always 0 in OpenGL ES.\n      encoder.format,\n      encoder.textureType,\n      buffer,\n    );\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n    texture: WebGLTexture,\n    width: number,\n    height: number,\n    encoder: DataEncoder,\n    data: Encoder.DataArrayType,\n  ): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0, // level\n      0, // xoffset\n      0, // yoffset\n      width,\n      height,\n      encoder.format,\n      encoder.textureType,\n      buffer,\n    );\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n    texture: WebGLTexture,\n    width: number,\n    height: number,\n    dataSize: number,\n    dataType: Encoder.DataType,\n    channels: number,\n  ): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${n - gl.TEXTURE0}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(vertexShader: WebGLShader, fragShader: WebGLShader): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case gl.NO_ERROR:\n          return;\n        case gl.INVALID_ENUM:\n          label = 'INVALID_ENUM';\n          break;\n        case gl.INVALID_VALUE:\n          label = 'INVALID_VALUE';\n          break;\n        case gl.INVALID_OPERATION:\n          label = 'INVALID_OPERATION';\n          break;\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case gl.OUT_OF_MEMORY:\n          label = 'OUT_OF_MEMORY';\n          break;\n        case gl.CONTEXT_LOST_WEBGL:\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: EncoderUsage = EncoderUsage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === EncoderUsage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n            this.gl,\n            channels,\n            this.textureHalfFloatExtension!.HALF_FLOAT_OES,\n          );\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0, // upper left\n      -1.0,\n      -1.0,\n      0.0,\n      0.0,\n      0.0, // lower left\n      1.0,\n      1.0,\n      0.0,\n      1.0,\n      1.0, // upper right\n      1.0,\n      -1.0,\n      0.0,\n      1.0,\n      0.0, // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as { RGBA32F: number }).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture | null | undefined;\n    let frameBuffer: WebGLFramebuffer | null | undefined;\n    let vertexShader: WebGLShader | null | undefined;\n    let fragmentShader: WebGLShader | null | undefined;\n    let program: WebGLProgram | null | undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as { RGBA32F: number }).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false,\n      disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return { query, isFencePassed };\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>((resolve) => {\n      void this.addItemToPoll(\n        () => fenceContext.isFencePassed(),\n        () => resolve(),\n      );\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map((x) => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const { resolveFn } = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({ isDoneFn, resolveFn });\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger } from '../../instrument';\n\nimport { WebGLContext } from './webgl-context';\n\nconst cache: { [contextId: string]: WebGLContext } = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl' | 'webgl2'): WebGLContext {\n  let context: WebGLContext | undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl' | 'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false,\n  };\n  let gl: WebGLRenderingContext | null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || (canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n          'GlContextFactory',\n          `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`,\n        );\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: { new (width: number, height: number): HTMLCanvasElement };\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { Backend, SessionHandler } from '../backend';\nimport { Logger } from '../instrument';\nimport { Session } from '../session';\n\nimport { WebGLSessionHandler } from './webgl/session-handler';\nimport { WebGLContext } from './webgl/webgl-context';\nimport { createWebGLContext } from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl' | 'webgl2' | undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl' | 'webgl2' | undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number | undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number | undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly' | 'full' | undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly' | 'full' | undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean | undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean | undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean | undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean | undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      if (!env.webgl.context) {\n        Object.defineProperty(env.webgl, 'context', { value: this.glContext.gl });\n      }\n\n      Logger.verbose(\n        'WebGLBackend',\n        `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n          this.matmulMaxBatchSize\n        }; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`,\n      );\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { WebGLBackend } from './backends/backend-webgl';\nimport { Graph } from './graph';\nimport { Operator } from './operators';\nimport { OpSet } from './opset';\nimport { Session } from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean | Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: { [name: string]: Backend } = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string | readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend | undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n    'initialize' in o &&\n    typeof o.initialize === 'function' && // initialize()\n    'createSessionHandler' in o &&\n    typeof o.createSessionHandler === 'function' && // createSessionHandler()\n    'dispose' in o &&\n    typeof o.dispose === 'function' // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SessionHandler } from './backend';\nimport { Graph } from './graph';\nimport { Logger, Profiler } from './instrument';\nimport { Operator } from './operators';\nimport { Tensor } from './tensor';\n\nclass KernelOp {\n  constructor(\n    public op: Operator,\n    public node: Graph.Node,\n  ) {}\n}\n\nexport class ExecutionPlan {\n  constructor(\n    private graph: Graph,\n    ops: Operator[],\n    private profiler: Readonly<Profiler>,\n  ) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n            !this._values[input] && // not an initialized input\n            this.graph.getInputIndices().indexOf(input) === -1 // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map((i) => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(\n          `number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length\n          } expected: ${graphInputs.length}`,\n        );\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map((i) => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n          'ExecPlan',\n          `Running op:${thisOp.node.name} (${inputTensors\n            .map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`)\n            .join(', ')})`,\n        );\n\n        const outputList = await this.profiler.event('node', thisOp.node.name, async () =>\n          thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context),\n        );\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((_output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor | undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { Tensor } from './tensor';\nimport { decodeUtf8String, LongUtil } from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[] | ortFbs.Attribute[] | null | undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n    key: string,\n    type: Attribute.DataType,\n    defaultValue?: V,\n  ): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto | ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto | ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = value as Array<number | Long | flatbuffers.Long>;\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto\n        ? Tensor.fromProto(value as onnx.ITensorProto)\n        : Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map((value) => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map((value) => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto | ortFbs.Attribute) {\n    return attr instanceof onnx.AttributeProto\n      ? this.getValueNoCheckFromOnnxFormat(attr)\n      : this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Attribute } from './attribute';\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { Tensor } from './tensor';\nimport { LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil } from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto | ortFbs.Graph, initializer?: Graph.Initializer) =>\n    new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number; // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto | ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto | ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto | ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: { dims: ProtoUtil.tensorDimsFromProto(i.dims!) },\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!),\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0; ; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (\n            input === '' &&\n            (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n            nodeProto.opType === 'Resize'\n          ) {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = { shape: { dims }, tensorType: type };\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = { shape: { dims }, tensorType: type };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0; ; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach((i) => {\n      const data = this._allData[i];\n      data._to.forEach((j) => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error(\"from property of the Value object doesn't match index of Node being processed\");\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach((ind) => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach((node) => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specified node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error(\"The Value object doesn't have the current Node in it's 'to' property \");\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error(\"The Node object doesn't have the output Value in it's 'inputs' property \");\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error(\"Dropout nodes's second output should not be referenced by other nodes\");\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set('activation_params', 'floats', [\n                  child.attributes.getFloat('min'),\n                  child.attributes.getFloat('max'),\n                ]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n              child.inputs.length >= 3 &&\n              this._allData[child.inputs[1]].tensor !== undefined &&\n              this._allData[child.inputs[2]].tensor !== undefined\n            ) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0],\n                this._allData[child.inputs[2]].tensor!.floatData[0],\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', child.opType);\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { flatbuffers } from 'flatbuffers';\n\nimport { Graph } from './graph';\nimport { OpSet } from './opset';\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { LongUtil } from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    let onnxError: Error | undefined;\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n        onnxError = e;\n      }\n    }\n\n    try {\n      this.loadFromOrtFormat(buf, graphInitializer);\n    } catch (e) {\n      if (isOrtFormat !== undefined) {\n        throw e;\n      }\n      // Tried both formats and failed (when isOrtFormat === undefined)\n      throw new Error(`Failed to load model as ONNX format: ${onnxError}\\nas ORT format: ${e}`);\n    }\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets = modelProto.opsetImport.map((i) => ({\n      domain: i.domain as string,\n      version: LongUtil.longToNumber(i.version!),\n    }));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({ domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!) });\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { resolveBackend, SessionHandlerType } from './backend';\nimport { ExecutionPlan } from './execution-plan';\nimport { Graph } from './graph';\nimport { Profiler } from './instrument';\nimport { Model } from './model';\nimport { Operator } from './operators';\nimport { Tensor } from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = { profiler: this.profiler, graphInputTypes: [], graphInputDims: [] };\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string | ArrayBuffer | Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const { readFile } = require('node:fs/promises');\n          const buf = await readFile(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer = this.sessionHandler.transformGraph\n        ? (this.sessionHandler as Graph.Initializer)\n        : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor> | Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor> | Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (\n      !this.context.graphInputTypes ||\n      this.context.graphInputTypes.length === 0 ||\n      !this.context.graphInputDims ||\n      this.context.graphInputDims.length === 0\n    ) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n    graphInputDims: Array<readonly number[]>,\n    givenInputs: Tensor[],\n    noneDimSupported: boolean,\n  ) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(\n          `input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${actualDims.join(\n            ',',\n          )}]`,\n        );\n      }\n    }\n  }\n\n  private compareTensorDims(\n    expectedDims: readonly number[],\n    actualDims: readonly number[],\n    noneDimSupported: boolean,\n  ): boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession, InferenceSessionHandler, SessionHandler, Tensor } from 'onnxruntime-common';\n\nimport { Session } from './session';\nimport { Tensor as OnnxjsTensor } from './tensor';\n\nexport class OnnxjsSessionHandler implements InferenceSessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n    feeds: SessionHandler.FeedsType,\n    _fetches: SessionHandler.FetchesType,\n    _options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n          name,\n          new OnnxjsTensor(\n            feed.dims,\n            feed.type as OnnxjsTensor.DataType,\n            undefined,\n            undefined,\n            feed.data as OnnxjsTensor.NumberType,\n          ),\n        );\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport { Backend, InferenceSession, InferenceSessionHandler } from 'onnxruntime-common';\n\nimport { Session } from './onnxjs/session';\nimport { OnnxjsSessionHandler } from './onnxjs/session-handler-inference';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createInferenceSessionHandler(\n    pathOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const isNode = !!(typeof process !== 'undefined' && process.versions && process.versions.node);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/// <reference lib=\"webworker\" />\n\n//\n// * type hack for \"HTMLImageElement\"\n//\n// in typescript, the type of \"HTMLImageElement\" is defined in lib.dom.d.ts, which is conflict with lib.webworker.d.ts.\n// when we use webworker, the lib.webworker.d.ts will be used, which does not have HTMLImageElement defined.\n//\n// we will get the following errors complaining that HTMLImageElement is not defined:\n//\n// ====================================================================================================================\n//\n// ../common/dist/cjs/tensor-factory.d.ts:187:29 - error TS2552: Cannot find name 'HTMLImageElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 187     fromImage(imageElement: HTMLImageElement, options?: TensorFromImageElementOptions):\n// Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n//                                 ~~~~~~~~~~~~~~~~\n//\n// node_modules/@webgpu/types/dist/index.d.ts:83:7 - error TS2552: Cannot find name 'HTMLImageElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 83     | HTMLImageElement\n//          ~~~~~~~~~~~~~~~~\n//\n// ====================================================================================================================\n//\n// `HTMLImageElement` is only used in type declaration and not in real code. So we define it as `unknown` here to\n// bypass the type check.\n\n//\n// * type hack for \"document\"\n//\n// in typescript, the type of \"document\" is defined in lib.dom.d.ts, so it's not available in webworker.\n//\n// we will get the following errors complaining that document is not defined:\n//\n// ====================================================================================================================\n//\n// lib/wasm/wasm-utils-import.ts:7:33 - error TS2584: Cannot find name 'document'. Do you need to change your target\n// library? Try changing the 'lib' compiler option to include 'dom'.\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                   ~~~~~~~~\n//\n// lib/wasm/wasm-utils-import.ts:7:61 - error TS2584: Cannot find name 'document'. Do you need to change your target\n// library? Try changing the 'lib' compiler option to include 'dom'.\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                                               ~~~~~~~~\n//\n// lib/wasm/wasm-utils-import.ts:7:88 - error TS2552: Cannot find name 'HTMLScriptElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                                                                          ~~~~~~~~~~~~~~~~~\n// ====================================================================================================================\n//\n// `document` is used to get the current script URL, which is not available in webworker. This file is served as a\n// \"dual\" file for entries of both webworker and the esm module.\n//\ndeclare global {\n  type HTMLImageElement = unknown;\n  type HTMLScriptElement = { src?: string };\n  const document: undefined | { currentScript?: HTMLScriptElement };\n}\n\n/**\n * @summary\n *\n * This file is served as a \"dual\" file for both entries of the following:\n * - The proxy worker itself.\n *   - When used as a worker, it listens to the messages from the main thread and performs the corresponding operations.\n *   - Should be imported directly using `new Worker()` in the main thread.\n *\n * - The ESM module that creates the proxy worker (as a worker launcher).\n *   - When used as a worker launcher, it creates the proxy worker and returns it.\n *   - Should be imported using `import()` in the main thread, with the query parameter `import=1`.\n *\n * This file will be always compiling into ESM format.\n */\n\nimport type { OrtWasmMessage, SerializableTensorMetadata } from '../proxy-messages.js';\nimport {\n  createSession,\n  copyFromExternalBuffer,\n  endProfiling,\n  extractTransferableBuffers,\n  initEp,\n  initRuntime,\n  releaseSession,\n  run,\n} from '../wasm-core-impl.js';\nimport { initializeWebAssembly } from '../wasm-factory.js';\nimport { scriptSrc } from '../wasm-utils-import.js';\n\nconst WORKER_NAME = 'ort-wasm-proxy-worker';\nconst isProxyWorker = globalThis.self?.name === WORKER_NAME;\n\nif (isProxyWorker) {\n  // Worker thread\n  self.onmessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n    const { type, in: message } = ev.data;\n    try {\n      switch (type) {\n        case 'init-wasm':\n          initializeWebAssembly(message!.wasm).then(\n            () => {\n              initRuntime(message!).then(\n                () => {\n                  postMessage({ type });\n                },\n                (err) => {\n                  postMessage({ type, err });\n                },\n              );\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        case 'init-ep': {\n          const { epName, env } = message!;\n          initEp(env, epName).then(\n            () => {\n              postMessage({ type });\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'copy-from': {\n          const { buffer } = message!;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({ type, out: bufferData } as OrtWasmMessage);\n          break;\n        }\n        case 'create': {\n          const { model, options } = message!;\n          createSession(model, options).then(\n            (sessionMetadata) => {\n              postMessage({ type, out: sessionMetadata } as OrtWasmMessage);\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'release':\n          releaseSession(message!);\n          postMessage({ type });\n          break;\n        case 'run': {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = message!;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== 'cpu')) {\n                postMessage({ type, err: 'Proxy does not support non-cpu tensor location.' });\n              } else {\n                postMessage(\n                  { type, out: outputs } as OrtWasmMessage,\n                  extractTransferableBuffers([...inputs, ...outputs] as SerializableTensorMetadata[]),\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'end-profiling':\n          endProfiling(message!);\n          postMessage({ type });\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({ type, err } as OrtWasmMessage);\n    }\n  };\n}\n\nexport default isProxyWorker\n  ? null\n  : (urlOverride?: string) =>\n      new Worker(urlOverride ?? scriptSrc!, { type: BUILD_DEFS.IS_ESM ? 'module' : 'classic', name: WORKER_NAME });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport type { OrtWasmModule } from './wasm-types';\nimport { isNode } from './wasm-utils-env';\n\n/**\n * The classic script source URL. This is not always available in non ESModule environments.\n *\n * In Node.js, this is undefined.\n */\nexport const scriptSrc =\n  // if Nodejs, return undefined\n  isNode\n    ? undefined\n    : // if It's ESM, use import.meta.url\n      (BUILD_DEFS.ESM_IMPORT_META_URL ??\n      // use `document.currentScript.src` if available\n      (typeof document !== 'undefined'\n        ? (document.currentScript as HTMLScriptElement)?.src\n        : // use `self.location.href` if available\n          typeof self !== 'undefined'\n          ? self.location?.href\n          : undefined));\n\n/**\n * The origin of the current location.\n *\n * In Node.js, this is undefined.\n */\nconst origin = isNode || typeof location === 'undefined' ? undefined : location.origin;\n\n/**\n * Check if the given filename with prefix is from the same origin.\n */\nconst isSameOrigin = (filename: string, prefixOverride?: string) => {\n  try {\n    const baseUrl = prefixOverride ?? scriptSrc;\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.origin === origin;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Normalize the inputs to an absolute URL with the given prefix override. If failed, return undefined.\n */\nconst normalizeUrl = (filename: string, prefixOverride?: string) => {\n  const baseUrl = prefixOverride ?? scriptSrc;\n  try {\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.href;\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * Create a fallback URL if an absolute URL cannot be created by the normalizeUrl function.\n */\nconst fallbackUrl = (filename: string, prefixOverride?: string) => `${prefixOverride ?? './'}${filename}`;\n\n/**\n * This helper function is used to preload a module from a URL.\n *\n * If the origin of the worker URL is different from the current origin, the worker cannot be loaded directly.\n * See discussions in https://github.com/webpack-contrib/worker-loader/issues/154\n *\n * In this case, we will fetch the worker URL and create a new Blob URL with the same origin as a workaround.\n *\n * @param absoluteUrl - The absolute URL to preload.\n *\n * @returns - A promise that resolves to a new Blob URL\n */\nconst preload = async (absoluteUrl: string): Promise<string> => {\n  const response = await fetch(absoluteUrl, { credentials: 'same-origin' });\n  const blob = await response.blob();\n  return URL.createObjectURL(blob);\n};\n\n/**\n * This helper function is used to dynamically import a module from a URL.\n *\n * The build script has special handling for this function to ensure that the URL is not bundled into the final output.\n *\n * @param url - The URL to import.\n *\n * @returns - A promise that resolves to the default export of the module.\n */\nconst dynamicImportDefault = async <T>(url: string): Promise<T> =>\n  (await import(/* webpackIgnore: true */ url)).default;\n\n/**\n * The proxy worker factory imported from the proxy worker module.\n *\n * This is only available when the WebAssembly proxy is not disabled.\n */\nconst createProxyWorker: ((urlOverride?: string) => Worker) | undefined =\n  // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n  BUILD_DEFS.DISABLE_WASM_PROXY ? undefined : require('./proxy-worker/main').default;\n\n/**\n * Import the proxy worker.\n *\n * This function will perform the following steps:\n * 1. If a preload is needed, it will preload the module and return the object URL.\n * 2. Use the proxy worker factory to create the proxy worker.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The proxy worker.\n */\nexport const importProxyWorker = async (): Promise<[undefined | string, Worker]> => {\n  if (!scriptSrc) {\n    throw new Error('Failed to load proxy worker: cannot determine the script source URL.');\n  }\n\n  // If the script source is from the same origin, we can use the embedded proxy module directly.\n  if (isSameOrigin(scriptSrc)) {\n    return [undefined, createProxyWorker!()];\n  }\n\n  // Otherwise, need to preload\n  const url = await preload(scriptSrc);\n  return [url, createProxyWorker!(url)];\n};\n\n/**\n * The embedded WebAssembly module.\n *\n * This is only available in ESM and when embedding is not disabled.\n */\nconst embeddedWasmModule: EmscriptenModuleFactory<OrtWasmModule> | undefined =\n  BUILD_DEFS.IS_ESM && BUILD_DEFS.DISABLE_DYNAMIC_IMPORT\n    ? // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n      require(\n        !BUILD_DEFS.DISABLE_JSEP\n          ? '../../dist/ort-wasm-simd-threaded.jsep.mjs'\n          : '../../dist/ort-wasm-simd-threaded.mjs',\n      ).default\n    : undefined;\n\n/**\n * Import the WebAssembly module.\n *\n * This function will perform the following steps:\n * 1. If BUILD_DEFS.DISABLE_DYNAMIC_IMPORT is true, use the embedded module.\n * 2. If a preload is needed, it will preload the module and return the object URL.\n * 3. Otherwise, it will perform a dynamic import of the module.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The default export of the module, which is a factory function to create the WebAssembly module.\n */\nexport const importWasmModule = async (\n  urlOverride: string | undefined,\n  prefixOverride: string | undefined,\n  isMultiThreaded: boolean,\n): Promise<[undefined | string, EmscriptenModuleFactory<OrtWasmModule>]> => {\n  if (BUILD_DEFS.DISABLE_DYNAMIC_IMPORT) {\n    return [undefined, embeddedWasmModule!];\n  } else {\n    const wasmModuleFilename = !BUILD_DEFS.DISABLE_JSEP\n      ? 'ort-wasm-simd-threaded.jsep.mjs'\n      : 'ort-wasm-simd-threaded.mjs';\n    const wasmModuleUrl = urlOverride ?? normalizeUrl(wasmModuleFilename, prefixOverride);\n    // need to preload if all of the following conditions are met:\n    // 1. not in Node.js.\n    //    - Node.js does not have the same origin policy for creating workers.\n    // 2. multi-threaded is enabled.\n    //    - If multi-threaded is disabled, no worker will be created. So we don't need to preload the module.\n    // 3. the absolute URL is available.\n    //    - If the absolute URL is failed to be created, the origin cannot be determined. In this case, we will not\n    //    preload the module.\n    // 4. the worker URL is not from the same origin.\n    //    - If the worker URL is from the same origin, we can create the worker directly.\n    const needPreload = !isNode && isMultiThreaded && wasmModuleUrl && !isSameOrigin(wasmModuleUrl, prefixOverride);\n    const url = needPreload\n      ? await preload(wasmModuleUrl)\n      : (wasmModuleUrl ?? fallbackUrl(wasmModuleFilename, prefixOverride));\n    return [needPreload ? url : undefined, await dynamicImportDefault<EmscriptenModuleFactory<OrtWasmModule>>(url)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport type { OrtWasmModule } from './wasm-types';\nimport { importWasmModule } from './wasm-utils-import';\n\nlet wasm: OrtWasmModule | undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n  if (typeof SharedArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  try {\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(\n      new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16,\n        2, 0, 26, 11,\n      ]),\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(\n      new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1, 28, 0, 65, 0, 253, 15, 253, 12, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 186, 1, 26, 11,\n      ]),\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const initializeWebAssembly = async (flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");\n  }\n  if (aborted) {\n    throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  let numThreads = flags.numThreads!;\n\n  // ensure SIMD is supported\n  if (!isSimdSupported()) {\n    throw new Error('WebAssembly SIMD is not supported in the current environment.');\n  }\n\n  // check if multi-threading is supported\n  const multiThreadSupported = isMultiThreadSupported();\n  if (numThreads > 1 && !multiThreadSupported) {\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'env.wasm.numThreads is set to ' +\n          numThreads +\n          ', but this will not work unless you enable crossOriginIsolated mode. ' +\n          'See https://web.dev/cross-origin-isolation-guide/ for more info.',\n      );\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn(\n      'WebAssembly multi-threading is not supported in the current environment. ' + 'Falling back to single-threading.',\n    );\n\n    // set flags.numThreads to 1 so that OrtInit() will not create a global thread pool.\n    flags.numThreads = numThreads = 1;\n  }\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const mjsPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.mjs;\n  const mjsPathOverride = (mjsPathOverrideFlag as URL)?.href ?? mjsPathOverrideFlag;\n  const wasmPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.wasm;\n  const wasmPathOverride = (wasmPathOverrideFlag as URL)?.href ?? wasmPathOverrideFlag;\n  const wasmBinaryOverride = flags.wasmBinary;\n\n  const [objectUrl, ortWasmFactory] = await importWasmModule(mjsPathOverride, wasmPrefixOverride, numThreads > 1);\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(\n      new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }),\n    );\n  }\n\n  // promise for module initialization\n  tasks.push(\n    new Promise((resolve, reject) => {\n      const config: Partial<OrtWasmModule> = {\n        /**\n         * The number of threads. WebAssembly will create (Module.numThreads - 1) workers. If it is 1, no worker will be\n         * created.\n         */\n        numThreads,\n      };\n\n      if (wasmBinaryOverride) {\n        /**\n         * Set a custom buffer which contains the WebAssembly binary. This will skip the wasm file fetching.\n         */\n        config.wasmBinary = wasmBinaryOverride;\n      } else if (wasmPathOverride || wasmPrefixOverride) {\n        /**\n         * A callback function to locate the WebAssembly file. The function should return the full path of the file.\n         *\n         * Since Emscripten 3.1.58, this function is only called for the .wasm file.\n         */\n        config.locateFile = (fileName, scriptDirectory) =>\n          wasmPathOverride ?? (wasmPrefixOverride ?? scriptDirectory) + fileName;\n      }\n\n      ortWasmFactory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl);\n          }\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        },\n      );\n    }),\n  );\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    // TODO: currently \"PThread.terminateAllThreads()\" is not exposed in the wasm module.\n    //       And this function is not yet called by any code.\n    //       If it is needed in the future, we should expose it in the wasm module and uncomment the following line.\n\n    // wasm?.PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getInstance } from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions = (\n  options: Record<string, unknown>,\n  prefix: string,\n  seen: WeakSet<Record<string, unknown>>,\n  handler: ExtraOptionsHandler,\n): void => {\n  if (typeof options == 'object' && options !== null) {\n    if (seen.has(options)) {\n      throw new Error('Circular reference in options');\n    } else {\n      seen.add(options);\n    }\n  }\n\n  Object.entries(options).forEach(([key, value]) => {\n    const name = prefix ? prefix + key : key;\n    if (typeof value === 'object') {\n      iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n    } else if (typeof value === 'string' || typeof value === 'number') {\n      handler(name, value.toString());\n    } else if (typeof value === 'boolean') {\n      handler(name, value ? '1' : '0');\n    } else {\n      throw new Error(`Can't handle extra config type: ${typeof value}`);\n    }\n  });\n};\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from 'onnxruntime-common';\n\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError, iterateExtraOptions } from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2; // Default to warning\n    } else if (\n      typeof options.logSeverityLevel !== 'number' ||\n      !Number.isInteger(options.logSeverityLevel) ||\n      options.logSeverityLevel < 0 ||\n      options.logSeverityLevel > 4\n    ) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0; // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n      runOptions.logSeverityLevel!,\n      runOptions.logVerbosityLevel!,\n      !!runOptions.terminate!,\n      tagDataOffset,\n    );\n    if (runOptionsHandle === 0) {\n      checkLastError(\"Can't create run options.\");\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from 'onnxruntime-common';\n\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError, iterateExtraOptions } from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string | unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential' | 'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (\n    options.executionProviders &&\n    options.executionProviders.some((ep) => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')\n  ) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders = (\n  sessionOptionsHandle: number,\n  executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n  allocs: number[],\n): void => {\n  for (const ep of executionProviders) {\n    let epName = typeof ep === 'string' ? ep : ep.name;\n\n    // check EP name\n    switch (epName) {\n      case 'webnn':\n        epName = 'WEBNN';\n        if (typeof ep !== 'string') {\n          const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n          // const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          if (deviceType) {\n            const keyDataOffset = allocWasmString('deviceType', allocs);\n            const valueDataOffset = allocWasmString(deviceType, allocs);\n            if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n              checkLastError(`Can't set a session config entry: 'deviceType' - ${deviceType}.`);\n            }\n          }\n        }\n        break;\n      case 'webgpu':\n        epName = 'JS';\n        if (typeof ep !== 'string') {\n          const webgpuOptions = ep as InferenceSession.WebGpuExecutionProviderOption;\n          if (webgpuOptions?.preferredLayout) {\n            if (webgpuOptions.preferredLayout !== 'NCHW' && webgpuOptions.preferredLayout !== 'NHWC') {\n              throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);\n            }\n            const keyDataOffset = allocWasmString('preferredLayout', allocs);\n            const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n            if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n              checkLastError(`Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`);\n            }\n          }\n        }\n        break;\n      case 'wasm':\n      case 'cpu':\n        continue;\n      default:\n        throw new Error(`not supported execution provider: ${epName}`);\n    }\n\n    const epNameDataOffset = allocWasmString(epName, allocs);\n    if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n      checkLastError(`Can't append execution provider: ${epName}.`);\n    }\n  }\n};\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n      typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2; // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0; // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset =\n      typeof sessionOptions.optimizedModelFilePath === 'string'\n        ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs)\n        : 0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n      graphOptimizationLevel,\n      !!sessionOptions.enableCpuMemArena,\n      !!sessionOptions.enableMemPattern,\n      executionMode,\n      !!sessionOptions.enableProfiling,\n      0,\n      logIdDataOffset,\n      logSeverityLevel,\n      logVerbosityLevel,\n      optimizedModelFilePathOffset,\n    );\n    if (sessionOptionsHandle === 0) {\n      checkLastError(\"Can't create session options.\");\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.enableGraphCapture !== undefined) {\n      if (typeof sessionOptions.enableGraphCapture !== 'boolean') {\n        throw new Error(`enableGraphCapture must be a boolean value: ${sessionOptions.enableGraphCapture}`);\n      }\n      const keyDataOffset = allocWasmString('enableGraphCapture', allocs);\n      const valueDataOffset = allocWasmString(sessionOptions.enableGraphCapture.toString(), allocs);\n      if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n        checkLastError(\n          `Can't set a session config entry: 'enableGraphCapture' - ${sessionOptions.enableGraphCapture}.`,\n        );\n      }\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from 'onnxruntime-common';\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16,\n\n  // 4-bit data-types\n  uint4 = 21,\n  int4 = 22,\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n    case 'int4':\n      return DataType.int4;\n    case 'uint4':\n      return DataType.uint4;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n    case DataType.int4:\n      return 'int4';\n    case DataType.uint4:\n      return 'uint4';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor size in bytes by the given data type and dimensions\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const calculateTensorSizeInBytes = (\n  dateType: number,\n  dimsOrSize: readonly number[] | number,\n): number | undefined => {\n  const elementSize = [\n    -1, // undefined = 0\n    4, // float = 1\n    1, // uint8 = 2\n    1, // int8 = 3\n    2, // uint16 = 4\n    2, // int16 = 5\n    4, // int32 = 6\n    8, // int64 = 7\n    -1, // string = 8\n    1, // bool = 9\n    2, // float16 = 10\n    8, // double = 11\n    4, // uint32 = 12\n    8, // uint64 = 13\n    -1, // complex64 = 14\n    -1, // complex128 = 15\n    -1, // bfloat16 = 16\n    -1, // FLOAT8E4M3FN = 17\n    -1, // FLOAT8E4M3FNUZ = 18\n    -1, // FLOAT8E5M2 = 19\n    -1, // FLOAT8E5M2FNUZ = 20\n    0.5, // uint4 = 21\n    0.5, // int4 = 22\n  ][dateType];\n\n  const size = typeof dimsOrSize === 'number' ? dimsOrSize : dimsOrSize.reduce((a, b) => a * b, 1);\n  return elementSize > 0 ? Math.ceil(size * elementSize) : undefined;\n};\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (\n  type: Tensor.Type,\n):\n  | Float32ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int8ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int16ArrayConstructor\n  | Int32ArrayConstructor\n  | BigInt64ArrayConstructor\n  | Uint8ArrayConstructor\n  | Float64ArrayConstructor\n  | Uint32ArrayConstructor\n  | BigUint64ArrayConstructor => {\n  switch (type) {\n    case 'float16':\n      // allow Float16Array polyfill.\n      return typeof Float16Array !== 'undefined' && Float16Array.from ? Float16Array : Uint16Array;\n    case 'float32':\n      return Float32Array;\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int16':\n      return Int16Array;\n    case 'int32':\n      return Int32Array;\n    case 'bool':\n      return Uint8Array;\n    case 'float64':\n      return Float64Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'uint64':\n      return BigUint64Array;\n    default:\n      throw new Error(`unsupported type: ${type}`);\n  }\n};\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose' | 'info' | 'warning' | 'error' | 'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n/**\n * Check whether the given tensor type is supported by GPU buffer\n */\nexport const isGpuBufferSupportedType = (type: Tensor.Type): type is Tensor.GpuBufferDataTypes =>\n  type === 'float32' ||\n  type === 'float16' ||\n  type === 'int32' ||\n  type === 'int64' ||\n  type === 'uint32' ||\n  type === 'uint8' ||\n  type === 'bool' ||\n  type === 'uint4' ||\n  type === 'int4';\n\n/**\n * Check whether the given tensor type is supported by WebNN MLTensor\n */\nexport const isMLTensorSupportedType = (type: Tensor.Type): type is Tensor.MLTensorDataTypes =>\n  type === 'float32' ||\n  type === 'float16' ||\n  type === 'int32' ||\n  type === 'int64' ||\n  type === 'uint32' ||\n  type === 'uint64' ||\n  type === 'int8' ||\n  type === 'uint8' ||\n  type === 'bool';\n\n/**\n * Map string data location to integer value\n */\nexport const dataLocationStringToEnum = (location: Tensor.DataLocation): number => {\n  switch (location) {\n    case 'none':\n      return 0;\n    case 'cpu':\n      return 1;\n    case 'cpu-pinned':\n      return 2;\n    case 'texture':\n      return 3;\n    case 'gpu-buffer':\n      return 4;\n    case 'ml-tensor':\n      return 5;\n    default:\n      throw new Error(`unsupported data location: ${location}`);\n  }\n};\n\n/**\n * Map integer data location to string value\n */\nexport const dataLocationEnumToString = (location: number): Tensor.DataLocation | undefined =>\n  (['none', 'cpu', 'cpu-pinned', 'texture', 'gpu-buffer', 'ml-tensor'] as const)[location];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { isNode } from './wasm-utils-env';\n\n/**\n * Load a file into a Uint8Array.\n *\n * @param file - the file to load. Can be a URL/path, a Blob, an ArrayBuffer, or a Uint8Array.\n * @returns a Uint8Array containing the file data.\n */\nexport const loadFile = async (file: string | Blob | ArrayBufferLike | Uint8Array): Promise<Uint8Array> => {\n  if (typeof file === 'string') {\n    if (isNode) {\n      // load file into ArrayBuffer in Node.js\n      try {\n        const { readFile } = require('node:fs/promises');\n        return new Uint8Array(await readFile(file));\n      } catch (e) {\n        if (e.code === 'ERR_FS_FILE_TOO_LARGE') {\n          // file is too large, use fs.createReadStream instead\n          const { createReadStream } = require('node:fs');\n          const stream = createReadStream(file);\n          const chunks: Uint8Array[] = [];\n          for await (const chunk of stream) {\n            chunks.push(chunk);\n          }\n          return new Uint8Array(Buffer.concat(chunks));\n        }\n        throw e;\n      }\n    } else {\n      // load file into ArrayBuffer in browsers\n      const response = await fetch(file);\n      if (!response.ok) {\n        throw new Error(`failed to load external data file: ${file}`);\n      }\n      const contentLengthHeader = response.headers.get('Content-Length');\n      const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n      if (fileSize < 1073741824 /* 1GB */) {\n        // when Content-Length header is not set, we cannot determine the file size. We assume it is small enough to\n        // load into memory.\n        return new Uint8Array(await response.arrayBuffer());\n      } else {\n        // file is too large, use stream instead\n        if (!response.body) {\n          throw new Error(`failed to load external data file: ${file}, no response body.`);\n        }\n        const reader = response.body.getReader();\n\n        let buffer;\n        try {\n          // try to create ArrayBuffer directly\n          buffer = new ArrayBuffer(fileSize);\n        } catch (e) {\n          if (e instanceof RangeError) {\n            // use WebAssembly Memory to allocate larger ArrayBuffer\n            const pages = Math.ceil(fileSize / 65536);\n            buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;\n          } else {\n            throw e;\n          }\n        }\n\n        let offset = 0;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            break;\n          }\n          const chunkSize = value.byteLength;\n          const chunk = new Uint8Array(buffer, offset, chunkSize);\n          chunk.set(value);\n          offset += chunkSize;\n        }\n        return new Uint8Array(buffer, 0, fileSize);\n      }\n    }\n  } else if (file instanceof Blob) {\n    return new Uint8Array(await file.arrayBuffer());\n  } else if (file instanceof Uint8Array) {\n    return file;\n  } else {\n    return new Uint8Array(file);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport { logLevelStringToEnum } from '../wasm-common';\n\ntype LogLevel = NonNullable<Env['logLevel']>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString | MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\nlet configLogLevel: LogLevel | undefined;\nlet debug: boolean | undefined;\n\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\n  configLogLevel = $configLogLevel;\n  debug = $debug;\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(configLogLevel);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from 'onnxruntime-common';\n\nimport { tensorTypeToTypedArrayConstructor } from '../wasm-common';\n\nexport const createView = (\n  dataBuffer: ArrayBuffer,\n  type: Tensor.Type,\n):\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n  | Uint8Array\n  | Float32Array\n  | Float64Array\n  | Int8Array\n  | Int16Array\n  | Uint16Array => new (tensorTypeToTypedArrayConstructor(type))(dataBuffer);\n\n/**\n * a TensorView does not own the data.\n */\nexport interface TensorView {\n  readonly data: number;\n  readonly dataType: number;\n  readonly dims: readonly number[];\n\n  /**\n   * get a Float16Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getUint16Array(): Uint16Array;\n\n  /**\n   * get a Float32Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getFloat32Array(): Float32Array;\n\n  /**\n   * get a BigInt64Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getBigInt64Array(): BigInt64Array;\n\n  /**\n   * get a Int32Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getInt32Array(): Int32Array;\n\n  /**\n   * get a Uint16Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getUint16Array(): Uint16Array;\n\n  /**\n   * create a new tensor view with the same data but different dimensions.\n   */\n  reshape(newDims: readonly number[]): TensorView;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../wasm-common';\nimport { TensorView } from '../tensor-view';\n\nimport { ShaderHelper } from './ops/common';\n\nexport type SessionState = 'default' | 'capturing' | 'replaying';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2,\n}\nexport type GpuDataId = number;\n\nexport type GpuArchitecture = 'ampere' | 'gen-12lp';\nexport type GpuVendor = 'amd' | 'intel' | 'nvidia';\nexport interface AdapterInfo {\n  isArchitecture: (architecture: GpuArchitecture) => boolean;\n  isVendor: (vendor: GpuVendor) => boolean;\n}\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  dims: readonly number[];\n  dataType: number;\n}\n\nexport interface ProgramUniform {\n  type: DataType;\n  data: number | readonly number[];\n}\n\nexport type ProgramUniformVariableInfo = [type: DataType, length: number];\n\n/**\n * Represent the dependency of a program on a specific input tensor.\n *\n * - 'none': the shader/uniform does not depend on this input's info\n * - 'type': the shader/uniform depends on data type of this input\n * - 'rank': the shader/uniform depends on data type and the rank of this input\n * - 'dims': the shader/uniform depends on data type and the dims of this input\n * - 'data': the shader/uniform depends on data type, the dims and the data of this input\n */\nexport type ProgramInputTensorInfoDependency = 'none' | 'type' | 'rank' | 'dims' | 'data';\n\n/**\n * Represent information about a program's cache for shader.\n */\nexport interface ProgramShaderCacheInfo {\n  /**\n   * an optional string as a cache hint in the artifact cache. If this is not specified, the cache hint will be empty.\n   *\n   * This hint string should only contains initializing-time information, such as the attributes or any information of\n   * initializers. It should NOT contain any runtime information, such as the shape of inputs.\n   */\n  hint?: string;\n\n  /**\n   * an optional list of dependencies of the program on the input tensors. If this is not specified, the program depends\n   * on 'dims' of all inputs.\n   */\n  inputDependencies?: ProgramInputTensorInfoDependency[];\n}\n\n/**\n * Represent information about a program's cache for uniform.\n */\nexport interface ProgramUniformCacheInfo {\n  /**\n   * an optional string as a cache hint in the uniform cache. If this is not specified, the cache hint will be empty.\n   *\n   * This hint string should only contains runtime information, such as the shape of inputs.\n   */\n  hint?: string;\n\n  /**\n   * an optional list of dependencies of the program on the input tensors. If this is not specified, the program depends\n   * on 'none' of all inputs.\n   */\n  inputDependencies?: ProgramInputTensorInfoDependency[];\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * an optional object describing the cache information of the program shader.\n   *\n   * If this is not specified, assume hint is empty and inputDependencies are ['dims'] for all inputs.\n   */\n  shaderCache?: ProgramShaderCacheInfo;\n\n  /**\n   * the shader's processing source code.\n   *\n   * This function will be called when shader cache missed.\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n\n  /**\n   * A function to get run data required to run the program.\n   *\n   * This function will be called every time the program is executed. Should keep this function as simple as possible.\n   */\n  getRunData: (inputs: readonly TensorView[]) => {\n    outputs: readonly TensorInfo[];\n    dispatchGroup: { x: number; y?: number; z?: number };\n    programUniforms?: readonly ProgramUniform[];\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n  uniformVariablesInfo: readonly ProgramUniformVariableInfo[] | undefined;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView | number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * gpu adapter info\n   */\n  readonly adapterInfo: AdapterInfo;\n\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly kernelCustomData: { [key: string]: unknown };\n\n  /**\n   * a buffer that can be used to access custom data created each time the kernel is executed\n   */\n  readonly customDataBuffer: Uint8Array;\n\n  /**\n   * a number of outputs for the node\n   */\n  readonly outputCount: number;\n\n  compute(program: ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping): TensorView[];\n  output(index: number, dims: readonly number[]): number;\n  getMaxComputeWorkgroupSizes(): [number, number, number];\n  getMaxComputeWorkgroupStoragesize(): number;\n}\n\nexport type TimestampQuery = 'none' | 'inside-passes' | 'at-passes';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { WebGpuBackend } from '../backend-webgpu';\nimport { LOG_DEBUG } from '../log';\n\nimport { GpuData, GpuDataId, GpuDataType } from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData | undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId, getTargetBuffer: () => Uint8Array): Promise<void>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n\n  /**\n   * register an external buffer for IO Binding. If the buffer is already registered, return the existing GPU data ID.\n   *\n   * GPU data manager only manages a mapping between the buffer and the GPU data ID. It will not manage the lifecycle of\n   * the external buffer.\n   */\n  registerExternalBuffer(buffer: GPUBuffer, originalSize: number, previous?: [GpuDataId, GPUBuffer]): number;\n\n  /**\n   * unregister an external buffer for IO Binding.\n   */\n  unregisterExternalBuffer(id: GpuDataId): void;\n\n  /**\n   * destroy all gpu buffers.\n   */\n  dispose(): void;\n\n  /**\n   * release session related data.\n   * @param sessionId - specify the session ID.\n   */\n  onReleaseSession(sessionId: number): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\nconst bucketFreelist: Map<number, number> = new Map([\n  [64, 250],\n  [128, 200],\n  [256, 200],\n  [512, 200],\n  [2048, 230],\n  [4096, 200],\n  [8192, 50],\n  [16384, 50],\n  [32768, 50],\n  [65536, 50],\n  [131072, 50],\n  [262144, 50],\n  [524288, 50],\n  [1048576, 50],\n  [2097152, 30],\n  [4194304, 20],\n  [8388608, 10],\n  [12582912, 10],\n  [16777216, 10],\n  [26214400, 15],\n  [33554432, 22],\n  [44236800, 2],\n  [58982400, 6],\n  // we don't want to cache the bucket sizes below but not caching them\n  // results in some major performance hits for models like sd-turbo.\n  [67108864, 6],\n  [134217728, 6],\n  [167772160, 6],\n]);\n\nconst bucketArr: number[] = [];\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\n/**\n * calculate the buffer size so that it fits into buckets.\n */\nconst calcBucketBufferSize = (size: number) => {\n  for (let idx = 0; idx < bucketArr.length; idx++) {\n    const sizeForBucket = bucketArr[idx];\n    if (size <= sizeForBucket) {\n      return sizeForBucket;\n    }\n  }\n  // not in bucket list -> caller will not cache, round up to 16.\n  return Math.ceil(size / 16) * 16;\n};\n\nlet guid = 1;\nconst createNewGpuDataId = () => guid++;\n\n/**\n * exported standard download function. This function is used by the session to download the data from GPU, and also by\n * factory to create GPU tensors with the capacity of downloading data from GPU.\n *\n * @param backend - the WebGPU backend\n * @param gpuBuffer - the GPU buffer to download\n * @param originalSize - the original size of the data\n * @param getTargetBuffer - optional. If provided, the data will be copied to the target buffer. Otherwise, a new buffer\n * will be created and returned.\n */\nexport const downloadGpuData = async (\n  backend: WebGpuBackend,\n  gpuBuffer: GPUBuffer,\n  originalSize: number,\n  getTargetBuffer?: () => Uint8Array,\n): Promise<Uint8Array> => {\n  const bufferSize = calcNormalizedBufferSize(originalSize);\n  const gpuReadBuffer = backend.device.createBuffer(\n    // eslint-disable-next-line no-bitwise\n    { size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ },\n  );\n  try {\n    const commandEncoder = backend.getCommandEncoder();\n    backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n      gpuBuffer /* source buffer */,\n      0 /* source offset */,\n      gpuReadBuffer /* destination buffer */,\n      0 /* destination offset */,\n      bufferSize /* size */,\n    );\n    backend.flush();\n\n    await gpuReadBuffer.mapAsync(GPUMapMode.READ);\n\n    const arrayBuffer = gpuReadBuffer.getMappedRange();\n    if (getTargetBuffer) {\n      // if we already have a CPU buffer to accept the data, no need to clone the ArrayBuffer.\n      const targetBuffer = getTargetBuffer();\n      targetBuffer.set(new Uint8Array(arrayBuffer, 0, originalSize));\n      return targetBuffer;\n    } else {\n      // the mapped ArrayBuffer will be released when the GPU buffer is destroyed. Need to clone the\n      // ArrayBuffer.\n      return new Uint8Array(arrayBuffer.slice(0, originalSize));\n    }\n  } finally {\n    gpuReadBuffer.destroy();\n  }\n};\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  private storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  // The reusable storage buffers for computing.\n  private freeBuffers: Map<number, GPUBuffer[]>;\n  // The reusable uniform buffers\n  private freeUniformBuffers: Map<number, GPUBuffer[]>;\n\n  // The pendingBuffers for capture graph.\n  // a SessionID -> GPUBuffer[] mapping.\n  private capturedPendingBuffers: Map<number, GPUBuffer[]>;\n\n  constructor(private backend: WebGpuBackend) {\n    this.storageCache = new Map();\n    this.freeBuffers = new Map();\n    this.freeUniformBuffers = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n    this.capturedPendingBuffers = new Map();\n\n    for (const [key] of bucketFreelist) {\n      bucketArr.push(key);\n      this.freeBuffers.set(key, []);\n      this.freeUniformBuffers.set(key, []);\n    }\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n      // eslint-disable-next-line no-bitwise\n      { mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC },\n    );\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n      sourceGpuDataCache.gpuData.buffer,\n      0,\n      destinationGpuDataCache.gpuData.buffer,\n      0,\n      size,\n    );\n  }\n\n  registerExternalBuffer(buffer: GPUBuffer, originalSize: number, previous?: [GpuDataId, GPUBuffer]): number {\n    let id: number | undefined;\n    if (previous) {\n      id = previous[0];\n      if (buffer === previous[1]) {\n        LOG_DEBUG(\n          'verbose',\n          () =>\n            `[WebGPU] GpuDataManager.registerExternalBuffer(size=${originalSize}) => id=${\n              id\n            }, buffer is the same, skip.`,\n        );\n        return id;\n      } else if (this.backend.capturedCommandList.has(this.backend.currentSessionId!)) {\n        throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!`);\n      }\n    } else {\n      id = createNewGpuDataId();\n    }\n\n    this.storageCache.set(id, { gpuData: { id, type: GpuDataType.default, buffer }, originalSize });\n    LOG_DEBUG(\n      'verbose',\n      () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${originalSize}) => id=${id}, registered.`,\n    );\n    return id;\n  }\n\n  unregisterExternalBuffer(id: GpuDataId): void {\n    if (id !== undefined) {\n      this.storageCache.delete(id);\n      LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${id}`);\n    }\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    const bufferSize = calcBucketBufferSize(size);\n\n    let gpuBuffer;\n    // Currently, only storage buffers are reused.\n    // eslint-disable-next-line no-bitwise\n    const isStorage = (usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE;\n    // eslint-disable-next-line no-bitwise\n    const isUniform = (usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM;\n    if (isStorage || isUniform) {\n      const freeBuffers = isStorage ? this.freeBuffers : this.freeUniformBuffers;\n      const buffers = freeBuffers.get(bufferSize);\n      if (!buffers) {\n        // no such bucket/freelist - create gpu buffer\n        gpuBuffer = this.backend.device.createBuffer({ size: bufferSize, usage });\n      } else {\n        if (buffers.length > 0) {\n          // in freelist, use it\n          gpuBuffer = buffers.pop() as GPUBuffer;\n        } else {\n          // bucket empty, create gpu buffer\n          gpuBuffer = this.backend.device.createBuffer({ size: bufferSize, usage });\n        }\n      }\n    } else {\n      // create gpu buffer\n      gpuBuffer = this.backend.device.createBuffer({ size: bufferSize, usage });\n    }\n\n    const gpuData = { id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer };\n    this.storageCache.set(gpuData.id, { gpuData, originalSize: size });\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData | undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n    await downloadGpuData(this.backend, cachedData.gpuData.buffer, cachedData.originalSize, getTargetBuffer);\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      // upload buffer is only useful in the session creation time. So we don't need to reuse them in session running.\n      buffer.destroy();\n    }\n    this.buffersForUploadingPending = [];\n\n    if (this.buffersPending.length === 0) {\n      return;\n    }\n\n    if (this.backend.sessionStatus === 'default') {\n      for (const buffer of this.buffersPending) {\n        const maxInFreeList = bucketFreelist.get(buffer.size);\n\n        // eslint-disable-next-line no-bitwise\n        if ((buffer.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n          // Put the pending buffer to freeBuffers list instead of really destroying it for buffer reusing.\n          const freelist = this.freeBuffers.get(buffer.size) || [];\n          if (maxInFreeList === undefined || freelist.length >= maxInFreeList) {\n            buffer.destroy();\n          } else {\n            freelist.push(buffer);\n          }\n          // eslint-disable-next-line no-bitwise\n        } else if ((buffer.usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM) {\n          // Put the pending buffer to freeUniformBuffers list instead of really destroying it for buffer reusing.\n          const freelist = this.freeUniformBuffers.get(buffer.size) || [];\n          if (maxInFreeList === undefined || freelist.length >= maxInFreeList) {\n            buffer.destroy();\n          } else {\n            freelist.push(buffer);\n          }\n        } else {\n          buffer.destroy();\n        }\n      }\n      this.buffersPending = [];\n    } else {\n      // Don't release intermediate tensors in non-default mode.\n      // TODO: reuse the storage buffers in non-default mode.\n      let capturedBuffers = this.capturedPendingBuffers.get(this.backend.currentSessionId!);\n      if (!capturedBuffers) {\n        capturedBuffers = [];\n        this.capturedPendingBuffers.set(this.backend.currentSessionId!, capturedBuffers);\n      }\n      for (const buffer of this.buffersPending) {\n        capturedBuffers.push(buffer);\n      }\n      this.buffersPending = [];\n    }\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers) => {\n      buffers.forEach((buffer) => {\n        buffer.destroy();\n      });\n    });\n    this.freeUniformBuffers.forEach((buffers) => {\n      buffers.forEach((buffer) => {\n        buffer.destroy();\n      });\n    });\n\n    this.storageCache.forEach((storage) => {\n      storage.gpuData.buffer.destroy();\n    });\n\n    this.capturedPendingBuffers.forEach((buffers) => {\n      buffers.forEach((buffer) => {\n        buffer.destroy();\n      });\n    });\n    this.storageCache = new Map();\n    this.freeBuffers = new Map();\n    this.freeUniformBuffers = new Map();\n    this.capturedPendingBuffers = new Map();\n  }\n\n  onReleaseSession(sessionId: number) {\n    // release the captured pending buffers.\n    const pendingBuffers = this.capturedPendingBuffers.get(sessionId);\n    if (pendingBuffers) {\n      pendingBuffers.forEach((buffer) => {\n        buffer.destroy();\n      });\n      this.capturedPendingBuffers.delete(sessionId);\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n  new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private key: string;\n  public get cacheKey(): string {\n    if (!this.key) {\n      this.key = Object.getOwnPropertyNames(this)\n        .sort()\n        .map((name) => `${(this as Record<string, unknown>)[name]}`)\n        .join(';');\n    }\n    return this.key;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(\n  attribute: T,\n): T & AttributeWithCacheKey => new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number] | undefined {\n    return a[1] !== b[0] ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(\n    adims: readonly number[],\n    bdims: readonly number[],\n    isMatMul = false,\n  ): readonly number[] | undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul = MatMulUtil.calcMatMulShape(\n        [adims[arank - 2], adims[arank - 1]],\n        [bdims[brank - 2], bdims[brank - 1]],\n      );\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      const max = Math.max(aLen, bLen);\n      if (aLen && bLen) {\n        cdims[crank - i] = Math.max(aLen, bLen);\n      } else {\n        // when either aLen or bLen is 0, the other should be either 0 or 1, otherwise it is not broadcastable.\n        if (max > 1) {\n          return undefined;\n        }\n        cdims[crank - i] = 0;\n      }\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * convert dims corresponding to type change to pack. ex. uint8 data to uint32\n   */\n  static convertShape(dims: readonly number[], size = 4): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    }\n    const newDims = new Array(rank);\n    let i = rank - 1;\n    while (i >= 0) {\n      if (dims[i] % size === 0) {\n        newDims[i] = dims[i] / size;\n        break;\n      }\n      if (size % dims[i] !== 0) {\n        throw new Error('cannot convert shape');\n      }\n      newDims[i] = 1;\n      size /= dims[i];\n      i--;\n    }\n    for (i--; i >= 0; i--) {\n      newDims[i] = dims[i];\n    }\n    return newDims;\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be negative.\n      if (dims[i] < 0) {\n        throw new Error(\n          // eslint-disable-next-line max-len\n          'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.',\n        );\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map((x) => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    kernelShape: number[],\n    strides: number[],\n    dilations: number[],\n    pads: number[],\n  ): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n    inputDims: readonly number[],\n    strides: readonly number[],\n    dilations: readonly number[],\n    kernelShape: readonly number[],\n    pads: number[],\n    isChannelLast: boolean,\n    autoPad?: string,\n  ): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== inputDims.length - 2) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n        inputDims[dim + (isChannelLast ? 1 : 2)],\n        strides[dim],\n        dilations[dim],\n        kernelShape[dim],\n        pads,\n        dim,\n        dim + inputDims.length - 2,\n        autoPad,\n      );\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    strides: number[],\n    dilations: number[],\n    kernelShape: number[],\n    pads: number[],\n    autoPad?: string,\n  ): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n      isGlobalOperator,\n      inputDims,\n      outputDims,\n      strides,\n      dilations,\n      kernelShape,\n      pads,\n      autoPad,\n    );\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n    inputDims: readonly number[],\n    filterDims: readonly number[],\n    strides: number[],\n    dilations: number[],\n    kernelShape: number[],\n    pads: number[],\n    autoPad?: string,\n  ): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    outputDims: number[],\n    strides: readonly number[],\n    dilations: readonly number[],\n    kernelShape: readonly number[],\n    pads: number[],\n    autoPad?: string,\n  ) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(\n          PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2],\n            strides[dim],\n            dilations[dim],\n            kernelShape[dim],\n            pads,\n            dim,\n            dim + inputDims.length - 2,\n            autoPad,\n          ),\n        );\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n    inSize: number,\n    stride: number,\n    dilation: number,\n    kernel: number,\n    pads: number[],\n    padHeadIndex: number,\n    padTailIndex: number,\n    autoPad?: string,\n  ): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor((inSize - dkernel) / stride + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] = autoPad === 'SAME_LOWER' ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor((inSize + padNeeded - kernel) / stride + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n    leftShape: readonly number[],\n    transLeft: boolean,\n    rightShape: readonly number[],\n    transRight: boolean,\n    biasShape?: readonly number[],\n  ): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e38;\nexport const MAX_CLIP = 3.4028234663852886e38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { ShapeUtil } from '../../util';\nimport { ProgramUniform, ProgramUniformVariableInfo } from '../types';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\ninterface IndicesHelperTypes {\n  /**\n   * WGSL type of indices expression\n   */\n  readonly indices: string;\n\n  /**\n   * WGSL type of a value\n   */\n  readonly value: string;\n\n  /**\n   * WGSL type of storage type representing a value\n   *\n   * This is usually the same to `value`, but for some type (eg. bool), we need to use `u32` as storage type for\n   * value type `vec4<bool>`\n   */\n  readonly storage: string;\n\n  /**\n   * tensor type as represented in TensorView\n   */\n  readonly tensor: number;\n}\n\n/**\n * A helper class for generating WGSL code for manipulating indices and data for a shader's input or output.\n *\n * This class is designed to offer a unified way to generate WGSL code for manipulating indices and data for a shader's\n * input or output.\n *\n * The following is a list of terminologies used in this class:\n * - `offset`: a uint32 value representing the offset of an element in the data buffer.\n * - `indices`: an abstraction of a multi-dimensional array's indices representing the data's index on each dimension.\n * - `value`: a value of a data element.\n *\n * Users are expected to create an instance of this class for each shader's input or output, and use the instance to\n * generate WGSL code for manipulating indices and data. The following 2 exported functions are for users to call to\n * create an instance of an indices helper:\n * - `inputVariable()`: create an indices helper instance for an input.\n * - `outputVariable()`: create an indices helper instance for an output.\n * - `internalVariable()`: create an indices helper instance for an internal variable.\n *\n * An indices helper instance contains helper functions for the following operations:\n * - access readonly basic information, including: `name`(the name of the input or output), `usage`(whether it's an\n * input, an output or an internal variable) and `shape`(the passed in shape).\n * - `type`: access readonly type information, including: `indices`(the type of indices), `value`(the type of value at\n * runtime), `storage`(the type of value at storage) and `tensor`(the tensor type as represented in TensorView).\n * - generate WGSL code for getting indices from offset. Use `offsetToIndices()` for WGSL code snippet to calculate\n * indices from offset, and use `indicesToOffset()` for WGSL code snippet to calculate offset from indices.\n * - to manipulate an instance of indices, use `setIndices()` and `getIndices()` to set and get the indices on an\n * indices variable.\n * - to manipulate data, use `set()`/`get()` to access data at the given indices from parameter list, use\n * `setByIndices()`/`getByIndices()` to access data at the given indices from an indices variable, and use\n * `setByOffset()`/`getByOffset()` to access data at the given offset.\n * - `impl`: get WGSL code of function implementation for the util functions mentioned above.\n */\nexport interface IndicesHelper {\n  /**\n   * get WGSL code of function implementation for the util functions.\n   *\n   */\n  readonly impl: () => string;\n\n  /**\n   * get type info\n   */\n  readonly type: IndicesHelperTypes;\n\n  /**\n   * WGSL code of a expression for getting indices from offset.\n   *\n   * @param varOffset - a u32 expression representing the offset.\n   *\n   * @returns an `type.indices` expression\n   */\n  readonly offsetToIndices: (varOffset: string) => string;\n\n  /**\n   * WGSL code of an `u32` expression for getting offset from indices.\n   *\n   * @param varIndices - a `type.indices` expression representing the indices.\n   *\n   * @returns an `u32` expression\n   */\n  readonly indicesToOffset: (varIndices: string) => string;\n\n  /**\n   * WGSL code of an `u32` expression for getting original offset from broadcasted indices.\n   *\n   * @param varIndices - a `type.indices` expression representing the output indices.\n   * @param output - output IndicesHelper.\n   *\n   * @returns an `u32` expression\n   */\n  readonly broadcastedIndicesToOffset: (varIndices: string, output: IndicesHelper) => string;\n\n  /**\n   * WGSL code of generating an indices literal\n   *\n   * @param init - initial value.\n   */\n  readonly indices: (...init: ReadonlyArray<number | string>) => string;\n\n  /**\n   * WGSL code of a statement for setting indices.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param idx - the index of the indices to set. can be a number or a string (WGSL `u32` expression).\n   * @param value - the value to set. can be a number or a string (WGSL `u32` expression).\n   *\n   * @returns a WGSL statement\n   */\n  readonly indicesSet: (varIndices: string, idx: number | string, value: number | string) => void;\n\n  /**\n   * WGSL code of an `u32` expression for getting indices.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param idx - the index of the indices to get. can be a number or a string (WGSL `u32` expression).\n   *\n   * @returns an `u32` expression\n   */\n  readonly indicesGet: (varIndices: string, idx: number | string) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given indices.\n   *\n   * @param indicesAndValue - an array of numbers or strings (WGSL `u32` expression) representing the indices, followed\n   *     by the value to set. This array should have exactly `shape.length + 1` elements.\n   */\n  readonly set: (...indicesAndValue: ReadonlyArray<number | string>) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given indices variable.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param value - the value to set. should be a WGSL expression.\n   */\n  readonly setByIndices: (varIndices: string, value: string) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given offset.\n   *\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\n   * @param value - the value to set. should be a WGSL expression.\n   */\n  readonly setByOffset: (offset: number | string, value: string) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given indices.\n   *\n   * @param indices - an array of numbers or strings (WGSL `u32` expression) representing the indices.\n   */\n  readonly get: (...indices: ReadonlyArray<number | string>) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given indices variable.\n   *\n   * @param varIndices - a variable name for the indices.\n   */\n  readonly getByIndices: (varIndices: string) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given offset.\n   *\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\n   */\n  readonly getByOffset: (offset: number | string) => string;\n\n  /**\n   * name of the data variable\n   */\n  readonly name: string;\n\n  /**\n   * whether the helper is for an input, an output or an internal variable.\n   */\n  readonly usage: 'input' | 'output' | 'internal';\n\n  /**\n   * the rank of the input or output.\n   */\n  readonly rank: number;\n\n  /**\n   * a string representing the variable name for the shape of the input or output.\n   */\n  readonly shape: string;\n\n  /**\n   * a string representing the variable name for the strides of the input or output.\n   */\n  readonly strides: string;\n}\n\nconst getWgslMappedType = (type: number, components: 1 | 2 | 3 | 4): string | [string, string] => {\n  if (components === 3) {\n    throw new Error('vec3 has same alignment as vec4, use vec4 instead');\n  }\n\n  // return type is [ storage type, runtime type ] or a single string for both\n  switch (type) {\n    case DataType.float16:\n      return components > 1 ? `vec${components}<f16>` : 'f16';\n    case DataType.float:\n      return components > 1 ? `vec${components}<f32>` : 'f32';\n    case DataType.int32:\n      return components > 1 ? `vec${components}<i32>` : 'i32';\n    case DataType.uint32:\n      return components > 1 ? `vec${components}<u32>` : 'u32';\n    case DataType.int64:\n      if (components > 1) {\n        throw new Error('currently not supported vecX of uint64 yet');\n      }\n      return ['vec2<u32>', 'i32'];\n    case DataType.uint64:\n      if (components > 1) {\n        throw new Error('currently not supported vecX of uint64 yet');\n      }\n      return ['vec2<u32>', 'u32'];\n    case DataType.bool:\n      if (components !== 4) {\n        throw new Error('bool must be vec4');\n      }\n      return ['u32', 'vec4<bool>'];\n    case DataType.int4:\n      return 'i32';\n    case DataType.uint4:\n      return 'u32';\n    default:\n      throw new Error(`Unknown data type: ${type}`);\n  }\n};\n\nexport const tensorTypeToWsglStorageType = (type: DataType, components: 1 | 2 | 3 | 4 = 1) => {\n  const mappedType = getWgslMappedType(type, components);\n  return typeof mappedType === 'string' ? mappedType : mappedType[0];\n};\n\nexport const tensorTypeToWsglValueType = (type: DataType, components: 1 | 2 | 3 | 4 = 1) => {\n  const mappedType = getWgslMappedType(type, components);\n  return typeof mappedType === 'string' ? mappedType : mappedType[1];\n};\n\nexport const createTensorShapeVariables = (...dims: ReadonlyArray<readonly number[]>): ProgramUniform[] => {\n  const programUniforms: ProgramUniform[] = [];\n  dims.forEach((dim) => {\n    if (dim.length !== 0) {\n      programUniforms.push(\n        { type: DataType.uint32, data: dim },\n        { type: DataType.uint32, data: ShapeUtil.computeStrides(dim) },\n      );\n    }\n  });\n  return programUniforms;\n};\n\n/**\n * A helper function to get maximum vector size for specified data length\n * @param size\n */\nexport const getMaxComponents = (size: number) => {\n  // we cannot use vec3 type since it has alignment of 16 bytes\n  if (size % 4 === 0) {\n    return 4;\n  } else if (size % 2 === 0) {\n    return 2;\n  }\n\n  return 1;\n};\n\n/**\n * A helper function that initializes variable as a scalar or vector. e.g. f32(0) or vec4f(0,0,0,0)\n * @param dataType\n * @param components\n * @param value\n */\nexport const fillVector = (dataType = 'f32', components?: number, value = '0') => {\n  if (!components || components === 1) {\n    return `${dataType}(${value})`;\n  }\n\n  return `vec${components}<${dataType}>(${value})`;\n};\n\n/**\n * A helper function that casts value or vector to f32\n * @param dataType\n * @param components\n * @param value\n */\nexport const castToF32 = (dataType: string, components: number, value: string) => {\n  if (dataType === 'f32') {\n    return value;\n  }\n  if (components === 1) {\n    return `f32(${value})`;\n  }\n\n  return `vec${components}<f32>(${value})`;\n};\n\n/**\n * A helper function that returns scalar or sums all components of a vector\n * @param name\n * @param components\n */\nexport const sumVector = (name: string, components: number) => {\n  if (components === 4) {\n    return `(${name}.x + ${name}.y + ${name}.z + ${name}.w)`;\n  } else if (components === 2) {\n    return `(${name}.x + ${name}.y)`;\n  } else if (components === 3) {\n    return `(${name}.x + ${name}.y + ${name}.z)`;\n  }\n\n  return name;\n};\n\n/**\n * A helper function that returns variable element at index.\n * @param name - the name of variable.\n * @param index - the index of variable element.\n * @param length - the length of variable.\n * @param type - the type of variable, optional.\n */\nexport const getElementAt = (\n  name: string,\n  index: number | string,\n  length: number,\n  type?: UniformDataElementType,\n): string => {\n  if (name.startsWith('uniforms.') && length > 4) {\n    if (typeof index === 'string') {\n      if (type === 'f16') {\n        return `${name}[(${index}) / 8][(${index}) % 8 / 4][(${index}) % 8 % 4]`;\n      } else {\n        return `${name}[(${index}) / 4][(${index}) % 4]`;\n      }\n    } else {\n      if (type === 'f16') {\n        return `${name}[${Math.floor(index / 8)}][${Math.floor((index % 8) / 4)}][${(index % 8) % 4}]`;\n      } else {\n        return `${name}[${Math.floor(index / 4)}][${index % 4}]`;\n      }\n    }\n  } else {\n    return length > 1 ? `${name}[${index}]` : name;\n  }\n};\n\n/**\n * A helper function to get a IndicesHelper for a given input or output.\n *\n * @param name - the name of the input or output.\n * @param tensorType - the tensor type of the input or output.\n * @param shapeOrRank - the tensor shape or the rank of the input or output.\n * @param usage - the usage of the indices helper.\n * @param components - indicates the number of components of each element. 1 for scalar, 2 for vec2, 3 for vec3, 4 for\n *    vec4.\n */\nconst createIndicesHelper = (\n  name: string,\n  tensorType: number,\n  shapeOrRank: number | readonly number[],\n  usage: IndicesHelper['usage'],\n  components: 1 | 2 | 3 | 4,\n): IndicesHelper => {\n  const useUniform = typeof shapeOrRank === 'number';\n  const rank = useUniform ? shapeOrRank : shapeOrRank.length;\n  const rankIdentity = [...new Array(rank).keys()];\n  const indicesType = rank < 2 ? 'u32' : rank <= 4 ? `vec${rank}<u32>` : `array<u32, ${rank}>`;\n  const mappedType = getWgslMappedType(tensorType, components);\n  const valueType = typeof mappedType === 'string' ? mappedType : mappedType[1];\n  const storageType = typeof mappedType === 'string' ? mappedType : mappedType[0];\n  const type = { indices: indicesType, value: valueType, storage: storageType, tensor: tensorType };\n\n  const normalizeDim = (dim: number | string): string => (typeof dim === 'string' ? dim : `${dim}u`);\n\n  const implementationUsed = {\n    offsetToIndices: false,\n    indicesToOffset: false,\n    broadcastedIndicesToOffset: false,\n    set: false,\n    setByIndices: false,\n    get: false,\n    getByIndices: false,\n  };\n\n  const uniformPrefix = useUniform ? 'uniforms.' : '';\n  const shape = `${uniformPrefix}${name}_shape`;\n  const strides = `${uniformPrefix}${name}_strides`;\n\n  let o2iSnippet = '';\n  for (let i = 0; i < rank - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${getElementAt(strides, i, rank)};\n    let rest${i} = current % ${getElementAt(strides, i, rank)};\n    indices[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `indices[${rank - 1}] = current;`;\n\n  const offsetToIndicesImplementation =\n    rank < 2\n      ? ''\n      : `\n  fn o2i_${name}(offset: u32) -> ${type.indices} {\n    var indices: ${type.indices};\n    var current = offset;\n    ${o2iSnippet}\n    return indices;\n  }`;\n\n  const offsetToIndices = (varOffset: string) => {\n    implementationUsed.offsetToIndices = true;\n    return rank < 2 ? varOffset : `o2i_${name}(${varOffset})`;\n  };\n\n  const offsets: string[] = [];\n  if (rank >= 2) {\n    for (let i = rank - 1; i >= 0; i--) {\n      offsets.push(`${getElementAt(strides, i, rank)} * (indices[${i}])`);\n    }\n  }\n\n  const indicesToOffsetImplementation =\n    rank < 2\n      ? ''\n      : `\n  fn i2o_${name}(indices: ${type.indices}) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const indicesToOffset = (varIndices: string) => {\n    implementationUsed.indicesToOffset = true;\n    return rank < 2 ? varIndices : `i2o_${name}(${varIndices})`;\n  };\n\n  const indices = (...init: ReadonlyArray<number | string>) =>\n    rank === 0 ? '0u' : `${type.indices}(${init.map(normalizeDim).join(',')})`;\n\n  const indicesGet = (varIndices: string, idx: number | string) => {\n    if (rank < 2) {\n      return `${varIndices}`;\n    } else {\n      return `${getElementAt(varIndices, idx, rank)}`;\n    }\n  };\n\n  const indicesSet = (varIndices: string, idx: number | string, value: string) => {\n    if (rank < 2) {\n      return `${varIndices}=${value};`;\n    } else {\n      return `${getElementAt(varIndices, idx, rank)}=${value};`;\n    }\n  };\n\n  const broadcastedIndicesToOffsetImplementation: { [key: string]: string } = {};\n  const broadcastedIndicesToOffset = (varIndices: string, output: IndicesHelper) => {\n    implementationUsed.broadcastedIndicesToOffset = true;\n    const implKey = `${output.name}broadcastedIndicesTo${name}Offset`;\n    if (implKey in broadcastedIndicesToOffsetImplementation) {\n      return `${implKey}(${varIndices})`;\n    }\n    const offsets = [];\n    for (let i = rank - 1; i >= 0; i--) {\n      const idx = output.indicesGet('outputIndices', i + output.rank - rank);\n      offsets.push(`${indicesGet(strides, i)} * (${idx} % ${indicesGet(shape, i)})`);\n    }\n    broadcastedIndicesToOffsetImplementation[implKey] = `fn ${implKey}(outputIndices: ${output.type.indices}) -> u32 {\n             return ${offsets.length > 0 ? offsets.join('+') : '0u'};\n           }`;\n\n    return `${implKey}(${varIndices})`;\n  };\n\n  const setByOffset = (offset: number | string, value: string) =>\n    (() => {\n      if (type.storage === type.value) {\n        return `${name}[${offset}]=${value};`;\n      } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\n        // int64, components === 1\n        return `${name}[${offset}]=vec2<u32>(u32(${value}), select(0u, 0xFFFFFFFFu, ${value} < 0));`;\n      } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\n        // uint64, components === 1\n        return `${name}[${offset}]=vec2<u32>(u32(${value}), 0u);`;\n      } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\n        // bool, components === 4\n        return `${name}[${offset}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${value}));`;\n      } else {\n        throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n      }\n    })();\n\n  const getByOffset = (offset: number | string) =>\n    (() => {\n      if (type.storage === type.value) {\n        return `${name}[${offset}]`;\n      } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\n        // int64, components === 1\n        return `i32(${name}[${offset}].x)`;\n      } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\n        // uint64, components === 1\n        return `u32(${name}[${offset}].x)`;\n      } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\n        // bool, components === 4\n        return `vec4<bool>(bool(${name}[${offset}] & 0xFFu), bool(${name}[${offset}] & 0xFF00u), bool(${name}[${\n          offset\n        }] & 0xFF0000u), bool(${name}[${offset}] & 0xFF000000u))`;\n      } else {\n        throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n      }\n    })();\n\n  const getByIndicesImplementation =\n    rank < 2\n      ? ''\n      : `\n  fn get_${name}ByIndices(indices: ${type.indices}) -> ${valueType} {\n    return ${getByOffset(`i2o_${name}(indices)`)};\n  }`;\n\n  const getImplementation =\n    rank < 2\n      ? ''\n      : (() => {\n          const functionParams = rankIdentity.map((i) => `d${i}: u32`).join(', ');\n          const dimsParams = rankIdentity.map((i) => `d${i}`).join(', ');\n          return `\n  fn get_${name}(${functionParams}) -> ${valueType} {\n    return get_${name}ByIndices(${indices(dimsParams)});\n  }`;\n        })();\n\n  const get = (...indices: ReadonlyArray<number | string>) => {\n    if (indices.length !== rank) {\n      throw new Error(`indices length must be ${rank}`);\n    }\n\n    const normalizedIndices = indices.map(normalizeDim).join(',');\n\n    if (rank === 0) {\n      return getByOffset('0u');\n    } else if (rank === 1) {\n      return getByOffset(normalizedIndices[0]);\n    } else {\n      implementationUsed.get = true;\n      implementationUsed.getByIndices = true;\n      implementationUsed.indicesToOffset = true;\n      return `get_${name}(${normalizedIndices})`;\n    }\n  };\n\n  const getByIndices = (varIndices: string) => {\n    if (rank < 2) {\n      return getByOffset(varIndices);\n    } else {\n      implementationUsed.getByIndices = true;\n      implementationUsed.indicesToOffset = true;\n      return `get_${name}ByIndices(${varIndices})`;\n    }\n  };\n\n  const setByIndicesImplementation =\n    rank < 2\n      ? ''\n      : `\n  fn set_${name}ByIndices(indices: ${type.indices}, value: ${valueType}) {\n    ${setByOffset(`i2o_${name}(indices)`, 'value')}\n  }`;\n\n  const setImplementation =\n    rank < 2\n      ? ''\n      : (() => {\n          const functionParams = rankIdentity.map((i) => `d${i}: u32`).join(', ');\n          const dimsParams = rankIdentity.map((i) => `d${i}`).join(', ');\n          return `\n  fn set_${name}(${functionParams}, value: ${valueType}) {\n    set_${name}ByIndices(${indices(dimsParams)}, value);\n  }`;\n        })();\n\n  const set = (...indicesAndValue: ReadonlyArray<number | string>) => {\n    if (indicesAndValue.length !== rank + 1) {\n      throw new Error(`indices length must be ${rank}`);\n    }\n    const value = indicesAndValue[rank];\n    if (typeof value !== 'string') {\n      throw new Error('value must be string');\n    }\n\n    const normalizedIndices = indicesAndValue.slice(0, rank).map(normalizeDim).join(',');\n\n    if (rank === 0) {\n      return setByOffset('0u', value);\n    } else if (rank === 1) {\n      return setByOffset(normalizedIndices[0], value);\n    } else {\n      implementationUsed.set = true;\n      implementationUsed.setByIndices = true;\n      implementationUsed.indicesToOffset = true;\n      return `set_${name}(${normalizedIndices}, ${value})`;\n    }\n  };\n\n  const setByIndices = (varIndices: string, value: string) => {\n    if (rank < 2) {\n      return setByOffset(varIndices, value);\n    } else {\n      implementationUsed.setByIndices = true;\n      implementationUsed.indicesToOffset = true;\n      return `set_${name}ByIndices(${varIndices}, ${value});`;\n    }\n  };\n\n  const impl = () => {\n    const impls = [];\n    let needShapeStrides = false;\n    if (implementationUsed.offsetToIndices) {\n      impls.push(offsetToIndicesImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.indicesToOffset) {\n      impls.push(indicesToOffsetImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.broadcastedIndicesToOffset) {\n      Object.values(broadcastedIndicesToOffsetImplementation).forEach((impl) => impls.push(impl));\n      needShapeStrides = true;\n    }\n    if (implementationUsed.set) {\n      impls.push(setImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.setByIndices) {\n      impls.push(setByIndicesImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.get) {\n      impls.push(getImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.getByIndices) {\n      impls.push(getByIndicesImplementation);\n      needShapeStrides = true;\n    }\n    if (!useUniform && needShapeStrides) {\n      impls.unshift(\n        `const ${shape} = ${type.indices}(${shapeOrRank.join(',')});`,\n        `const ${strides} = ${type.indices}(${ShapeUtil.computeStrides(shapeOrRank).join(',')});`,\n      );\n    }\n    return impls.join('\\n');\n  };\n\n  return {\n    impl,\n    type,\n    offsetToIndices,\n    indicesToOffset,\n    broadcastedIndicesToOffset,\n    indices,\n    indicesGet,\n    indicesSet,\n    set,\n    setByOffset,\n    setByIndices,\n    get,\n    getByOffset,\n    getByIndices,\n    // isVec4,\n    usage,\n    name,\n    strides,\n    shape,\n    rank,\n  };\n};\n\n/**\n * Create a IndicesHelper for an input.\n *\n * @param name - the name of the input.\n * @param type - the tensor type of the input.\n * @param shapeOrRank - the tensor shape or the rank of the input.\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the input.\n */\nexport const inputVariable = (\n  name: string,\n  type: number,\n  shapeOrRank: number | readonly number[],\n  components: 1 | 2 | 3 | 4 = 1,\n): IndicesHelper => createIndicesHelper(name, type, shapeOrRank, 'input', components);\n\n/**\n * Create a IndicesHelper for an output.\n *\n * @param name - the name of the output.\n * @param type - the tensor type of the output.\n * @param shapeOrRank - the tensor shape or the rank of the output.\n * @param components - the number of components of the output. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the output.\n */\nexport const outputVariable = (\n  name: string,\n  type: number,\n  shapeOrRank: number | readonly number[],\n  components: 1 | 2 | 3 | 4 = 1,\n): IndicesHelper => createIndicesHelper(name, type, shapeOrRank, 'output', components);\n\n/**\n * Create a IndicesHelper for an internal variable.\n *\n * @param name - the name of the variable.\n * @param type - the tensor type of the variable.\n * @param shapeOrRank - the tensor shape or the rank of the variable.\n * @param components - the number of components of the variable. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the variable.\n */\nexport const internalVariable = (\n  name: string,\n  type: number,\n  shapeOrRank: number | readonly number[],\n  components: 1 | 2 | 3 | 4 = 1,\n): IndicesHelper => createIndicesHelper(name, type, shapeOrRank, 'internal', components);\n\nexport type UniformDataElementType = 'u32' | 'f16' | 'f32' | 'i32';\nexport type UniformsArrayType = Array<{ name: string; type: UniformDataElementType; length?: number }>;\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  /**\n   * A helper function to generate the start of main function in WGSL source code.\n   *\n   * @example\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\n   *  ...\n   *\n   *  ${shaderHelper.mainStart()}\n   *    // your code here inside main() function\n   *    ...\n   *  }\n   * `;\n   *\n   * @param workgroupSize - an optional workgroup size. default is WORKGROUP_SIZE.\n   */\n  mainStart(workgroupSize?: number | [number, number, number]): string;\n\n  /**\n   * A helper function to generate the code snippet for guarding against out-of-bounds size.\n   *\n   * @example\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\n   *  ...\n   *\n   *  ${shaderHelper.mainStart()}\n   *    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n   *\n   *    // your code here inside main() function\n   *    ...\n   *  }\n   * `;\n   *\n   * @param size - the size of the data to guard against. can be a number or a string (WGSL `u32` expression).\n   */\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n\n  /**\n   * A helper function to generate the code snippet for declaring multiple inputs or outputs.\n   *\n   * @param variables - an array of IndicesHelper for the variables.\n   */\n  declareVariables(...variables: IndicesHelper[]): string;\n\n  /**\n   * A helper function to register one uniform. Can be called multiple times to register multiple uniforms.\n   *\n   * @param name - the name of the uniform.\n   * @param type - the type of the uniform.\n   * @param length - the length of the uniform, default to 1 when it is not provided.\n   */\n  registerUniform(name: string, type: string, length?: number): ShaderHelper;\n\n  /**\n   * A helper function to register multiple uniforms. Can be called multiple times to register multiple uniforms.\n   *\n   * @param uniforms - an array of uniforms. Each element of the array is an object with 2 properties: `name` and\n   *     `type`.\n   */\n  registerUniforms(uniforms: UniformsArrayType): ShaderHelper;\n\n  /**\n   * A helper function to register multiple internal variables. Can be called multiple times to register multiple\n   * internal variables.\n   *\n   * @param variables - an array of IndicesHelper for the variables.\n   */\n  registerInternalVariables(...variables: IndicesHelper[]): ShaderHelper;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(\n    private normalizedDispatchGroup: [number, number, number],\n    private limits: GPUSupportedLimits,\n  ) {}\n\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number | string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n\n  mainStart(workgroupSize: number | [number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    if (\n      workgroupSizeX > this.limits.maxComputeWorkgroupSizeX ||\n      workgroupSizeY > this.limits.maxComputeWorkgroupSizeY ||\n      workgroupSizeZ > this.limits.maxComputeWorkgroupSizeZ\n    ) {\n      throw new Error(\n        `workgroup size [${workgroupSizeX}, ${workgroupSizeY}, ${\n          workgroupSizeZ\n        }] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${\n          this.limits.maxComputeWorkgroupSizeY\n        }, ${this.limits.maxComputeWorkgroupSizeZ}].`,\n      );\n    }\n\n    if (workgroupSizeX * workgroupSizeY * workgroupSizeZ > this.limits.maxComputeInvocationsPerWorkgroup) {\n      throw new Error(\n        `workgroup size [${workgroupSizeX}, ${workgroupSizeY}, ${\n          workgroupSizeZ\n        }] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`,\n      );\n    }\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch\n      ? `@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(local_invocation_id) local_id : vec3<u32>`\n      : `@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch\n      ? `let global_idx = global_id.x;\n         let workgroup_index = workgroup_id.x;`\n      : `let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n             workgroup_id.y * num_workgroups[0] + workgroup_id.x;\n         let global_idx = workgroup_index * ${workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_idx;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n\n  private appendVariableUniforms(variable: IndicesHelper): void {\n    if (variable.rank !== 0) {\n      if (variable.shape.startsWith('uniforms.')) {\n        this.uniforms.push({ name: variable.shape.replace('uniforms.', ''), type: 'u32', length: variable.rank });\n      }\n      if (variable.strides.startsWith('uniforms.')) {\n        this.uniforms.push({ name: variable.strides.replace('uniforms.', ''), type: 'u32', length: variable.rank });\n      }\n    }\n  }\n\n  private declareVariable(variable: IndicesHelper, bindingIndex: number): string {\n    if (variable.usage === 'internal') {\n      throw new Error('cannot use internal variable with declareVariable(). use registerInternalVariables() instead.');\n    }\n    this.variables.push(variable);\n    this.appendVariableUniforms(variable);\n\n    const access = variable.usage === 'input' ? 'read' : 'read_write';\n    const storageType = variable.type.storage;\n    return `@group(0) @binding(${bindingIndex}) var<storage, ${access}> ${variable.name}: array<${storageType}>;`;\n  }\n\n  declareVariables(...variables: IndicesHelper[]): string {\n    return variables.map((v) => this.declareVariable(v, this.variableIndex++)).join('\\n');\n  }\n\n  private registerInternalVariable(variable: IndicesHelper): void {\n    if (variable.usage !== 'internal') {\n      throw new Error(\n        'cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.',\n      );\n    }\n\n    this.internalVariables.push(variable);\n    this.appendVariableUniforms(variable);\n  }\n\n  registerInternalVariables(...variables: IndicesHelper[]): ShaderHelper {\n    variables.forEach((v) => this.registerInternalVariable(v));\n    return this;\n  }\n\n  registerUniform(name: string, type: UniformDataElementType, length = 1): ShaderHelper {\n    this.uniforms.push({ name, type, length });\n    return this;\n  }\n\n  registerUniforms(additionalUniforms: UniformsArrayType): ShaderHelper {\n    this.uniforms = this.uniforms.concat(additionalUniforms);\n    return this;\n  }\n\n  private internalVariables: IndicesHelper[] = [];\n  private variables: IndicesHelper[] = [];\n  private uniforms: UniformsArrayType = [];\n  private uniformDeclaration(): string {\n    if (this.uniforms.length === 0) {\n      return '';\n    }\n\n    const uniformSnippets: string[] = [];\n    for (const { name, type, length } of this.uniforms) {\n      if (length && length > 4) {\n        if (type === 'f16') {\n          uniformSnippets.push(`@align(16) ${name}:array<mat2x4<${type}>, ${Math.ceil(length / 8)}>`);\n        } else {\n          uniformSnippets.push(`${name}:array<vec4<${type}>, ${Math.ceil(length / 4)}>`);\n        }\n      } else {\n        const typeTemp = length == null || length === 1 ? type : `vec${length}<${type}>`;\n        uniformSnippets.push(`${name}:${typeTemp}`);\n      }\n    }\n\n    return `\n      struct Uniforms { ${uniformSnippets.join(', ')} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`;\n  }\n  private variableIndex = 0;\n\n  /**\n   * Get additional implementation that needs to be added to the shader source.\n   */\n  get additionalImplementations(): string {\n    return (\n      this.uniformDeclaration() +\n      this.variables.map((i) => i.impl()).join('\\n') +\n      this.internalVariables.map((i) => i.impl()).join('\\n')\n    );\n  }\n\n  /**\n   * Get the variable info of the shader program.\n   */\n  get variablesInfo(): ProgramUniformVariableInfo[] | undefined {\n    if (this.uniforms.length === 0) {\n      return undefined;\n    }\n\n    const uniformWgslTypeToDataType = (type: UniformDataElementType) =>\n      [DataType.uint32, DataType.float16, DataType.float, DataType.int32][['u32', 'f16', 'f32', 'i32'].indexOf(type)];\n    return this.uniforms.map((u) => [uniformWgslTypeToDataType(u.type), u.length ?? 1]);\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number], limits: GPUSupportedLimits) =>\n  new ShaderHelperImpl(dispatchGroup, limits);\n\n/**\n * This function comes from https://github.com/tensorflow/tfjs/blob/master/tfjs-core/src/ops/broadcast_util.ts#L18-L40\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport const getBroadcastDims = (inShape: readonly number[], outShape: readonly number[]): number[] => {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n};\n\nconst getAdjustedPerm = (inputRank: number, perm: number[]): number[] =>\n  perm && perm.length !== inputRank ? [...new Array(inputRank).keys()].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n  ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape.length, perm));\n\nconst permFunctionBody = (perm: number[], rank: number, input: IndicesHelper, output: IndicesHelper): string => {\n  let reverseFunc = `fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\n    var a: ${input.type.indices};`;\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc += input.indicesSet('a', perm[i], `i[${i}]`);\n  }\n  return (reverseFunc += 'return a;}');\n};\n\nconst squeezeShape = (shape: readonly number[], adjustedPerm: number[]): { newShape: number[]; newPerm: number[] } => {\n  const newShape: number[] = [];\n  const newPerm: number[] = [];\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n    }\n    if (shape[adjustedPerm[i]] !== 1) {\n      newPerm.push(adjustedPerm[i]);\n    }\n  }\n  return { newShape, newPerm };\n};\n\nexport const createTransposeProgramInfo = (inputTensor: TensorView, permAttr: number[]): ProgramInfo => {\n  const inputDataType = inputTensor.dataType;\n  const inputRank = inputTensor.dims.length;\n  const perm = getAdjustedPerm(inputRank, permAttr);\n  const outputShape = getOutputShape(inputTensor.dims, perm);\n  const { newShape, newPerm } = squeezeShape(inputTensor.dims, perm);\n  const channelsLast = ShapeUtil.areEqual(newPerm, [2, 3, 1]);\n  const channelsFirst = ShapeUtil.areEqual(newPerm, [3, 1, 2]);\n  const useShared = (newShape.length === 2 && newPerm[0] > newPerm[1]) || channelsLast || channelsFirst;\n  let newInputShape = useShared ? newShape : inputTensor.dims;\n  let newOutputShape = outputShape;\n  if (useShared) {\n    newInputShape = channelsLast\n      ? [newShape[0], newShape[1] * newShape[2]]\n      : channelsFirst\n        ? [newShape[0] * newShape[1], newShape[2]]\n        : newShape;\n    newOutputShape = [newInputShape[1], newInputShape[0]];\n  }\n  const input = inputVariable('a', inputDataType, newInputShape.length);\n  const output = outputVariable('output', inputDataType, newOutputShape.length);\n  const tileSize = 16;\n  let getShaderSource;\n  if (useShared) {\n    getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n  var<workgroup> tile : array<array<${output.type.value}, ${tileSize + 1}>, ${tileSize}>;\n  ${shaderHelper.mainStart([tileSize, tileSize, 1])}\n    let stride = (uniforms.output_shape[1] - 1) / ${tileSize} + 1;\n    let workgroup_id_x = workgroup_index % stride;\n    let workgroup_id_y = workgroup_index / stride;\n    let input_col = workgroup_id_y * ${tileSize}u + local_id.x;\n    let input_row = workgroup_id_x * ${tileSize}u + local_id.y;\n    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {\n      tile[local_id.y][local_id.x] = ${input.getByIndices(`${input.type.indices}(input_row, input_col)`)};\n    }\n    workgroupBarrier();\n\n    let output_col = workgroup_id_x * ${tileSize}u + local_id.x;\n    let output_row = workgroup_id_y * ${tileSize}u + local_id.y;\n    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {\n      ${output.setByIndices(`${output.type.indices}(output_row, output_col)`, 'tile[local_id.x][local_id.y]')}\n    }\n  }`;\n  } else {\n    getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n\n  ${permFunctionBody(perm, inputRank, input, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n    let indices = ${output.offsetToIndices('global_idx')};\n    let aIndices = perm(indices);\n\n    ${output.setByOffset('global_idx', input.getByIndices('aIndices'))}\n  }`;\n  }\n  return {\n    name: useShared ? 'TransposeShared' : 'Transpose',\n    shaderCache: { hint: `${permAttr}`, inputDependencies: ['rank'] },\n    getRunData: () => {\n      const outputSize = ShapeUtil.size(outputShape);\n      return {\n        outputs: [{ dims: outputShape, dataType: inputTensor.dataType }],\n        dispatchGroup: useShared\n          ? { x: Math.ceil(newOutputShape[1] / tileSize), y: Math.ceil(newOutputShape[0] / tileSize) }\n          : { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms: [\n          { type: DataType.uint32, data: outputSize },\n          ...createTensorShapeVariables(newInputShape, newOutputShape),\n        ],\n      };\n    },\n    getShaderSource,\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createTransposeProgramInfo(context.inputs[0], attributes.perm));\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n  createAttributeWithCacheKey({ perm: attributes.perm as number[] });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramShaderCacheInfo } from '../types';\n\nimport { inputVariable, outputVariable, ShaderHelper } from './common';\nimport { createReduceAttributesFromInputs, ReduceAttributes } from './reduce';\nimport { createTransposeProgramInfo } from './transpose';\n\nconst reduceOps: { [key: string]: string } = {\n  max: 'select(bestValue, candidate, candidate > bestValue)',\n  min: 'select(bestValue, candidate, candidate < bestValue)',\n  mean: 'bestValue + candidate',\n  sum: 'bestValue + candidate',\n  prod: 'bestValue * candidate',\n  sumSquare: 'bestValue + candidate * candidate',\n  logSumExp: 'bestValue + exp(candidate)',\n  l1: 'bestValue + abs(candidate)',\n  l2: 'bestValue + candidate * candidate',\n  logSum: 'bestValue + candidate',\n};\n\nconst reduceSharedOps: { [key: string]: string } = {\n  max: 'select(bestValue, candidate, candidate > bestValue)',\n  min: 'select(bestValue, candidate, candidate < bestValue)',\n  mean: 'bestValue + candidate',\n  sum: 'bestValue + candidate',\n  prod: 'bestValue * candidate',\n  sumSquare: 'bestValue + candidate',\n  logSumExp: 'bestValue + candidate',\n  l1: 'bestValue + candidate',\n  l2: 'bestValue + candidate',\n  logSum: 'bestValue + candidate',\n};\n\nconst reduceInitValues: { [key: string]: string } = {\n  max: '_A[offset]',\n  min: '_A[offset]',\n  mean: '0',\n  sum: '0',\n  prod: '1',\n  sumSquare: '0',\n  logSumExp: '0',\n  l1: '0',\n  l2: '0',\n  logSum: '0',\n};\n\nconst reduceOutputValues: { [key: string]: string } = {\n  max: 'bestValue',\n  min: 'bestValue',\n  sum: 'bestValue',\n  prod: 'bestValue',\n  sumSquare: 'bestValue',\n  logSumExp: 'log(bestValue)',\n  l1: 'bestValue',\n  l2: 'sqrt(bestValue)',\n  logSum: 'log(bestValue)',\n};\n\nconst getInnerMostAxes = (numInnerAxes: number, rank: number): number[] => {\n  const res = [];\n  for (let i = rank - numInnerAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n};\n\nconst computeOutAndReduceShapes = (shape: readonly number[], axes: readonly number[]): [number[], number[]] => {\n  const outputShape = [];\n  const rank = shape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outputShape.push(shape[dim]);\n    }\n  }\n  const reduceShape = axes.map((dim) => shape[dim]);\n  return [outputShape, reduceShape];\n};\n\nconst expandShapeToKeepDim = (shape: number[], axes: number[]): number[] => {\n  const rank = shape.length + axes.length;\n  const expandShape = [];\n  let shapeIdx = 0;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      expandShape.push(shape[shapeIdx++]);\n    } else {\n      expandShape.push(1);\n    }\n  }\n  return expandShape;\n};\n\nconst areAxesInnerMostDims = (axes: number[], rank: number): boolean => {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getAxesPermutation = (axes: number[], rank: number): number[] => {\n  const res = [];\n  if (!areAxesInnerMostDims(axes, rank)) {\n    for (let i = 0; i < rank; ++i) {\n      if (axes.indexOf(i) === -1) {\n        res.push(i);\n      }\n    }\n    axes.forEach((axis) => res.push(axis));\n  }\n  return res;\n};\n\nexport const createReduceSharedProgramInfo = (\n  name: string,\n  shaderCache: ProgramShaderCacheInfo,\n  inputs: readonly TensorView[],\n  reduceType: string,\n  outputDataType: DataType,\n  outputShape: number[],\n  reduceShape: number[],\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n\n  const outputSize = ShapeUtil.size(outputShape);\n  const reduceSize = ShapeUtil.size(reduceShape);\n\n  const input = inputVariable('_A', inputs[0].dataType, inputShape);\n  const output = outputVariable('output', outputDataType, outputShape);\n\n  const workgroupSize = 32;\n\n  const sharedMemorySnippet = `\n          var<workgroup> aBestValues : array<f32, ${workgroupSize}>;\n       `;\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n        ${shaderHelper.registerUniform('reduceSize', 'u32').declareVariables(input, output)}\n        ${sharedMemorySnippet}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${shaderHelper.mainStart(workgroupSize)}\n\n          let outputIndex = global_idx / ${workgroupSize};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${reduceInitValues[reduceType]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${workgroupSize}) {\n           let candidate = f32(${input.getByOffset('offset + k')});\n           bestValue = ${reduceOps[reduceType]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${workgroupSize}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${reduceSharedOps[reduceType]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${output.setByOffset(\n            'outputIndex',\n            `${\n              reduceType === 'mean'\n                ? `${output.type.storage}(bestValue / f32(uniforms.reduceSize))`\n                : `${output.type.storage}(${reduceOutputValues[reduceType]})`\n            }`,\n          )};\n         }\n        }`;\n\n  // One work group is responsible for only one element of output.\n  return {\n    name,\n    shaderCache,\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputDataType }],\n      dispatchGroup: { x: outputSize },\n      programUniforms: [{ type: DataType.uint32, data: reduceSize }],\n    }),\n  };\n};\n\nconst reduceCommon = (\n  context: ComputeContext,\n  name: string,\n  attributes: ReduceAttributes,\n  reduceType: 'sum' | 'sumSquare' | 'prod' | 'min' | 'max' | 'mean' | 'logSumExp' | 'l1' | 'l2' | 'logSum',\n): void => {\n  const updatedAttributes: ReduceAttributes =\n    context.inputs.length === 1 ? attributes : createReduceAttributesFromInputs(context.inputs, attributes);\n\n  let updatedAxes = updatedAttributes.axes;\n  if (updatedAxes.length === 0 && !updatedAttributes.noopWithEmptyAxes) {\n    updatedAxes = context.inputs[0].dims.map((_dim, i) => i);\n  }\n  const normalizeAxes = ShapeUtil.normalizeAxes(updatedAxes, context.inputs[0].dims.length);\n\n  let axes = normalizeAxes;\n  let input = context.inputs[0];\n  const permutedAxes = getAxesPermutation(axes, context.inputs[0].dims.length);\n  if (permutedAxes.length > 0) {\n    input = context.compute(createTransposeProgramInfo(context.inputs[0], permutedAxes), {\n      inputs: [0],\n      outputs: [-1],\n    })[0];\n    axes = getInnerMostAxes(axes.length, input.dims.length);\n  }\n\n  const [outputShape, reduceShape] = computeOutAndReduceShapes(input.dims, axes);\n  let finalOutputShape = outputShape;\n  if (updatedAttributes.keepDims) {\n    finalOutputShape = expandShapeToKeepDim(outputShape, normalizeAxes);\n  }\n\n  context.compute(\n    createReduceSharedProgramInfo(\n      name,\n      { hint: updatedAttributes.cacheKey, inputDependencies: ['type'] },\n      [input],\n      reduceType,\n      context.inputs[0].dataType,\n      finalOutputShape,\n      reduceShape,\n    ),\n    { inputs: [input] },\n  );\n};\n\nexport const reduceMeanShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceMeanShared', attributes, 'mean');\n};\n\nexport const reduceL1Shared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceL1Shared', attributes, 'l1');\n};\n\nexport const reduceL2Shared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceL2Shared', attributes, 'l2');\n};\n\nexport const reduceLogSumExpShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceLogSumExpShared', attributes, 'logSumExp');\n};\n\nexport const reduceMaxShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceMaxShared', attributes, 'max');\n};\n\nexport const reduceMinShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceMinShared', attributes, 'min');\n};\n\nexport const reduceProdShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceProdShared', attributes, 'prod');\n};\n\nexport const reduceSumShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceSumShared', attributes, 'sum');\n};\n\nexport const reduceSumSquareShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceSumSquareShared', attributes, 'sumSquare');\n};\n\nexport const reduceLogSumShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceLogSumShared', attributes, 'logSum');\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramShaderCacheInfo } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\nimport {\n  reduceL1Shared,\n  reduceL2Shared,\n  reduceLogSumExpShared,\n  reduceLogSumShared,\n  reduceMaxShared,\n  reduceMeanShared,\n  reduceMinShared,\n  reduceProdShared,\n  reduceSumShared,\n  reduceSumSquareShared,\n} from './reduce-shared';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('Reduce op requires 1 or 2 inputs.');\n  }\n\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\n    throw new Error('Invalid axes input dims.');\n  }\n};\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  noopWithEmptyAxes: boolean;\n  axes: number[];\n}\n\nexport type ReduceOp = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  axes: readonly number[],\n) => [string, string, string, string, ...string[]];\n\nconst noOp: ReduceOp = (input) => ['', '', `var value = ${input.getByIndices('input_indices')};`, ''];\nexport const createReduceProgramInfo = (\n  name: string,\n  shaderCache: ProgramShaderCacheInfo,\n  inputs: readonly TensorView[],\n  reduceOp: ReduceOp,\n  axesInput: number[],\n  outputDataType: DataType,\n  keepDims = false,\n  noopWithEmptyAxes = false,\n): ProgramInfo => {\n  const outputShape: number[] = [];\n  const inputShape = inputs[0].dims;\n  const inputRank = inputShape.length;\n  const axes = ShapeUtil.normalizeAxes(axesInput, inputRank);\n  const reduceOnAllAxes = !noopWithEmptyAxes && axes.length === 0;\n  inputShape.forEach((d, i) => {\n    if (reduceOnAllAxes || axes.indexOf(i) >= 0) {\n      if (keepDims) {\n        outputShape.push(1);\n      } // else { // skip this axis}\n    } else {\n      outputShape.push(d);\n    }\n  });\n  const outputRank = outputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const idxCopy: string[] = []; // copy output indexes to input indexes\n\n    const input = inputVariable('_A', inputs[0].dataType, inputRank);\n    const output = outputVariable('output', outputDataType, outputRank);\n    const ops = reduceOp(input, output, axes);\n    let reduceOps = ops[2];\n\n    for (let k = 0, l = 0; k < inputRank; k++) {\n      // if this axis is reduced\n      if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\n        if (keepDims) {\n          l++;\n        }\n        // loop over the d-th axis\n        reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputShape[k]}; j${k}++) {\n                  ${ops[2].includes('last_index') ? `let last_index = j${k};` : ''}\n                  ${input.indicesSet('input_indices', k, `j${k}`)}\n                  ${reduceOps}\n                }`;\n      } else {\n        idxCopy.push(`${input.indicesSet('input_indices', k, output.indicesGet('output_indices', l))};`);\n        l++;\n      }\n    }\n    return `\n\n        ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n          var input_indices: ${input.type.indices};\n          let output_indices = ${output.offsetToIndices('global_idx')};\n\n          ${idxCopy.join('\\n')}\n          ${ops[0]}       // init ops for reduce max/min\n          ${ops[1]}\n          ${reduceOps}\n          ${ops[3]}\n          ${ops.length === 4 ? output.setByOffset('global_idx', 'value') : ops.slice(4).join('\\n')}\n        }`;\n  };\n\n  return {\n    name,\n    shaderCache,\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputDataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: outputSize },\n        ...createTensorShapeVariables(inputShape, outputShape),\n      ],\n    }),\n  };\n};\n\nexport const createReduceAttributesFromInputs = (\n  inputs: readonly TensorView[],\n  attributes: ReduceAttributes,\n): ReduceAttributes => {\n  const axes: number[] = [];\n  if (inputs[1].dims[0] > 0) {\n    inputs[1].getBigInt64Array().forEach((v) => axes.push(Number(v)));\n  }\n  return createAttributeWithCacheKey({\n    axes,\n    keepDims: attributes.keepDims,\n    noopWithEmptyAxes: attributes.noopWithEmptyAxes,\n  });\n};\n\nconst runReduceProgram = (\n  context: ComputeContext,\n  name: string,\n  attributes: ReduceAttributes,\n  reduceOp: ReduceOp,\n): void => {\n  const inputs = context.inputs;\n  const updatedAttributes: ReduceAttributes =\n    inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\n\n  context.compute(\n    createReduceProgramInfo(\n      name,\n      { hint: updatedAttributes.cacheKey, inputDependencies: ['rank'] },\n      [inputs[0]],\n      updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp,\n      updatedAttributes.axes,\n      inputs[0].dataType,\n      updatedAttributes.keepDims,\n      updatedAttributes.noopWithEmptyAxes,\n    ),\n    { inputs: [0] },\n  );\n};\n\nconst reduceLogSumNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(0);`,\n    '',\n    `value += ${input.getByIndices('input_indices')};`,\n    'value = log(value);',\n  ];\n  runReduceProgram(context, 'ReduceLogSum', attributes, reduceOp);\n};\n\nconst reduceL1Naive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(0);`,\n    '',\n    `value += abs(${input.getByIndices('input_indices')});`,\n    '',\n  ];\n  runReduceProgram(context, 'ReduceL1', attributes, reduceOp);\n};\n\nconst reduceL2Naive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n    '',\n    `t = ${input.getByIndices('input_indices')}; value += (t * t);`,\n    'value = sqrt(value);',\n  ];\n  runReduceProgram(context, 'ReduceL2', attributes, reduceOp);\n};\n\nconst reduceLogSumExpNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(0);`,\n    '',\n    `value += exp(${input.getByIndices('input_indices')});`,\n    'value = log(value);',\n  ];\n  runReduceProgram(context, 'ReduceLogSumExp', attributes, reduceOp);\n};\n\nconst reduceMaxNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, _output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(input.indicesSet('input_indices', k, 0));\n      }\n    }\n\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByIndices('input_indices')};`,\n      `value = max(value, ${input.getByIndices('input_indices')});`,\n      '',\n    ];\n  };\n  runReduceProgram(context, 'ReduceMax', attributes, reduceOp);\n};\n\nconst reduceMeanNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output, axes) => {\n    let size = 1.0;\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        // TODO: this depends on the input dims. If we want to use uniform, this need to be updated.\n        size *= context.inputs[0].dims[k];\n      }\n    }\n\n    return [\n      'var sum = f32(0);',\n      '',\n      `sum += f32(${input.getByIndices('input_indices')});`,\n      `let value = ${output.type.value}(sum / ${size});`,\n    ];\n  };\n  runReduceProgram(context, 'ReduceMean', attributes, reduceOp);\n};\n\nconst reduceMinNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, _output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`input_indices[${k}] = 0;`); // first element\n      }\n    }\n\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByIndices('input_indices')};`,\n      `value = min(value, ${input.getByIndices('input_indices')});`,\n      '',\n    ];\n  };\n  runReduceProgram(context, 'ReduceMin', attributes, reduceOp);\n};\n\nconst reduceProdNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(1);`,\n    '',\n    `value *= ${input.getByIndices('input_indices')};`,\n    '',\n  ];\n  runReduceProgram(context, 'ReduceProd', attributes, reduceOp);\n};\n\nconst reduceSumNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(0);`,\n    '',\n    `value += ${input.getByIndices('input_indices')};`,\n    '',\n  ];\n  runReduceProgram(context, 'ReduceSum', attributes, reduceOp);\n};\n\nconst reduceSumSquareNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n    '',\n    `t = ${input.getByIndices('input_indices')}; value += t * t;`,\n    '',\n  ];\n  runReduceProgram(context, 'ReduceSumSquare', attributes, reduceOp);\n};\n\nconst useNaiveReduceMethod = (\n  shape: readonly number[],\n  axes: readonly number[],\n  noopWithEmptyAxes: boolean,\n): boolean => {\n  if (axes.length === 0) {\n    return noopWithEmptyAxes;\n  }\n\n  let outputSize = 1;\n  let reduceSize = 1;\n  for (let dim = 0; dim < axes.length; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outputSize *= shape[dim];\n    } else {\n      reduceSize *= shape[dim];\n    }\n  }\n\n  // The condition data is very rough, although considering the count of Execution Unit (EU), the potential\n  // work groups in a EU and the counts of loops in the naive and shared methods, also doing experiments\n  // on some machines.\n  return reduceSize < 32 && outputSize > 1024;\n};\n\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceMeanNaive(context, attributes);\n  } else {\n    reduceMeanShared(context, attributes);\n  }\n};\n\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceL1Naive(context, attributes);\n  } else {\n    reduceL1Shared(context, attributes);\n  }\n};\n\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceL2Naive(context, attributes);\n  } else {\n    reduceL2Shared(context, attributes);\n  }\n};\n\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceLogSumExpNaive(context, attributes);\n  } else {\n    reduceLogSumExpShared(context, attributes);\n  }\n};\n\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceMaxNaive(context, attributes);\n  } else {\n    reduceMaxShared(context, attributes);\n  }\n};\n\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceMinNaive(context, attributes);\n  } else {\n    reduceMinShared(context, attributes);\n  }\n};\n\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceProdNaive(context, attributes);\n  } else {\n    reduceProdShared(context, attributes);\n  }\n};\n\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceSumNaive(context, attributes);\n  } else {\n    reduceSumShared(context, attributes);\n  }\n};\n\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceSumSquareNaive(context, attributes);\n  } else {\n    reduceSumSquareShared(context, attributes);\n  }\n};\n\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceLogSumNaive(context, attributes);\n  } else {\n    reduceLogSumShared(context, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// TODO: this is the same naive implementation we use for reduce that has\n// performance limitations when the reduced axis is long. Need to add\n// a optimized codepath for this.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext } from '../types';\n\nimport { createReduceProgramInfo, ReduceOp } from './reduce';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('ArgMinMaxOp op requires 1 or 2 inputs.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport interface ArgMinMaxAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  axis: number;\n  selectLastIndex: number;\n}\n\nexport const argMin = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\n  validateInputs(context.inputs);\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`input_indices[${k}] = 0;`); // first element\n      }\n    }\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByIndices('input_indices')};\\nvar best_index : i32 = 0;`,\n      `if (${input.getByIndices('input_indices')} ${attributes.selectLastIndex > 0 ? '<=' : '<'} value) {\n         value = ${input.getByIndices('input_indices')};\n         best_index = i32(last_index);\n       }`,\n      '',\n      output.setByOffset('global_idx', 'best_index'),\n    ];\n  };\n\n  context.compute(\n    createReduceProgramInfo(\n      'ArgMin',\n      { hint: attributes.cacheKey, inputDependencies: ['rank'] },\n      [context.inputs[0]],\n      argMinMaxOp,\n      [attributes.axis],\n      DataType.int64,\n      attributes.keepDims,\n    ),\n    { inputs: [0] },\n  );\n};\n\nexport const argMax = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\n  validateInputs(context.inputs);\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`input_indices[${k}] = 0;`); // first element\n      }\n    }\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByIndices('input_indices')};\\nvar best_index : i32 = 0;`,\n      `if (${input.getByIndices('input_indices')} ${attributes.selectLastIndex > 0 ? '>=' : '>'} value) {\n         value = ${input.getByIndices('input_indices')};\n         best_index = i32(last_index);\n       }`,\n      '',\n      output.setByOffset('global_idx', 'best_index'),\n    ];\n  };\n\n  context.compute(\n    createReduceProgramInfo(\n      'argMax',\n      { hint: attributes.cacheKey, inputDependencies: ['rank'] },\n      [context.inputs[0]],\n      argMinMaxOp,\n      [attributes.axis],\n      DataType.int64,\n      attributes.keepDims,\n    ),\n    { inputs: [0] },\n  );\n};\n\nexport const parseArgMinMaxAttributes = (attributes: Record<string, unknown>): ArgMinMaxAttributes =>\n  createAttributeWithCacheKey(attributes as Omit<ArgMinMaxAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, GpuDataType, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  tensorTypeToWsglValueType,\n  UniformDataElementType,\n  UniformsArrayType,\n} from './common';\n\nexport const enum AttentionQkvFormat {\n  unknown, // enum value not set, or depends on qkv projection implementation details\n  qkvBNSH, // for non-packed qkv, permuted\n  qkvBSNH, // for non-packed qkv, not permuted, used by memory efficient attention or MultiHeadAttention\n  qkvBSN3H, // for TRT fused attention, qkv are packed\n  qkvBNSHqkvBS3NH, // for TRT fused causal attention, data has two formats (qkv is 3BNSH, gemm_buffer is BS3NH)\n  qKvBSNHxBSN2H, // for TRT fused cross attention, kv are packed\n  qkvTNH, // for memory efficient attention, qkv are not packed, and paddings are removed.\n  qkvTN3H, // for TRT fused attention, qkv are packed and paddings are removed\n}\n\nexport const enum AttentionMaskType {\n  none, // No mask\n  mask1dKeySeqLen, // [batch_size], key sequence length\n  mask1dEndStart, // [2 * batch_size] with end positions and start positions\n  mask1DKeySeqLenStart, // [3 * batch_size + 2] with [key_len[0], ..., key_len[batch_size - 1], query_start[0],\n  // ..., query_start[batch_size - 1], query_end[batch_size - 1], key_start[0], ...,\n  // key_start[batch_size - 1], key_end[batch_size - 1]]\n  mask2dDummy, // dummy mask with shape [1, 1] or [batch_size, 1]. It has same effect as no mask.\n  mask2dKeyPadding, // [batch_size, total_sequence_length]\n  mask3dAttention, // [batch_size, sequence_length, total_sequence_length]\n  mask4dMegatron, // Megatron causal mask with shape [batch_size, 1, max_sequence_length, max_sequence_length]\n  maskUnknown,\n}\n\nexport interface AttentionParameters {\n  batchSize: number;\n  sequenceLength: number;\n  pastSequenceLength: number;\n  kvSequenceLength: number;\n  totalSequenceLength: number;\n  maxSequenceLength: number;\n  inputHiddenSize: number;\n  hiddenSize: number;\n  vHiddenSize: number;\n  headSize: number;\n  vHeadSize: number;\n  numHeads: number;\n  kvNumHeads?: number;\n  nReps?: number;\n  isUnidirectional?: boolean;\n  pastPresentShareBuffer: boolean;\n  maskFilterValue?: number;\n  maskType: AttentionMaskType;\n  scale: number;\n  broadcastResPosBias: boolean;\n  passPastInKv: boolean;\n  qkvFormat: AttentionQkvFormat;\n  isPastkvBSNH?: boolean;\n}\n\nexport interface AttentionAttrs {\n  numHeads: number;\n  kvNumHeads?: number;\n  isUnidirectional?: number;\n  maskFilterValue?: number;\n  scale: number;\n  doRotary: number;\n  qkvHiddenSizes: number[];\n  pastPresentShareBuffer: boolean;\n}\n\nconst validateAttentionInputs = (inputs: readonly TensorView[], attributes: AttentionAttrs): AttentionParameters => {\n  // Abbreviation and Meanings:\n  //   B:    batch_size\n  //   S:    sequence_length (input sequence length of query)\n  //   P:    past_sequence_length (past sequence length of key or value)\n  //   L:    kv_sequence_length (input sequence length of key or value)\n  //   M:    max_sequence_length\n  //   T:    total_sequence_length = past_sequence_length + kv_sequence_length\n  //   N:    num_heads\n  //   H:    head size for Q and K, aka q_head_size or k_head_size or qk_head_size\n  //   H_v:  v_head_size\n  //   D_i:  input hidden size\n  //   D:    hidden size for Q and K (D = N * H), aka q_hidden_size or k_hidden_size or qk_hidden_size\n  //   D_v:  v_hidden_size = num_heads * v_head_size\n\n  // When past state is used, Q, K and V should have same hidden size (unless we split it into past_key and past_value).\n\n  // Input shapes:\n  //   input        (Q/K/V)    : (B, S, D_i)\n  //   weights      (Q/K/V)    : (D_i, D + D + D_v)\n  //   bias         (Q/K/V)    : (D + D + D_v)\n  //   mask_index              : see below\n  //   past         (K/V)      : (2, B, N, P, H) or NULL\n  //   attention_bias          : (B, N, S, T) or NULL\n\n  // For mask_index, the following shapes are supported:\n  //     NULL, (B, 1), (1, 1)\n  //     (B), (2 * B), (3 * B + 2)\n  //     (B, T)\n  //     (B, S, T)\n  //     (B, 1, M, M)\n  //\n  // When a model is pruned (like some attention heads are removed in Q/K/V), input_hidden_size could be larger\n  // than hidden dimension of Q, K and V.\n\n  const input = inputs[0];\n  const weights = inputs[1];\n  const bias = inputs[2];\n  const maskIndex = inputs[3];\n  const past = inputs[4];\n  const attentionBias = inputs[5];\n\n  if (past && attentionBias) {\n    throw new Error('Attention cannot have both past and attention_bias');\n  }\n\n  if (input.dims.length !== 3) {\n    throw new Error('Input \"input\" must have 3 dimensions');\n  }\n\n  const batchSize = input.dims[0];\n  const sequenceLength = input.dims[1];\n  const inputHiddenSize = input.dims[2];\n\n  if (bias.dims.length !== 1) {\n    throw new Error('Input \"bias\" is expected to have 1 dimensions');\n  }\n\n  if (weights.dims.length !== 2) {\n    throw new Error('Input \"weights\" is expected to have 2 dimensions');\n  }\n\n  if (weights.dims[0] !== inputHiddenSize) {\n    throw new Error('Input 1 dimension 0 should have same length as dimension 2 of input 0');\n  }\n\n  if (bias.dims[0] !== weights.dims[1]) {\n    throw new Error('Input \"bias\" dimension 0 should have same length as dimension 1 of input \"weights\"');\n  }\n\n  let qHiddenSize = bias.dims[0] / 3;\n  let kHiddenSize = qHiddenSize;\n  let vHiddenSize = kHiddenSize;\n  if (attributes.qkvHiddenSizes.length > 0) {\n    if (attributes.qkvHiddenSizes.length !== 3) {\n      throw new Error('qkv_hidden_sizes attribute should have 3 elements');\n    }\n    for (const sz of attributes.qkvHiddenSizes) {\n      if (sz % attributes.numHeads !== 0) {\n        throw new Error('qkv_hidden_sizes should be divisible by num_heads');\n      }\n    }\n\n    qHiddenSize = attributes.qkvHiddenSizes[0];\n    kHiddenSize = attributes.qkvHiddenSizes[1];\n    vHiddenSize = attributes.qkvHiddenSizes[2];\n  }\n\n  const kvSequenceLength = sequenceLength;\n\n  if (qHiddenSize !== kHiddenSize) {\n    throw new Error('qkv_hidden_sizes first element should be same as the second');\n  }\n\n  if (bias.dims[0] !== qHiddenSize + kHiddenSize + vHiddenSize) {\n    throw new Error('Input \"bias\" dimension 0 should have same length as sum of Q/K/V hidden sizes');\n  }\n\n  let pastSequenceLength = 0;\n  if (past) {\n    if (kHiddenSize !== vHiddenSize) {\n      throw new Error('Input \"past\" expect k_hidden_size == v_hidden_size');\n    }\n    if (past.dims.length !== 5) {\n      throw new Error('Input \"past\" must have 5 dimensions');\n    }\n    if (past.dims[0] !== 2) {\n      throw new Error('Input \"past\" first dimension must be 2');\n    }\n    if (past.dims[1] !== batchSize) {\n      throw new Error('Input \"past\" second dimension must be batch_size');\n    }\n    if (past.dims[2] !== attributes.numHeads) {\n      throw new Error('Input \"past\" third dimension must be num_heads');\n    }\n    if (past.dims[4] !== kHiddenSize / attributes.numHeads) {\n      throw new Error('Input \"past\" fifth dimension must be k_hidden_size / num_heads');\n    }\n\n    if (!attributes.pastPresentShareBuffer) {\n      pastSequenceLength = past.dims[3];\n    }\n    // TODO: handle past_seq_len\n  }\n\n  const totalSequenceLength = kvSequenceLength + pastSequenceLength;\n  const maxSequenceLength = -1;\n\n  const maskType = AttentionMaskType.none;\n  if (maskIndex) {\n    // maskType = AttentionMaskType.MASK_UNKNOWN;\n    // TODO: handle mask\n    throw new Error('Mask not supported');\n  }\n\n  if (past) {\n    throw new Error('past is not supported');\n  }\n\n  if (attentionBias) {\n    if (attentionBias.dims.length !== 4) {\n      throw new Error('Input \"attention_bias\" must have 4 dimensions');\n    }\n\n    // TODO: support broadcasting the first and second dimensions of attention_bias\n    if (\n      attentionBias.dims[0] !== batchSize ||\n      attentionBias.dims[1] !== attributes.numHeads ||\n      attentionBias.dims[2] !== sequenceLength ||\n      attentionBias.dims[3] !== totalSequenceLength\n    ) {\n      throw new Error('Expect \"attention_bias\" shape (batch_size, num_heads, sequence_length, total_sequence_length)');\n    }\n  }\n\n  return {\n    batchSize,\n    sequenceLength,\n    pastSequenceLength,\n    kvSequenceLength,\n    totalSequenceLength,\n    maxSequenceLength,\n    inputHiddenSize,\n    hiddenSize: qHiddenSize,\n    vHiddenSize,\n    headSize: Math.floor(qHiddenSize / attributes.numHeads),\n    vHeadSize: Math.floor(vHiddenSize / attributes.numHeads),\n    numHeads: attributes.numHeads,\n    isUnidirectional: false,\n    pastPresentShareBuffer: false,\n    maskFilterValue: attributes.maskFilterValue,\n    maskType,\n    scale: attributes.scale,\n    broadcastResPosBias: false,\n    passPastInKv: false,\n    qkvFormat: AttentionQkvFormat.qkvBNSH,\n  };\n};\n\nconst createInPlaceSoftmaxProgramInfo = (input: TensorView, n: number, d: number) => {\n  const components = getMaxComponents(d);\n  let WG = 64;\n  const dComp = d / components;\n  if (dComp < WG) {\n    WG = 32;\n  }\n  const elementsPerThread = Math.ceil(d / components / WG);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.float, data: 1 / d },\n    { type: DataType.uint32, data: dComp },\n    { type: DataType.uint32, data: elementsPerThread },\n  ];\n  const dataType = tensorTypeToWsglStorageType(input.dataType, components);\n  const f32Type = tensorTypeToWsglValueType(DataType.float, components);\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type'];\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const inputHelper = outputVariable('x', input.dataType, input.dims, components);\n    const elemValueType = tensorTypeToWsglValueType(input.dataType);\n    const uniforms: UniformsArrayType = [\n      { name: 'd_inv', type: 'f32' },\n      { name: 'd_comp', type: 'u32' },\n      { name: 'elements_per_thread', type: 'u32' },\n    ];\n\n    return `\n  var<workgroup> thread_max: array<f32, ${WG}>;\n  var<workgroup> thread_sum: array<f32, ${WG}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(inputHelper)}\n  ${shaderHelper.mainStart([WG, 1, 1])}\n    let local_offset = local_idx * uniforms.elements_per_thread;\n    let offset = (global_idx / ${WG}) * uniforms.d_comp + local_offset;\n\n    var thread_max_vector = ${f32Type}(-3.402823e+38f);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${f32Type}(x[offset + i]), thread_max_vector);\n    }\n    thread_max[local_idx] = ${(() => {\n      switch (components) {\n        case 1:\n          return 'thread_max_vector';\n        case 2:\n          return 'max(thread_max_vector.x, thread_max_vector.y)';\n        case 4:\n          return 'max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))';\n        default:\n          throw new Error(`Unsupported components: ${components}`);\n      }\n    })()};\n    workgroupBarrier();\n\n    var max_value =  f32(-3.402823e+38f);\n    for (var i = 0u; i < ${WG}; i++) {\n      max_value = max(thread_max[i], max_value);\n    }\n\n    var sum_vector = ${f32Type}(0);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n      sum_vector += exp(${f32Type}(x[offset + i]) - max_value);\n    }\n    thread_sum[local_idx] = ${(() => {\n      switch (components) {\n        case 1:\n          return 'sum_vector';\n        case 2:\n          return 'sum_vector.x + sum_vector.y';\n        case 4:\n          return 'sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w';\n        default:\n          throw new Error(`Unsupported components: ${components}`);\n      }\n    })()};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${WG}; i++) {\n      sum += thread_sum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n        x[offset + i] = ${inputHelper.type.value}(${elemValueType}(uniforms.d_inv));\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n        var f32input = ${f32Type}(x[offset + i]);\n        x[offset + i] = ${inputHelper.type.value}(exp(f32input - max_value) / sum);\n      }\n    }\n  }`;\n  };\n\n  return {\n    name: 'AttentionProbsSoftmax',\n    shaderCache: { hint: `${WG};${dataType};${components}`, inputDependencies },\n    getShaderSource,\n    getRunData: () => ({ outputs: [], dispatchGroup: { x: n }, programUniforms }),\n  };\n};\n\nconst createAttentionProbsProgramInfo = (\n  outputCount: number,\n  q: TensorView,\n  key: TensorView,\n  pastKey: TensorView | undefined,\n  attentionBias: TensorView | undefined,\n  parameters: AttentionParameters,\n  attributes: AttentionAttrs,\n  pastSequenceLength: number,\n) => {\n  const totalSequenceLength = pastSequenceLength + parameters.kvSequenceLength;\n  const probsShape = [parameters.batchSize, parameters.numHeads, parameters.sequenceLength, totalSequenceLength];\n  const presentKey = parameters.kvNumHeads === undefined && outputCount > 1 && pastKey;\n  const presentKeyShape = presentKey\n    ? [parameters.batchSize, parameters.numHeads, totalSequenceLength, parameters.headSize]\n    : undefined;\n\n  // TODO: handle mask\n\n  const alpha = attributes.scale === 0 ? 1.0 / Math.sqrt(parameters.headSize) : attributes.scale;\n  const components = getMaxComponents(parameters.headSize);\n  const vectorizedHeadSize = parameters.headSize / components;\n  const TILE_SIZE = 12;\n  const dispatch = {\n    x: Math.ceil(totalSequenceLength / TILE_SIZE),\n    y: Math.ceil(parameters.sequenceLength / TILE_SIZE),\n    z: parameters.batchSize * parameters.numHeads,\n  };\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: parameters.sequenceLength },\n    { type: DataType.uint32, data: vectorizedHeadSize },\n    { type: DataType.uint32, data: totalSequenceLength },\n    { type: DataType.uint32, data: parameters.numHeads },\n    { type: DataType.float, data: alpha },\n    { type: DataType.uint32, data: pastSequenceLength },\n    { type: DataType.uint32, data: parameters.kvSequenceLength },\n  ];\n  // Feed pastKey to the shader-code only if it is non-zero and presentKey is being produced\n  const feedPastKey = presentKey && pastKey && ShapeUtil.size(pastKey.dims) > 0;\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n  if (feedPastKey) {\n    inputDependencies.push('type');\n  }\n  if (attentionBias) {\n    inputDependencies.push('type');\n  }\n  const outputs = [{ dims: probsShape, dataType: q.dataType, gpuDataType: GpuDataType.default }];\n  if (presentKey) {\n    outputs.push({ dims: presentKeyShape!, dataType: q.dataType, gpuDataType: GpuDataType.default });\n  }\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const qInput = inputVariable('q', q.dataType, q.dims, components);\n    const kInput = inputVariable('key', key.dataType, key.dims, components);\n    const inputVars = [qInput, kInput];\n    if (feedPastKey) {\n      const pastKeyInput = inputVariable('past_key', pastKey.dataType, pastKey.dims, components);\n      inputVars.push(pastKeyInput);\n    }\n    if (attentionBias) {\n      inputVars.push(inputVariable('attention_bias', attentionBias.dataType, attentionBias.dims));\n    }\n    const output = outputVariable('output', q.dataType, probsShape);\n    const outputVars = [output];\n    if (presentKey) {\n      outputVars.push(outputVariable('present_key', q.dataType, presentKeyShape!, components));\n    }\n    const f32Type = tensorTypeToWsglValueType(DataType.float, components);\n\n    const uniforms: UniformsArrayType = [\n      { name: 'M', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'num_heads', type: 'u32' },\n      { name: 'alpha', type: 'f32' as UniformDataElementType },\n      { name: 'past_sequence_length', type: 'u32' },\n      { name: 'kv_sequence_length', type: 'u32' },\n    ];\n    return `\n  const TILE_SIZE = ${TILE_SIZE}u;\n\n  var<workgroup> tileQ: array<${qInput.type.storage}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileK: array<${qInput.type.storage}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVars, ...outputVars)}\n  ${shaderHelper.mainStart([TILE_SIZE, TILE_SIZE, 1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    ${(() => {\n      if (feedPastKey && presentKey) {\n        return `\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx;\n    let pastKeyOffset = uniforms.past_sequence_length * uniforms.K * headIdx;`;\n      } else {\n        return `\n    let kOffset = uniforms.N * uniforms.K * headIdx + n * uniforms.K;`;\n      }\n    })()}\n    ${presentKey ? 'let presentKeyOffset = headIdx * uniforms.N * uniforms.K;' : ''}\n    var value = ${f32Type}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n      ${(() => {\n        if (feedPastKey && presentKey) {\n          return `\n              if (n + local_id.y < uniforms.past_sequence_length) {\n                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n              } else {\n                tileK[idx] =\n                         key[kOffset + (n + local_id.y - uniforms.past_sequence_length) * uniforms.K + w + local_id.x];\n              }`;\n        } else {\n          return 'tileK[idx] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];';\n        }\n      })()}\n      ${\n        presentKey ? 'present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];' : ''\n      }\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n        value += ${f32Type}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      var sum: f32 = ${(() => {\n        switch (components) {\n          case 1:\n            return 'value';\n          case 2:\n            return 'value.x + value.y';\n          case 4:\n            return 'value.x + value.y + value.z + value.w';\n          default:\n            throw new Error(`Unsupported components: ${components}`);\n        }\n      })()};\n        output[outputIdx] = ${output.type.value} (sum * uniforms.alpha) + ${\n          attentionBias ? 'attention_bias[outputIdx]' : '0.0'\n        };\n    }\n  }`;\n  };\n  return {\n    name: 'AttentionProbs',\n    shaderCache: {\n      hint: `${components};${attentionBias !== undefined};${pastKey !== undefined};${outputCount}`,\n      inputDependencies,\n    },\n    getRunData: () => ({ outputs, dispatchGroup: dispatch, programUniforms }),\n    getShaderSource,\n  };\n};\n\nconst createVxAttentionScoreProgramInfo = (\n  outputCount: number,\n  probs: TensorView,\n  v: TensorView,\n  pastValue: TensorView | undefined,\n  params: AttentionParameters,\n  pastSequenceLength: number,\n) => {\n  const totalSequenceLength = pastSequenceLength + params.kvSequenceLength;\n  const nReps = params.nReps ? params.nReps : 1;\n  const repeatedVHiddenSize = params.vHiddenSize * nReps;\n  const presentValue = params.kvNumHeads == null && outputCount > 1 && pastValue;\n  const presentValueShape = presentValue\n    ? [params.batchSize, params.numHeads, totalSequenceLength, params.headSize]\n    : undefined;\n  const outputShape = [params.batchSize, params.sequenceLength, repeatedVHiddenSize];\n  const TILE_SIZE = 12;\n  const dispatch = {\n    x: Math.ceil(params.vHeadSize / TILE_SIZE),\n    y: Math.ceil(params.sequenceLength / TILE_SIZE),\n    z: params.batchSize * params.numHeads,\n  };\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: params.sequenceLength },\n    { type: DataType.uint32, data: totalSequenceLength },\n    { type: DataType.uint32, data: params.vHeadSize },\n    { type: DataType.uint32, data: params.numHeads },\n    { type: DataType.uint32, data: repeatedVHiddenSize },\n    { type: DataType.uint32, data: pastSequenceLength },\n    { type: DataType.uint32, data: params.kvSequenceLength },\n  ];\n  // Feed pastValue to the shader-code only if it is non-empty and presentValue is being produced\n  const feedPastValue = presentValue && pastValue && ShapeUtil.size(pastValue.dims) > 0;\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n  if (feedPastValue) {\n    inputDependencies.push('type');\n  }\n  const outputs = [{ dims: outputShape, dataType: probs.dataType, gpuDataType: GpuDataType.default }];\n  if (presentValue) {\n    outputs.push({ dims: presentValueShape!, dataType: probs.dataType, gpuDataType: GpuDataType.default });\n  }\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const probsHelper = inputVariable('probs', probs.dataType, probs.dims);\n    const vHelper = inputVariable('v', v.dataType, v.dims);\n    const inputVars = [probsHelper, vHelper];\n    if (feedPastValue) {\n      inputVars.push(inputVariable('past_value', pastValue.dataType, pastValue.dims));\n    }\n    const output = outputVariable('output', probs.dataType, outputShape);\n    const outputVars = [output];\n    if (presentValue) {\n      outputVars.push(outputVariable('present_value', probs.dataType, presentValueShape!));\n    }\n    const uniforms: UniformsArrayType = [\n      { name: 'M', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'num_heads', type: 'u32' },\n      { name: 'v_hidden_size', type: 'u32' },\n      { name: 'past_sequence_length', type: 'u32' },\n      { name: 'kv_sequence_length', type: 'u32' },\n    ];\n    return `\n  const TILE_SIZE = ${TILE_SIZE}u;\n  var<workgroup> tileQ: array<${probsHelper.type.value}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileK: array<${probsHelper.type.value}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVars, ...outputVars)}\n  ${shaderHelper.mainStart([TILE_SIZE, TILE_SIZE, 1])}\n   let headIdx = workgroup_id.z;\n   let m = global_id.y;\n   let n = global_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   ${(() => {\n     if (feedPastValue && presentValue) {\n       return `\n    let pastValueOffset = headIdx * uniforms.N * uniforms.past_sequence_length + n;\n    let vOffset = headIdx * uniforms.N * uniforms.kv_sequence_length + n;\n      `;\n     } else {\n       return `\n   let offsetB = headIdx * uniforms.N * uniforms.K + n;\n            `;\n     }\n   })()}\n    ${presentValue ? 'let presentValueOffset = headIdx * uniforms.N * uniforms.K + n;' : ''}\n   var value = ${probsHelper.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n        ${(() => {\n          if (feedPastValue && presentValue) {\n            return `\n        if (w + local_id.y < uniforms.past_sequence_length) {\n          tileK[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];\n        } else {\n          tileK[idx] = v[vOffset + (w + local_id.y - uniforms.past_sequence_length) * uniforms.N];\n        }\n      `;\n          } else {\n            return `\n        tileK[idx] = v[offsetB + (w + local_id.y) * uniforms.N];\n      `;\n          }\n        })()}\n        ${presentValue ? 'present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileK[idx];' : ''}\n      }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`;\n  };\n\n  return {\n    name: 'AttentionScore',\n    shaderCache: { hint: `${pastValue !== undefined};${outputCount}`, inputDependencies },\n    getRunData: () => ({ outputs, dispatchGroup: dispatch, programUniforms }),\n    getShaderSource,\n  };\n};\n\nexport const applyAttention = (\n  context: ComputeContext,\n  q: TensorView,\n  k: TensorView,\n  v: TensorView,\n  _maskIndex: TensorView | undefined,\n  _past: TensorView | undefined,\n  pastKey: TensorView | undefined,\n  pastValue: TensorView | undefined,\n  attentionBiasInput: TensorView | undefined,\n  parameters: AttentionParameters,\n  attributes: AttentionAttrs,\n) => {\n  // Assumption  is that presentKey/presentValue exists only if pastKey/pastValue exists.\n  const outputCount = Math.min(context.outputCount, 1 + (pastKey ? 1 : 0) + (pastValue ? 1 : 0));\n  const pastSequenceLength = parameters.kvNumHeads !== undefined || outputCount > 1 ? parameters.pastSequenceLength : 0;\n  const totalSequenceLength = pastSequenceLength + parameters.kvSequenceLength;\n  const attentionBias =\n    attentionBiasInput && ShapeUtil.size(attentionBiasInput.dims) > 0 ? attentionBiasInput : undefined;\n\n  const inputsK = [q, k];\n  if (parameters.kvNumHeads === undefined && outputCount > 1 && pastKey && ShapeUtil.size(pastKey.dims) > 0) {\n    inputsK.push(pastKey);\n  }\n  if (attentionBias) {\n    inputsK.push(attentionBias);\n  }\n\n  // Run AttentionProbs\n  const probs = context.compute(\n    createAttentionProbsProgramInfo(\n      outputCount,\n      q,\n      k,\n      pastKey,\n      attentionBias,\n      parameters,\n      attributes,\n      pastSequenceLength,\n    ),\n    { inputs: inputsK, outputs: parameters.kvNumHeads === undefined && outputCount > 1 ? [-1, 1] : [-1] },\n  )[0];\n\n  // Run Softmax\n  context.compute(\n    createInPlaceSoftmaxProgramInfo(\n      probs,\n      parameters.batchSize * parameters.numHeads * parameters.sequenceLength,\n      totalSequenceLength,\n    ),\n    { inputs: [probs], outputs: [] },\n  );\n\n  // Run AttrionScore\n  const inputsV = [probs, v];\n  if (parameters.kvNumHeads === undefined && outputCount > 1 && pastValue && ShapeUtil.size(pastValue.dims) > 0) {\n    inputsV.push(pastValue);\n  }\n  context.compute(createVxAttentionScoreProgramInfo(outputCount, probs, v, pastValue, parameters, pastSequenceLength), {\n    inputs: inputsV,\n    outputs: parameters.kvNumHeads === undefined && outputCount > 1 ? [0, 2] : [0],\n  });\n};\n\nconst prepare = (context: ComputeContext, parameters: AttentionParameters) => {\n  const outputShape = [parameters.batchSize, parameters.numHeads, parameters.sequenceLength, parameters.headSize];\n  const M = parameters.sequenceLength;\n  const K = parameters.inputHiddenSize;\n  const N = parameters.headSize;\n  const TILE_SIZE = 12;\n  const dispatch = {\n    x: Math.ceil(parameters.headSize / TILE_SIZE),\n    y: Math.ceil(parameters.sequenceLength / TILE_SIZE),\n    z: parameters.batchSize * parameters.numHeads,\n  };\n  const inputs = [context.inputs[0], context.inputs[1], context.inputs[2]];\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: M },\n    { type: DataType.uint32, data: K },\n    { type: DataType.uint32, data: N },\n    { type: DataType.uint32, data: parameters.numHeads },\n    { type: DataType.uint32, data: parameters.headSize },\n    { type: DataType.uint32, data: parameters.hiddenSize },\n    { type: DataType.uint32, data: parameters.hiddenSize + parameters.hiddenSize + parameters.vHiddenSize },\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const outputQ = outputVariable('output_q', inputs[0].dataType, outputShape);\n    const outputK = outputVariable('output_k', inputs[0].dataType, outputShape);\n    const outputV = outputVariable('output_v', inputs[0].dataType, outputShape);\n    const input = inputVariable('input', inputs[0].dataType, inputs[0].dims);\n    const weight = inputVariable('weight', inputs[1].dataType, inputs[1].dims);\n    const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims);\n    const dataType = input.type.storage;\n\n    const uniforms: UniformsArrayType = [\n      { name: 'M', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'num_heads', type: 'u32' },\n      { name: 'head_size', type: 'u32' },\n      { name: 'hidden_size', type: 'u32' },\n      { name: 'ldb', type: 'u32' },\n    ];\n    return `\n  const TILE_SIZE = ${TILE_SIZE}u;\n  var<workgroup> tileInput: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightQ: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightK: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightV: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(input, weight, bias, outputQ, outputK, outputV)}\n  ${shaderHelper.mainStart([TILE_SIZE, TILE_SIZE, 1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${dataType}(0);\n    var valueK = ${dataType}(0);\n    var valueV = ${dataType}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`;\n  };\n\n  return context.compute(\n    {\n      name: 'AttentionPrepare',\n      shaderCache: { inputDependencies: ['type', 'type', 'type'] },\n      getRunData: () => ({\n        outputs: [\n          { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: GpuDataType.default },\n          { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: GpuDataType.default },\n          { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: GpuDataType.default },\n        ],\n        dispatchGroup: dispatch,\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs, outputs: [-1, -1, -1] },\n  );\n};\n\nexport const attention = (context: ComputeContext, attributes: AttentionAttrs): void => {\n  const params = validateAttentionInputs(context.inputs, attributes);\n\n  const [q, k, v] = prepare(context, params);\n\n  return applyAttention(\n    context,\n    q,\n    k,\n    v,\n    context.inputs[4],\n    undefined,\n    undefined,\n    undefined,\n    context.inputs[5],\n    params,\n    attributes,\n  );\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, getMaxComponents, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface BatchNormAttributes extends AttributeWithCacheKey {\n  readonly epsilon: number;\n  readonly momentum: number;\n  readonly spatial: boolean;\n  readonly trainingMode: boolean;\n  readonly format: 'NHWC' | 'NCHW';\n  readonly outputCount: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: BatchNormAttributes): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs');\n  }\n\n  const checkShapeEqual = (actual: readonly number[], expected: readonly number[], message: string) => {\n    const r = expected.length;\n    if (r !== actual.length) {\n      throw new Error(`${message}: num dimensions != ${r}`);\n    }\n    expected.forEach((v, i) => {\n      if (v !== actual[i]) {\n        throw new Error(`${message}: dim[${i}] do not match`);\n      }\n    });\n  };\n\n  if (inputs[0].dims.length > 1) {\n    const shape =\n      attributes.format === 'NHWC'\n        ? attributes.spatial\n          ? inputs[0].dims.slice(-1)\n          : inputs[0].dims.slice(-1).concat(inputs[0].dims.slice(1, inputs[0].dims.length - 1))\n        : inputs[0].dims.slice(1, attributes.spatial ? 2 : undefined);\n    checkShapeEqual(inputs[1].dims, shape, 'Invalid input scale');\n    checkShapeEqual(inputs[2].dims, shape, 'Invalid input B');\n    checkShapeEqual(inputs[3].dims, shape, 'Invalid input mean');\n    checkShapeEqual(inputs[4].dims, shape, 'Invalid input var');\n  } else {\n    checkShapeEqual(inputs[1].dims, [1], 'Invalid input scale');\n    checkShapeEqual(inputs[2].dims, [1], 'Invalid input B');\n    checkShapeEqual(inputs[3].dims, [1], 'Invalid input mean');\n    checkShapeEqual(inputs[4].dims, [1], 'Invalid input var');\n  }\n};\n\nconst createBatchNormInferenceProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: BatchNormAttributes,\n): ProgramInfo => {\n  const { epsilon, spatial, format } = attributes;\n  const yShape = inputs[0].dims;\n  const components = spatial ? getMaxComponents(yShape[yShape.length - 1]) : 1;\n  const cComponents = format === 'NHWC' && yShape.length > 1 ? components : 1;\n  const outputSize = ShapeUtil.size(yShape) / components;\n  // Only support uniforms for opset version >= 9 (spatial = true).\n  const useShapesUniforms = spatial;\n  const shapeOrRank = useShapesUniforms ? yShape.length : yShape;\n  const x = inputVariable('x', inputs[0].dataType, inputs[0].dims, components);\n  const scale = inputVariable('scale', inputs[1].dataType, inputs[1].dims, cComponents);\n  const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims, cComponents);\n  const inputMean = inputVariable('inputMean', inputs[3].dataType, inputs[3].dims, cComponents);\n  const inputVar = inputVariable('inputVar', inputs[4].dataType, inputs[4].dims, cComponents);\n  const y = outputVariable('y', inputs[0].dataType, shapeOrRank, components);\n  // TODO: support inputs with different data type. Current we need to make sure all inputs have the same data type.\n  // Otherwise, the shader compilation will fail.\n  const calcCOffset = (): string => {\n    let cOffset = '';\n    if (spatial) {\n      cOffset = `let cOffset = ${\n        yShape.length === 1\n          ? '0u'\n          : format === 'NHWC'\n            ? `outputIndices[${yShape.length - 1}] / ${components}`\n            : 'outputIndices[1]'\n      };`;\n    } else {\n      if (format === 'NCHW') {\n        cOffset = `\n            ${y.indicesSet('outputIndices', '0', '0')}\n            let cOffset = ${y.indicesToOffset('outputIndices')};`;\n      } else {\n        // update C channel.\n        cOffset = `var cIndices = ${scale.type.indices}(0);\n                       cIndices[0] = outputIndices[${yShape.length - 1}];`;\n        // update D1 x ... x Dn channels.\n        for (let i = 1; i < scale.rank; i++) {\n          cOffset += `cIndices[${i}] = outputIndices[${i}];`;\n        }\n        cOffset += `let cOffset = ${scale.indicesToOffset('cIndices')};`;\n      }\n    }\n    return cOffset;\n  };\n  const getInferenceModeShaderSource = (helper: ShaderHelper) => `\n  const epsilon = ${epsilon};\n  ${helper.registerUniform('outputSize', 'u32').declareVariables(x, scale, bias, inputMean, inputVar, y)}\n  ${helper.mainStart()}\n  ${helper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n    var outputIndices = ${y.offsetToIndices(`global_idx * ${components}`)};\n    ${calcCOffset()}\n    let scale = ${scale.getByOffset('cOffset')};\n    let bias = ${bias.getByOffset('cOffset')};\n    let inputMean = ${inputMean.getByOffset('cOffset')};\n    let inputVar = ${inputVar.getByOffset('cOffset')};\n    let x = ${x.getByOffset('global_idx')};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${y.setByOffset('global_idx', 'value')}\n  }`;\n  return {\n    name: 'BatchNormalization',\n    shaderCache: {\n      hint: `${attributes.epsilon}_${attributes.format}_${spatial}_${components}`,\n      inputDependencies: useShapesUniforms ? ['rank', 'type', 'type', 'type', 'type'] : undefined,\n    },\n    getShaderSource: getInferenceModeShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: inputs[0].dims, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: useShapesUniforms\n        ? [{ type: DataType.uint32, data: outputSize }, ...createTensorShapeVariables(yShape)]\n        : [{ type: DataType.uint32, data: outputSize }],\n    }),\n  };\n};\n\nexport const parseBatchNormAttributes = (attributes: Record<string, unknown>): BatchNormAttributes =>\n  createAttributeWithCacheKey(attributes as Omit<BatchNormAttributes, keyof AttributeWithCacheKey>);\n\nexport const batchNorm = (context: ComputeContext, attributes: Record<string, unknown>): void => {\n  const { inputs, outputCount } = context;\n  const updatedAttributes = parseBatchNormAttributes({ ...attributes, outputCount });\n  if (env.webgpu.validateInputContent) {\n    validateInputs(inputs, updatedAttributes);\n  }\n  if (attributes.trainingMode) {\n    throw new Error('BatchNormalization trainingMode is not supported yet.');\n  } else {\n    context.compute(createBatchNormInferenceProgramInfo(inputs, updatedAttributes));\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { inputVariable, outputVariable, ShaderHelper } from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (inputs[0].dims.length !== 3) {\n    throw new Error('input should have 3 dimensions');\n  }\n\n  if (![320, 640, 1280].includes(inputs[0].dims[2])) {\n    throw new Error('number of channels should be 320, 640 or 1280');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('bias is expected to have 1 dimensions');\n  }\n\n  if (inputs[0].dims[2] !== inputs[1].dims[0]) {\n    throw new Error('last dimension of input and bias are not the same');\n  }\n};\n\nconst createBiasAddProgramInfo = (inputs: readonly TensorView[]): ProgramInfo => {\n  const outputShape = inputs[0].dims;\n\n  const channels = inputs[0].dims[2];\n  // since channel number can be only 320/640/1280, it's always divisable by 4\n  const outputSize = ShapeUtil.size(outputShape) / 4;\n\n  const dataType = inputs[0].dataType;\n  const input = inputVariable('input', dataType, outputShape, 4);\n  const bias = inputVariable('bias', dataType, [channels], 4);\n  const residual = inputVariable('residual', dataType, outputShape, 4);\n  const output = outputVariable('output', dataType, outputShape, 4);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const channels = ${channels}u / 4;\n  ${shaderHelper.declareVariables(input, bias, residual, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let value = ${input.getByOffset('global_idx')}\n      + ${bias.getByOffset('global_idx % channels')} + ${residual.getByOffset('global_idx')};\n    ${output.setByOffset('global_idx', 'value')}\n  }`;\n\n  return {\n    name: 'BiasAdd',\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n    }),\n    getShaderSource,\n  };\n};\n\nexport const biasAdd = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(createBiasAddProgramInfo(context.inputs));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglValueType,\n  UniformDataElementType,\n  UniformsArrayType,\n} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName | ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader = (\n  shaderHelper: ShaderHelper,\n  datasize: number,\n  inputDataType: number,\n  outputDataType: number,\n  funcCall: ElementwiseFunctionCall,\n  additionalImplementation?: string,\n  additionalUniformsType?: UniformsArrayType,\n): string => {\n  const vecSize = Math.ceil(datasize / 4);\n\n  let expression = '';\n  if (typeof funcCall === 'string') {\n    expression = `${funcCall}(a)`;\n  } else {\n    expression = funcCall('a');\n  }\n\n  const input = inputVariable('inputData', inputDataType, [vecSize], 4);\n  const output = outputVariable('outputData', outputDataType, [vecSize], 4);\n  const uniforms: UniformsArrayType = [{ name: 'vec_size', type: 'u32' }];\n  if (additionalUniformsType) {\n    uniforms.push(...additionalUniformsType);\n  }\n\n  return `\n      ${shaderHelper.registerUniforms(uniforms).declareVariables(input, output)}\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.vec_size')}\n\n    let a = ${input.getByOffset('global_idx')};\n    ${output.setByOffset('global_idx', expression)}\n  }`;\n};\n\nconst createElementwiseProgramInfo = (\n  input: TensorView,\n  name: string,\n  funcCall: ElementwiseFunctionCall,\n  additionalImplementation?: string,\n  cacheKey?: string,\n  outputDataType: number = input.dataType,\n  additionalUniforms?: ProgramUniform[],\n  additionalUniformsType?: UniformsArrayType,\n): ProgramInfo => {\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: Math.ceil(ShapeUtil.size(input.dims) / 4) },\n  ];\n  if (additionalUniforms) {\n    programUniforms.push(...additionalUniforms);\n  }\n\n  return {\n    name,\n    shaderCache: { hint: cacheKey, inputDependencies: ['type'] },\n    getShaderSource: (shaderHelper) =>\n      createElementwiseProgramShader(\n        shaderHelper,\n        ShapeUtil.size(input.dims),\n        input.dataType,\n        outputDataType,\n        funcCall,\n        additionalImplementation,\n        additionalUniformsType,\n      ),\n    getRunData: (inputTensors) => ({\n      outputs: [{ dims: input.dims, dataType: outputDataType }],\n      dispatchGroup: {\n        x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */),\n      },\n      programUniforms,\n    }),\n  };\n};\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface CastAttributes extends AttributeWithCacheKey {\n  readonly to: number;\n  readonly saturate?: boolean;\n}\n\nexport const parseCastAttributes = (attributes: Record<string, unknown>): CastAttributes =>\n  createAttributeWithCacheKey(attributes as { to: number });\n\nexport const cast = (context: ComputeContext, attributes: CastAttributes): void => {\n  let func: ElementwiseFunctionCall;\n  switch (attributes.to) {\n    case DataType.float16:\n      func = 'vec4<f16>';\n      break;\n    case DataType.float:\n      func = 'vec4<f32>';\n      break;\n    case DataType.uint32:\n      func = 'vec4<u32>';\n      break;\n    case DataType.int32:\n      func = 'vec4<i32>';\n      break;\n    case DataType.bool:\n      func = 'vec4<bool>';\n      break;\n    default:\n      throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${attributes.to}`);\n  }\n  context.compute(\n    createElementwiseProgramInfo(context.inputs[0], 'Cast', func, undefined, attributes.cacheKey, attributes.to),\n  );\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  let min: number;\n  let max: number;\n  const hasMin = inputs.length >= 2 && inputs[1].data !== 0;\n  const hasMax = inputs.length >= 3 && inputs[2].data !== 0;\n\n  switch (inputs[0].dataType) {\n    case DataType.float:\n      min = hasMin ? inputs[1].getFloat32Array()[0] : -3.4028234663852886e38;\n      max = hasMax ? inputs[2].getFloat32Array()[0] : 3.4028234663852886e38;\n      break;\n    case DataType.float16:\n      min = hasMin ? inputs[1].getUint16Array()[0] : 64511; // uint16(64511) <-> float16(-65504.0)\n      max = hasMax ? inputs[2].getUint16Array()[0] : 31743; // uint16(31743) <-> float16(65504.0)\n      break;\n    default:\n      throw new Error('Unsupport data type');\n  }\n\n  return createAttributeWithCacheKey({ min, max });\n};\n\nexport const clip = (context: ComputeContext, clipAttributes: ClipAttributes): void => {\n  const attributes = clipAttributes ? clipAttributes : generateClipAttributesFromInputs(context.inputs);\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'Clip',\n      (a) => `clamp(${a}, vec4<${dataType}>(uniforms.min), vec4<${dataType}>(uniforms.max))`,\n      undefined,\n      attributes.cacheKey,\n      undefined,\n      [\n        { type: context.inputs[0].dataType, data: attributes.min },\n        { type: context.inputs[0].dataType, data: attributes.max },\n      ],\n      [\n        { name: 'min', type: dataType as UniformDataElementType },\n        { name: 'max', type: dataType as UniformDataElementType },\n      ],\n    ),\n    { inputs: [0] },\n  );\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n  createAttributeWithCacheKey(attributes as { alpha: number });\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'Elu',\n      (a) => `elu_vf32(${a})`,\n      `\n  const elu_alpha_ = ${dataType}(${attributes.alpha});\n\n  fn elu_f32(a: ${dataType}) -> ${dataType} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${dataType}>) -> vec4<${dataType}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey,\n    ),\n  );\n};\n\nexport const erfImpl = (varType = 'f32') => `\nconst r0: ${varType} = 0.3275911;\nconst r1: ${varType} = 0.254829592;\nconst r2: ${varType} = -0.284496736;\nconst r3: ${varType} = 1.421413741;\nconst r4: ${varType} = -1.453152027;\nconst r5: ${varType} = 1.061405429;\n\nfn erf_vf32(v: vec4<${varType}>) -> vec4<${varType}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`;\n\nexport const erf = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Erf', (a) => `erf_vf32(${a})`, erfImpl(dataType)));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const gelu = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'Gelu',\n      (a) => `0.5 * ${a} * (1.0 + erf_vf32(${a} * 0.7071067811865475))`,\n      erfImpl(dataType),\n    ),\n  );\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'LeakyRelu',\n      (a) => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<${dataType}>(0.0))`,\n      `const leaky_relu_alpha_ = ${dataType}(${attributes.alpha});`,\n      attributes.cacheKey,\n    ),\n  );\n};\n\nexport const not = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Not', (a) => `!${a}`));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Neg', (a) => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Reciprocal', (a) => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'Relu',\n      (a) => `select(vec4<${dataType}>(0.0), ${a}, ${a} > vec4<${dataType}>(0.0))`,\n    ),\n  );\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Sigmoid', (a) => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport interface HardSigmoidAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n  readonly beta: number;\n}\n\nexport const parseHardSigmoidAttributes = (attributes: Record<string, unknown>): HardSigmoidAttributes =>\n  createAttributeWithCacheKey(\n    attributes as {\n      alpha: number;\n      beta: number;\n    },\n  );\n\nexport const hardSigmoid = (context: ComputeContext, attributes: HardSigmoidAttributes): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'HardSigmoid',\n      (a) =>\n        `max(vec4<${dataType}>(0.0), min(vec4<${dataType}>(1.0), ${attributes.alpha} * ${a} + vec4<${dataType}>(${attributes.beta})))`,\n      undefined,\n      attributes.cacheKey,\n    ),\n  );\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanhExpression = (a: string) => `sign(${a}) * (1 - exp(-2 * abs(${a}))) / (1 + exp(-2 * abs(${a})))`;\n\nexport const tanh = (context: ComputeContext): void => {\n  // TODO: revisit after https://github.com/gpuweb/gpuweb/issues/4458 is resolved\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Tanh', tanhExpression));\n};\n\nexport const fastGeluImpl = (varType = 'f32') => `\nconst fast_gelu_a: ${varType} = 0.5;\nconst fast_gelu_b: ${varType} = 0.7978845608028654;\nconst fast_gelu_c: ${varType} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${varType}>) -> vec4<${varType}> {\n  return ${tanhExpression('v')};\n}\n`;\n\nexport const fastGeluExpression = (x: string) =>\n  `(fast_gelu_a + fast_gelu_a * tanh_v(${x} * (fast_gelu_c * ${x} * ${x} + fast_gelu_b))) * ${x}`;\n\nexport const fastGelu = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'FastGelu',\n      fastGeluExpression,\n      fastGeluImpl(dataType),\n      undefined,\n      context.inputs[0].dataType,\n    ),\n  );\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'ThresholdedRelu',\n      (a) => `select(vec4<${dataType}>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_ = vec4<${dataType}>(${attributes.alpha});`,\n      attributes.cacheKey,\n    ),\n  );\n  return 0;\n};\n\nexport const log = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Log', 'log'));\n};\n\nexport const quickGeluImpl = (varType: string, alpha: number) => `\nconst alpha = vec4<${varType}>(${alpha});\nconst one = ${varType}(1.0);\nconst zero = ${varType}(0.0);\n\nfn quick_gelu_impl(x: vec4<${varType}>) -> vec4<${varType}> {\n  let v = x *alpha;\n  var x1 : vec4<${varType}>;\n  for (var i = 0; i < 4; i = i + 1) {\n    if (v[i] >= zero) {\n      x1[i] = one / (one + exp(-v[i]));\n    } else {\n      x1[i] = one - one / (one + exp(v[i]));\n    }\n  }\n  return x * x1;\n}\n`;\n\nexport const quickGeluExpression = (x: string) => `quick_gelu_impl(${x})`;\n\nexport const quickgelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  const dType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'QuickGelu',\n      quickGeluExpression,\n      quickGeluImpl(dType, attributes.alpha),\n      attributes.cacheKey,\n      context.inputs[0].dataType,\n    ),\n  );\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { inputVariable, outputVariable, ShaderHelper, tensorTypeToWsglStorageType } from './common';\nimport { erfImpl } from './unary-op';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (inputs[0].dims.length !== 3) {\n    throw new Error('input should have 3 dimensions');\n  }\n\n  if (![2560, 5120, 10240].includes(inputs[0].dims[2])) {\n    throw new Error('hidden state should be 2560, 5120 or 10240');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('bias is expected to have 1 dimensions');\n  }\n\n  if (inputs[0].dims[2] !== inputs[1].dims[0]) {\n    throw new Error('last dimension of input and bias are not the same');\n  }\n};\n\nconst createBiasSplitGeluProgramInfo = (inputs: readonly TensorView[]): ProgramInfo => {\n  const outputShape = inputs[0].dims.slice();\n  outputShape[2] = outputShape[2] / 2;\n\n  const input = inputVariable('input', inputs[0].dataType, inputs[0].dims, 4);\n  const bias = inputVariable('bias', inputs[0].dataType, [inputs[0].dims[2]], 4);\n  const output = outputVariable('output', inputs[0].dataType, outputShape, 4);\n\n  const outputSize = ShapeUtil.size(outputShape) / 4;\n  const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${inputs[0].dims[2] / 4 / 2}u;\n\n  ${shaderHelper.declareVariables(input, bias, output)}\n\n  ${erfImpl(dataType)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${output.setByOffset('global_idx', 'valueLeft * geluRight')}\n  }`;\n\n  return {\n    name: 'BiasSplitGelu',\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n    }),\n    getShaderSource,\n  };\n};\n\nexport const biasSplitGelu = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(createBiasSplitGeluProgramInfo(context.inputs));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { BroadcastUtil, ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall =\n  | BuiltinFunctionName\n  | BinaryCustomExpression\n  | {\n      scalar: BinaryCustomExpression;\n      vector: BinaryCustomExpression;\n    };\n\nconst createBinaryOpProgramShader = (\n  shaderHelper: ShaderHelper,\n  dimsA: readonly number[],\n  dimsB: readonly number[],\n  dimsOutput: readonly number[],\n  vectorize: boolean,\n  doBroadcast: boolean,\n  sharedDimensionDivisibleBy4: boolean,\n  funcCall: BinaryFunctionCall,\n  typeA: number,\n  typeB: number,\n  typeOutput: number,\n  additionalImplementation?: string,\n) => {\n  let expressionScalar: BinaryCustomExpression;\n  let expressionVector: BinaryCustomExpression;\n  if (typeof funcCall === 'string') {\n    expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n  } else if (typeof funcCall === 'function') {\n    expressionScalar = expressionVector = funcCall;\n  } else {\n    expressionScalar = funcCall.scalar;\n    expressionVector = funcCall.vector;\n  }\n\n  const output = outputVariable('outputData', typeOutput, dimsOutput.length, 4);\n  const a = inputVariable('aData', typeA, dimsA.length, 4);\n  const b = inputVariable('bData', typeB, dimsB.length, 4);\n\n  let assignment: string;\n  if (vectorize) {\n    if (doBroadcast) {\n      const isAOneElement = ShapeUtil.size(dimsA) === 1;\n      const isBOneElement = ShapeUtil.size(dimsB) === 1;\n      const aLastDimDivisibleBy4 = dimsA.length > 0 && dimsA[dimsA.length - 1] % 4 === 0;\n      const bLastDimDivisibleBy4 = dimsB.length > 0 && dimsB[dimsB.length - 1] % 4 === 0;\n      if (isAOneElement || isBOneElement) {\n        assignment = output.setByOffset(\n          'global_idx',\n          expressionVector(\n            isAOneElement ? `${a.type.value}(${a.getByOffset('0')}.x)` : a.getByOffset('global_idx'),\n            isBOneElement ? `${b.type.value}(${b.getByOffset('0')}.x)` : b.getByOffset('global_idx'),\n          ),\n        );\n      } else {\n        assignment = `\n            let outputIndices = ${output.offsetToIndices('global_idx * 4u')};\n            let offsetA = ${a.broadcastedIndicesToOffset('outputIndices', output)};\n            let offsetB = ${b.broadcastedIndicesToOffset('outputIndices', output)};\n            ${output.setByOffset(\n              'global_idx',\n              expressionVector(\n                sharedDimensionDivisibleBy4 || aLastDimDivisibleBy4\n                  ? a.getByOffset('offsetA / 4u')\n                  : `${a.type.value}(${a.getByOffset('offsetA / 4u')}[offsetA % 4u])`,\n                sharedDimensionDivisibleBy4 || bLastDimDivisibleBy4\n                  ? b.getByOffset('offsetB / 4u')\n                  : `${b.type.value}(${b.getByOffset('offsetB / 4u')}[offsetB % 4u])`,\n              ),\n            )}\n          `;\n      }\n    } else {\n      assignment = output.setByOffset(\n        'global_idx',\n        expressionVector(a.getByOffset('global_idx'), b.getByOffset('global_idx')),\n      );\n    }\n  } else {\n    if (!doBroadcast) {\n      throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n    }\n\n    const singleAssignment = (resStr: string, x: number, typeCast = '') => {\n      const expressionA = `aData[indexA${x}][componentA${x}]`;\n      const expressionB = `bData[indexB${x}][componentB${x}]`;\n      return `\n            let outputIndices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offsetA${x} = ${a.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let offsetB${x} = ${b.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let indexA${x} = offsetA${x} / 4u;\n            let indexB${x} = offsetB${x} / 4u;\n            let componentA${x} = offsetA${x} % 4u;\n            let componentB${x} = offsetB${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expressionScalar(expressionA, expressionB)});\n          `;\n    };\n    if (typeOutput === DataType.bool) {\n      assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment('data', 0, 'u32')}\n            ${singleAssignment('data', 1, 'u32')}\n            ${singleAssignment('data', 2, 'u32')}\n            ${singleAssignment('data', 3, 'u32')}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n    } else {\n      assignment = `\n            ${singleAssignment('outputData[global_idx]', 0)}\n            ${singleAssignment('outputData[global_idx]', 1)}\n            ${singleAssignment('outputData[global_idx]', 2)}\n            ${singleAssignment('outputData[global_idx]', 3)}\n          `;\n    }\n  }\n\n  return `\n        ${shaderHelper.registerUniform('vec_size', 'u32').declareVariables(a, b, output)}\n\n        ${additionalImplementation ?? ''}\n\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.vec_size')}\n        ${assignment}\n      }`;\n};\n\nconst createBinaryOpProgramInfo = (\n  name: string,\n  cacheKey: string,\n  a: TensorView,\n  b: TensorView,\n  funcCall: BinaryFunctionCall,\n  additionalImplementation?: string,\n  outputDataType: number = a.dataType,\n): ProgramInfo => {\n  const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n  let outputShape = a.dims;\n  let outputSize = ShapeUtil.size(a.dims);\n\n  let vectorize = false;\n  let sharedDimensionDivisibleBy4 = false;\n\n  // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n  const cacheKeyAux = [isBroadcast];\n  if (isBroadcast) {\n    const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n    if (!calculatedShape) {\n      throw new Error(\"Can't perform binary op on the given tensors\");\n    }\n    outputShape = calculatedShape;\n    outputSize = ShapeUtil.size(outputShape);\n    const isAOneElement = ShapeUtil.size(a.dims) === 1;\n    const isBOneElement = ShapeUtil.size(b.dims) === 1;\n    const aLastDimDivisibleBy4 = a.dims.length > 0 && a.dims[a.dims.length - 1] % 4 === 0;\n    const bLastDimDivisibleBy4 = b.dims.length > 0 && b.dims[b.dims.length - 1] % 4 === 0;\n    cacheKeyAux.push(isAOneElement);\n    cacheKeyAux.push(isBOneElement);\n    cacheKeyAux.push(aLastDimDivisibleBy4);\n    cacheKeyAux.push(bLastDimDivisibleBy4);\n    // check whether vectorize can be enabled\n    let sharedDimension = 1;\n    for (let i = 1; i < outputShape.length; i++) {\n      const dimA = a.dims[a.dims.length - i] ?? 1;\n      const dimB = b.dims[b.dims.length - i] ?? 1;\n      if (dimA === dimB) {\n        sharedDimension *= dimA;\n      } else {\n        break;\n      }\n    }\n    if (sharedDimension % 4 === 0) {\n      sharedDimensionDivisibleBy4 = true;\n      vectorize = true;\n    } else if (isAOneElement || isBOneElement || aLastDimDivisibleBy4 || bLastDimDivisibleBy4) {\n      vectorize = true;\n    }\n  } else {\n    // element-wise\n    vectorize = true;\n  }\n  cacheKeyAux.push(vectorize);\n\n  return {\n    name,\n    shaderCache: {\n      hint: cacheKey + cacheKeyAux.map((x) => x.toString()).join('_'),\n      inputDependencies: ['rank', 'rank'],\n    },\n    getShaderSource: (shaderHelper) =>\n      createBinaryOpProgramShader(\n        shaderHelper,\n        a.dims,\n        b.dims,\n        outputShape,\n        vectorize,\n        isBroadcast,\n        sharedDimensionDivisibleBy4,\n        funcCall,\n        a.dataType,\n        b.dataType,\n        outputDataType,\n        additionalImplementation,\n      ),\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputDataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */ / 4 /* component size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: Math.ceil(ShapeUtil.size(outputShape) / 4) },\n        ...createTensorShapeVariables(a.dims, b.dims, outputShape),\n      ],\n    }),\n  };\n};\n\nconst runBinaryOp = (\n  context: ComputeContext,\n  name: string,\n  funcCall: BinaryFunctionCall,\n  additionalImplementation?: string,\n  cacheKey?: string,\n  outputDataType?: number,\n): void => {\n  context.compute(\n    createBinaryOpProgramInfo(\n      name,\n      cacheKey ?? '',\n      context.inputs[0],\n      context.inputs[1],\n      funcCall,\n      additionalImplementation,\n      outputDataType,\n    ),\n  );\n};\n\nexport const add = (context: ComputeContext): void => {\n  runBinaryOp(context, 'Add', (a, b) => `${a}+${b}`);\n};\n\nexport const div = (context: ComputeContext): void => {\n  runBinaryOp(context, 'Div', (a, b) => `${a}/${b}`);\n};\n\nexport const equal = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'Equal',\n    { scalar: (a, b) => `u32(${a}==${b})`, vector: (a, b) => `vec4<u32>(${a}==${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n\nexport const mul = (context: ComputeContext): void => {\n  runBinaryOp(context, 'Mul', (a, b) => `${a}*${b}`);\n};\n\nexport const pow = (context: ComputeContext): void => {\n  const type = inputVariable('input', context.inputs[0].dataType, context.inputs[0].dims).type.value;\n  const roundStr = type === 'i32' ? 'round' : '';\n  runBinaryOp(\n    context,\n    'Pow',\n    { scalar: (a, b) => `pow_custom(${a},${b})`, vector: (a, b) => `pow_vector_custom(${a},${b})` },\n    `\n    fn pow_custom(a : ${type}, b : ${type}) -> ${type} {\n      if (b == ${type}(0.0)) {\n        return ${type}(1.0);\n      } else if (a < ${type}(0.0) && f32(b) != floor(f32(b))) {\n        return ${type}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${type}(1.0), round(f32(abs(b) % ${type}(2.0))) != 1.0) * ${type}(${\n        roundStr\n      }(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${type}>, b : vec4<${type}>) -> vec4<${type}> {\n      // TODO: implement vectorized pow\n      return vec4<${type}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `,\n  );\n};\n\nexport const sub = (context: ComputeContext): void => {\n  runBinaryOp(context, 'Sub', (a, b) => `${a}-${b}`);\n};\n\nexport const greater = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'Greater',\n    { scalar: (a, b) => `u32(${a}>${b})`, vector: (a, b) => `vec4<u32>(${a}>${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n\nexport const less = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'Less',\n    { scalar: (a, b) => `u32(${a}<${b})`, vector: (a, b) => `vec4<u32>(${a}<${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n\nexport const greaterOrEqual = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'GreaterOrEqual',\n    { scalar: (a, b) => `u32(${a}>=${b})`, vector: (a, b) => `vec4<u32>(${a}>=${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n\nexport const lessOrEqual = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'LessOrEqual',\n    { scalar: (a, b) => `u32(${a}<=${b})`, vector: (a, b) => `vec4<u32>(${a}<=${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], axis: number): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n  const referenceIndex = 0;\n  const referenceInput = inputs[referenceIndex];\n  const inputType = referenceInput.dataType;\n  const inputRank = referenceInput.dims.length;\n  inputs.forEach((input, i) => {\n    if (i === referenceIndex) {\n      return;\n    }\n    // make sure types of all inputs match\n    if (input.dataType !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputRank) {\n      throw new Error('input tensors should have the same shape');\n    }\n    input.dims.forEach((dim, i) => {\n      if (i !== axis && dim !== referenceInput.dims[i]) {\n        throw new Error('non concat dimensions must match');\n      }\n    });\n  });\n};\n\nconst calculateInputIndexImpl = (numberOfTensors: number, sizeInConcatAxisStr: string): string => `\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${numberOfTensors}u>(${sizeInConcatAxisStr});\n    for (var i: u32 = 0u; i < ${numberOfTensors}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${numberOfTensors}u;\n  }`;\n\nconst assignOutputData = (inputs: readonly IndicesHelper[], output: IndicesHelper) => {\n  const numberOfTensors = inputs.length;\n\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = output.setByOffset('global_idx', inputs[i].getByIndices('indices'));\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (inputIndex == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (inputIndex == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return codeLines.join('\\n');\n};\n\nconst createConcatProgramInfo = (\n  inputs: readonly TensorView[],\n  adjustedAxis: number,\n  outputShape: number[],\n  dataType: DataType,\n): ProgramInfo => {\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const sizeInConcatAxis = new Array<number>(inputs.length);\n  const inputVars = new Array<IndicesHelper>(inputs.length);\n\n  let previousSum = 0;\n  const inputDependencies: ProgramInputTensorInfoDependency[] = [];\n  const inputRanks = [];\n  const programUniforms: ProgramUniform[] = [{ type: DataType.uint32, data: outputSize }];\n  for (let i = 0; i < inputs.length; ++i) {\n    previousSum += inputs[i].dims[adjustedAxis];\n    sizeInConcatAxis[i] = previousSum;\n    inputRanks.push(inputs[i].dims.length);\n    inputVars[i] = inputVariable(`input${i}`, dataType, inputRanks[i]);\n    inputDependencies.push('rank');\n    programUniforms.push({ type: DataType.uint32, data: sizeInConcatAxis[i] });\n  }\n  for (let i = 0; i < inputs.length; ++i) {\n    programUniforms.push(...createTensorShapeVariables(inputs[i].dims));\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const output = outputVariable('output', dataType, outputShape.length);\n  const indicesAxis = output.indicesGet('indices', adjustedAxis);\n  const sizeInConcatAxisStr = Array.from(Array(sizeInConcatAxis.length).keys())\n    .map((i) => `uniforms.sizeInConcatAxis${i}`)\n    .join(',');\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n\n  ${(() => {\n    shaderHelper.registerUniform('outputSize', 'u32');\n    for (let i = 0; i < inputs.length; i++) {\n      shaderHelper.registerUniform(`sizeInConcatAxis${i}`, 'u32');\n    }\n    return shaderHelper.declareVariables(...inputVars, output);\n  })()}\n\n  ${calculateInputIndexImpl(sizeInConcatAxis.length, sizeInConcatAxisStr)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n\n    var indices = ${output.offsetToIndices('global_idx')};\n\n    let inputIndex = calculateInputIndex(${indicesAxis});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}u>(${sizeInConcatAxisStr});\n      ${indicesAxis} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${assignOutputData(inputVars, output)}\n  }`;\n\n  return {\n    name: 'Concat',\n    shaderCache: { hint: `${adjustedAxis}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const concat = (context: ComputeContext, attributes: ConcatAttributes): void => {\n  const inputs = context.inputs;\n  const inputShape = inputs[0].dims;\n  const adjustedAxis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n  validateInputs(inputs, adjustedAxis);\n  const outputShape = inputShape.slice();\n  outputShape[adjustedAxis] = inputs.reduce(\n    (sum, input) => sum + (input.dims.length > adjustedAxis ? input.dims[adjustedAxis] : 0),\n    0,\n  );\n  // 0 length tensors are valid for concat, remove them\n  const nonEmptyInputs = inputs.filter((input) => ShapeUtil.size(input.dims) > 0);\n  context.compute(createConcatProgramInfo(nonEmptyInputs, adjustedAxis, outputShape, inputs[0].dataType), {\n    inputs: nonEmptyInputs,\n  });\n};\n\nexport const parseConcatAttributes = (attributes: Record<string, unknown>): ConcatAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { MAX_CLIP, MIN_CLIP } from '../../util';\nimport { ProgramUniform } from '../types';\n\nimport { UniformsArrayType } from './common';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly alpha?: number;\n  readonly beta?: number;\n}\n\nexport const getActivationSnippet = (\n  attributes: InternalActivationAttributes,\n  valueType: string,\n  baseType = 'f32',\n): string => {\n  switch (attributes.activation) {\n    case 'Relu':\n      return `value = max(value, ${valueType}(0.0));`;\n    case 'Sigmoid':\n      return `value = (${valueType}(1.0) / (${valueType}(1.0) + exp(-value)));`;\n    case 'Clip':\n      return `value = clamp(value, ${valueType}(${baseType}(uniforms.clip_min)), ${valueType}(${\n        baseType\n      }(uniforms.clip_max)));`;\n    case 'HardSigmoid':\n      return `value = max(${valueType}(0.0), min(${valueType}(1.0), ${baseType}(uniforms.alpha) * value + ${\n        baseType\n      }(uniforms.beta)));`;\n    case 'LeakyRelu':\n      return `value = select(${baseType}(uniforms.alpha) * value, value, value >= ${valueType}(0.0));`;\n    case 'Tanh':\n      return `let e2x = exp(-2.0 * abs(value));\n              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);\n        `;\n    case '':\n      return '';\n    // TODO: adding other activations that can be fused.\n    default:\n      throw new Error(`Unsupported activation ${attributes.activation}`);\n  }\n};\n\nexport const appendActivationUniformsData = (\n  attributes: InternalActivationAttributes,\n  programUniform: ProgramUniform[],\n) => {\n  if (attributes.activation === 'Clip') {\n    programUniform.push(\n      { type: DataType.float, data: attributes.clipMax! },\n      { type: DataType.float, data: attributes.clipMin! },\n    );\n  } else if (attributes.activation === 'HardSigmoid') {\n    programUniform.push(\n      { type: DataType.float, data: attributes.alpha! },\n      { type: DataType.float, data: attributes.beta! },\n    );\n  } else if (attributes.activation === 'LeakyRelu') {\n    programUniform.push({ type: DataType.float, data: attributes.alpha! });\n  }\n};\n\nexport const appendActivationUniforms = (attributes: InternalActivationAttributes, uniforms: UniformsArrayType) => {\n  if (attributes.activation === 'Clip') {\n    uniforms.push({ name: 'clip_max', type: 'f32' }, { name: 'clip_min', type: 'f32' });\n  } else if (attributes.activation === 'HardSigmoid') {\n    uniforms.push({ name: 'alpha', type: 'f32' }, { name: 'beta', type: 'f32' });\n  } else if (attributes.activation === 'LeakyRelu') {\n    uniforms.push({ name: 'alpha', type: 'f32' });\n  }\n};\n\nexport const parseInternalActivationAttributes = (\n  attributes: Record<string, unknown> | undefined,\n): InternalActivationAttributes => {\n  const activation = (attributes?.activation as string) || '';\n  if (activation === 'HardSigmoid') {\n    const [alpha, beta] = (attributes?.activation_params as [number, number]) || [0.2, 0.5];\n    return { activation, alpha, beta };\n  } else if (activation === 'Clip') {\n    const [clipMin, clipMax] = (attributes?.activation_params as [number, number]) || [MIN_CLIP, MAX_CLIP];\n    return { activation, clipMax, clipMin };\n  } else if (activation === 'LeakyRelu') {\n    const [alpha] = (attributes?.activation_params as [number]) || [0.01];\n    return { activation, alpha };\n  }\n  return { activation };\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport const typeSnippet = (component: number, dataType: string) => {\n  switch (component) {\n    case 1:\n      return dataType;\n    case 2:\n      return `vec2<${dataType}>`;\n    case 3:\n      return `vec3<${dataType}>`;\n    case 4:\n      return `vec4<${dataType}>`;\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const biasSnippet = (hasBias: boolean): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = (strideStr: string) => `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${strideStr}.x), i32(${strideStr}.y), i32(${strideStr}.z), 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport { DataType } from '../../../../wasm-common';\nimport { TensorView } from '../../../tensor-view';\nimport { ShapeUtil } from '../../../util';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  getBroadcastDims,\n  IndicesHelper,\n  inputVariable,\n  internalVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from '../common';\nimport {\n  appendActivationUniforms,\n  appendActivationUniformsData,\n  getActivationSnippet,\n  InternalActivationAttributes,\n} from '../fuse-utils';\n\nimport { typeSnippet } from './activation_util';\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean, batchDims?: IndicesHelper) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${batchDims ? ', batchIndices' : ''});\n        `;\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${batchDims ? ', batchIndices' : ''});\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source = (\n  workPerThread: number[],\n  workgroupSize: [number, number, number],\n  type = 'f32',\n  batchDims?: IndicesHelper,\n  transposeA = false,\n  tileInner = 32,\n  splitK = false,\n  splitedDimInner = 32,\n): string => {\n  const tileAOuter = workgroupSize[1] * workPerThread[1];\n  const tileBOuter = workgroupSize[0] * workPerThread[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  const innerElementSize = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n\n  if (\n    !(\n      ((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n        (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n      tileAWidth % workgroupSize[0] === 0 &&\n      tileInner % workgroupSize[1] === 0 &&\n      workPerThread[0] === 4\n    )\n  ) {\n    throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${workPerThread[0]} must be 4.`);\n  }\n  return `\nvar<workgroup> mm_Asub: array<array<vec${innerElementSize}<${type}>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${type}>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices('u32(batch)')};` : ''}\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let num_tiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(uniforms.dim_inner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<${type}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA, batchDims)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${\n            batchDims ? ', batchIndices' : ''\n          });\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n};\n\nconst writeDataToSubASnippet = (transpose: boolean, batchDims?: IndicesHelper) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${batchDims ? ', batchIndices' : ''});\n            `;\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${batchDims ? ', batchIndices' : ''});\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n  transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource = (\n  workPerThread: number[],\n  workgroupSize: [number, number, number],\n  type = 'f32',\n  batchDims?: IndicesHelper,\n  transposeA = false,\n  tileInner = 32,\n  splitK = false,\n  splitedDimInner = 32,\n  sequentialAccessByThreads = false,\n): string => {\n  const tileAOuter = workPerThread[1] * workgroupSize[1];\n  const tileBOuter = workPerThread[0] * workgroupSize[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n\n  if (\n    !(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0)\n  ) {\n    throw new Error(\n      `tileAHight ${tileAHight} must be divisible by workgroupSize[1]${workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`,\n    );\n  }\n  const rowPerThreadA = tileAHight / workgroupSize[1];\n  const colPerThreadA = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const matmulSnippet = sequentialAccessByThreads\n    ? `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA, batchDims)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${batchDims ? ', batchIndices' : ''});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${type}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n            transposeA\n              ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];`\n              : `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`\n          }\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `\n    : `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA, batchDims)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${batchDims ? ', batchIndices' : ''});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${type}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n  return `\n  var<workgroup> mm_Asub : array<array<${type}, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<${type}, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices('u32(batch)')};` : ''}\n    let num_tiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(uniforms.dim_inner - 1) / tileInner + 1'\n    };\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<${type}, colPerThread>, rowPerThread>;\n    ${matmulSnippet}\n  }\n`;\n};\n\nconst matMulReadWriteFnSource = (\n  component: number,\n  hasBias: boolean,\n  applyActivation: string,\n  variables: IndicesHelper[],\n  batchShapes: Array<readonly number[]>,\n  isChannelsLast = false,\n): string => {\n  const [batchAShape, batchBShape, batchShape] = batchShapes;\n  const [batchVariable, aVariable, bVariable, outputVariable] = variables;\n  const broadCastADims = getBroadcastDims(batchAShape, batchShape);\n  const broadCastBDims = getBroadcastDims(batchBShape, batchShape);\n  const dataType = tensorTypeToWsglStorageType(variables[0].type.tensor);\n  const getAIndices = () => {\n    const aRank = aVariable.rank;\n    const batchRank = batchVariable.rank;\n    let resStr = `var aIndices: ${aVariable.type.indices};`;\n    for (let i = aRank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n      resStr += `\\naIndices[${i}] = ${batchRank > 1 ? `batchIndices[${j}]` : 'batchIndices'};`;\n    }\n    broadCastADims.forEach((i) => {\n      resStr += `\\naIndices[${i}] = 0;`;\n    });\n    resStr += `\\naIndices[${aRank - 2}] = u32(row);\n                   aIndices[${aRank - 1}] = u32(colIn);`;\n    return resStr;\n  };\n  const getBIndices = () => {\n    const bRank = bVariable.rank;\n    const batchRank = batchVariable.rank;\n    let resStr = `var bIndices: ${bVariable.type.indices};`;\n    for (let i = bRank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n      resStr += `\\nbIndices[${i}] = ${batchRank > 1 ? `batchIndices[${j}]` : 'batchIndices'};`;\n    }\n    broadCastBDims.forEach((i) => {\n      resStr += `\\nbIndices[${i}] = 0;`;\n    });\n    resStr += `\\nbIndices[${bRank - 2}] = u32(row);\n                   bIndices[${bRank - 1}] = u32(colIn);`;\n    return resStr;\n  };\n  const source = `\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${typeSnippet(\n      component,\n      dataType,\n    )} {\n      var value = ${typeSnippet(component, dataType)}(0.0);\n      let col = colIn * ${component};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${getAIndices()}\n        value = ${aVariable.getByIndices('aIndices')};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${typeSnippet(\n      component,\n      dataType,\n    )} {\n      var value = ${typeSnippet(component, dataType)}(0.0);\n      let col = colIn * ${component};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${getBIndices()}\n        value = ${bVariable.getByIndices('bIndices')};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${typeSnippet(component, dataType)}) {\n      let col = colIn * ${component};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${\n          hasBias\n            ? `value = value + ${isChannelsLast ? 'bias[colIn]' : `${typeSnippet(component, dataType)}(bias[row])`};`\n            : ''\n        }\n        ${applyActivation}\n        ${outputVariable.setByIndices('vec3<u32>(coords)', 'value')}\n      }\n    }\n    `;\n  return source;\n};\n\nexport const createMatmulProgramInfo = (\n  inputs: readonly TensorView[],\n  activationAttributes: InternalActivationAttributes,\n  outputShape: readonly number[],\n  reshapedOutputShape?: readonly number[],\n  isChannelsLast = false /* only used for conv2dByMatMul*/,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outerDimsA = aShape.slice(0, -2);\n  const outerDimsB = bShape.slice(0, -2);\n  const outerDims = reshapedOutputShape ? reshapedOutputShape.slice(0, -2) : outputShape.slice(0, -2);\n  const batchSize = ShapeUtil.size(outerDims);\n  const dimAOuter = aShape[aShape.length - 2];\n  const dimInner = aShape[aShape.length - 1];\n  const dimBOuter = bShape[bShape.length - 1];\n  const isVec4 = dimInner % 4 === 0 && dimBOuter % 4 === 0;\n\n  // TODO: fine tune size\n  const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n  const workgroupSize: [number, number, number] = [8, 8, 1];\n  const dispatch = [\n    Math.ceil(dimBOuter / workgroupSize[0] / elementsPerThread[0]),\n    Math.ceil(dimAOuter / workgroupSize[1] / elementsPerThread[1]),\n    Math.ceil(batchSize / workgroupSize[2] / elementsPerThread[2]),\n  ];\n\n  const components = isVec4 ? 4 : 1;\n  const aShapeTemp = [...outerDimsA, dimAOuter, dimInner / components];\n  const aRank = aShapeTemp.length;\n  const bShapeTemp = [...outerDimsB, dimInner, dimBOuter / components];\n  const bRank = bShapeTemp.length;\n  const outputShapeTemp = [batchSize, dimAOuter, dimBOuter / components];\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.int32, data: dimAOuter },\n    { type: DataType.int32, data: dimBOuter },\n    { type: DataType.int32, data: dimInner },\n  ];\n  appendActivationUniformsData(activationAttributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(outerDims, aShapeTemp, bShapeTemp));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n\n  const hasBias = inputs.length > 2;\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShapeTemp));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const batchRank = outerDims.length;\n    const batchDims = internalVariable('batchDims', inputs[0].dataType, batchRank, 1);\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n    const A = inputVariable('a', inputs[0].dataType, aRank, components);\n    const B = inputVariable('b', inputs[1].dataType, bRank, components);\n    const output = outputVariable('result', inputs[0].dataType, outputShapeTemp.length, components);\n    const inputVariables = [A, B];\n    if (hasBias) {\n      const biasComponents = isChannelsLast ? components : 1;\n      inputVariables.push(inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, biasComponents));\n    }\n    const uniforms: UniformsArrayType = [\n      { name: 'dim_a_outer', type: 'i32' },\n      { name: 'dim_b_outer', type: 'i32' },\n      { name: 'dim_inner', type: 'i32' },\n    ];\n    appendActivationUniforms(activationAttributes, uniforms);\n    const baseType = tensorTypeToWsglStorageType(output.type.tensor);\n    const applyActivation = getActivationSnippet(activationAttributes, output.type.value, baseType);\n    const declareFunctions = matMulReadWriteFnSource(\n      components,\n      hasBias,\n      applyActivation,\n      [batchDims, A, B, output],\n      [outerDimsA, outerDimsB, outerDims],\n      isChannelsLast,\n    );\n    return `\n  ${shaderHelper\n    .registerUniforms(uniforms)\n    .registerInternalVariables(batchDims)\n    .declareVariables(...inputVariables, output)}\n  ${declareFunctions}\n  ${\n    isVec4\n      ? makeMatMulPackedVec4Source(elementsPerThread, workgroupSize, dataType, batchDims)\n      : makeMatMulPackedSource(elementsPerThread, workgroupSize, dataType, batchDims)\n  }\n                   `;\n  };\n  return {\n    name: 'MatMul',\n    shaderCache: {\n      hint: `${elementsPerThread};${activationAttributes.activation};${isVec4};${isChannelsLast}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport { DataType } from '../../../../wasm-common';\nimport { LOG_DEBUG } from '../../../log';\nimport { TensorView } from '../../../tensor-view';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from '../common';\nimport { ConvAttributes } from '../conv';\nimport { appendActivationUniforms, appendActivationUniformsData, getActivationSnippet } from '../fuse-utils';\n\nimport { biasSnippet, typeSnippet } from './activation_util';\nimport { utilFunctions } from './conv_util';\nimport { makeMatMulPackedSource, makeMatMulPackedVec4Source } from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet = (\n  isChannelsLast: boolean,\n  fitAOuter: boolean,\n  fitBOuter: boolean,\n  fitInner: boolean,\n  addBias = false,\n  attributes: ConvAttributes,\n  innerElementSizeX = 4,\n  innerElementSizeW = 4,\n  innerElementSize = 4,\n  dataType = 'f32',\n): string => {\n  const getXSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'resData = x[xIndex];';\n      case 3:\n        return `resData = vec3<${dataType}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;\n      case 4:\n        return 'resData = x[xIndex / 4];';\n      default:\n        throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return w[row * i32(uniforms.w_shape[3]) + colIn];';\n      case 4:\n        return 'return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];';\n      default:\n        throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const coordASnippet = isChannelsLast\n    ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `\n    : `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n  const coordResSnippet = isChannelsLast\n    ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `\n    : `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n  const xHeight = isChannelsLast ? 'i32(uniforms.x_shape[1])' : 'i32(uniforms.x_shape[2])';\n  const xWidth = isChannelsLast ? 'i32(uniforms.x_shape[2])' : 'i32(uniforms.x_shape[3])';\n  const row = isChannelsLast ? 'row' : 'col';\n  const col = isChannelsLast ? 'col' : 'row';\n  const readXSnippet = `\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${isChannelsLast ? 'i32(uniforms.result_shape[2])' : 'i32(uniforms.result_shape[3])'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${col} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX, dataType)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n  const sampleX = isChannelsLast\n    ? fitAOuter && fitInner\n      ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}`\n      : `\n    let col = colIn * ${innerElementSizeX};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX, dataType)}(0.0);`\n    : fitInner && fitBOuter\n      ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}`\n      : `\n    let col = colIn * ${innerElementSizeX};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX, dataType)}(0.0);`;\n\n  const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n  const resType = typeSnippet(innerElementSize, dataType);\n  const aType = isChannelsLast ? typeSnippet(innerElementSizeX, dataType) : typeSnippet(innerElementSizeW, dataType);\n  const bType = isChannelsLast ? typeSnippet(innerElementSizeW, dataType) : typeSnippet(innerElementSizeX, dataType);\n  const applyActivation = getActivationSnippet(attributes, resType, dataType);\n  const userCode = `\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'i32(uniforms.result_shape[2])' : 'i32(uniforms.result_shape[3])'};\n      ${coordResSnippet}\n      ${biasSnippet(addBias)}\n      ${applyActivation}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n  return userCode;\n};\n\nexport const createConv2DMatMulProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  outputShape: readonly number[],\n  dimAOuter: number,\n  dimBOuter: number,\n  dimInner: number,\n  hasBias: boolean,\n  sequentialAccessByThreads: boolean,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n  const batchSize = outputShape[0];\n  const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n  const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n  const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n  // TODO: enable vec4 for NCHW\n  const isVec4 = isChannelsLast && (inChannels % 4 === 0 || inChannels % 3 === 0) && outChannels % 4 === 0;\n\n  // TODO: fine tune size\n  const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n  const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n  const workGroupSize: [number, number, number] = [8, 8, 1];\n  const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n  const dispatch = [\n    Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n    Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n    Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[2]),\n  ];\n\n  LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n  const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : 1;\n  const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n  const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n  const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n  const fitAOuter = dimAOuter % tileAOuter === 0;\n  const fitBOuter = dimBOuter % tileBOuter === 0;\n  const fitInner = dimInner % tileInner === 0;\n  const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.int32, data: dimAOuter },\n    { type: DataType.int32, data: dimBOuter },\n    { type: DataType.int32, data: dimInner },\n    { type: DataType.int32, data: [attributes.pads[0], attributes.pads[1]] },\n    { type: DataType.int32, data: attributes.strides },\n    { type: DataType.int32, data: attributes.dilations },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(inputs[0].dims, inputs[1].dims));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniforms: UniformsArrayType = [\n      { name: 'dim_a_outer', type: 'i32' },\n      { name: 'dim_b_outer', type: 'i32' },\n      { name: 'dim_inner', type: 'i32' },\n      { name: 'pad', type: 'i32', length: 2 },\n      { name: 'stride', type: 'i32', length: 2 },\n      { name: 'dilation', type: 'i32', length: 2 },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n\n    // TODO: support component 2, 3.\n    const components = isVec4 ? 4 : 1;\n    const t = tensorTypeToWsglStorageType(inputs[0].dataType);\n    let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? `vec4<${t}>` : t}) {\n        result[flatIndex] = ${isVec4 ? `vec4<${t}>` : t}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? `vec4<${t}>` : t}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n    const x = inputVariable(\n      'x',\n      inputs[0].dataType,\n      inputs[0].dims.length,\n      innerElementSize === 3 ? 1 : innerElementSize,\n    );\n    const w = inputVariable('w', inputs[1].dataType, inputs[1].dims.length, components);\n    const inputVariables = [x, w];\n    const output = outputVariable('result', inputs[0].dataType, outputShape.length, components);\n    if (hasBias) {\n      const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, components);\n      inputVariables.push(bias);\n      declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? `vec4<${t}>` : t} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n    }\n\n    return `\n        ${utilFunctions('uniforms.result_strides')}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n        ${declareFunctions}\n        ${conv2dCommonSnippet(\n          isChannelsLast,\n          fitAOuter,\n          fitBOuter,\n          fitInner,\n          hasBias,\n          attributes,\n          elementsSize[0],\n          elementsSize[1],\n          elementsSize[2],\n          t,\n        )}\n        ${\n          isVec4\n            ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, t, undefined, !isChannelsLast, tileInner)\n            : makeMatMulPackedSource(\n                elementsPerThread,\n                workGroupSize,\n                t,\n                undefined,\n                !isChannelsLast,\n                tileInner,\n                false,\n                undefined,\n                sequentialAccessByThreads,\n              )\n        }`;\n  };\n  return {\n    name: 'Conv2DMatMul',\n    shaderCache: {\n      hint: `${attributes.cacheKey};${innerElementSize};${isVec4};${fitAOuter};${fitBOuter};${fitInner};${tileAOuter};${tileBOuter};${tileInner}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv3d_naive_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport { DataType } from '../../../../wasm-common';\nimport { LOG_DEBUG } from '../../../log';\nimport { TensorView } from '../../../tensor-view';\nimport { ShapeUtil } from '../../../util';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from '../common';\nimport { ConvAttributes } from '../conv';\nimport { appendActivationUniforms, appendActivationUniformsData, getActivationSnippet } from '../fuse-utils';\n\nimport { typeSnippet } from './activation_util';\n\nconst arrayProduct = (arr: number[]) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nconst parse3TupleParam = (param: number | [number, number, number]): [number, number, number] =>\n  typeof param === 'number' ? [param, param, param] : param;\n\nconst getEffectiveFilterSize = (filterSize: number, dilation: number): number => {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n};\n\nconst computeDefaultPad = (\n  inputShape: [number, number] | [number, number, number, number],\n  fieldSize: number,\n  stride: number,\n  dilation = 1,\n): number => {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n};\n\nconst computeOutputShape4D = (\n  inShape: [number, number, number, number],\n  filterShape: [number, number, number],\n  outChannels: number,\n  strides: [number, number, number],\n  zeroPad?: number,\n): [number, number, number, number] => {\n  if (zeroPad == null) {\n    // eslint-disable-next-line no-param-reassign\n    zeroPad = computeDefaultPad(inShape, filterShape[0], strides[0]);\n  }\n  const outShape: [number, number, number, number] = [0, 0, 0, outChannels];\n  for (let index = 0; index < 3; index++) {\n    if (inShape[index] + 2 * zeroPad >= filterShape[index]) {\n      outShape[index] = Math.trunc((inShape[index] - filterShape[index] + 2 * zeroPad) / strides[index] + 1);\n    }\n  }\n  return outShape;\n};\n\nconst get3DPadAndOutInfo = (\n  pad: number | string | number[],\n  inDepth: number,\n  inHeight: number,\n  inWidth: number,\n  strideDepth: number,\n  strideHeight: number,\n  strideWidth: number,\n  filterDepth: number,\n  filterHeight: number,\n  filterWidth: number,\n): { padInfo: PadInfo3D; outDepth: number; outHeight: number; outWidth: number } => {\n  let padInfo: PadInfo3D;\n  let outDepth: number;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (pad === 'VALID') {\n    // eslint-disable-next-line no-param-reassign\n    pad = 0;\n  }\n\n  if (typeof pad === 'number') {\n    padInfo = { top: pad, bottom: pad, left: pad, right: pad, front: pad, back: pad };\n    const outShape = computeOutputShape4D(\n      [inDepth, inHeight, inWidth, 1],\n      [filterDepth, filterHeight, filterWidth],\n      1,\n      [strideDepth, strideHeight, strideWidth],\n      pad,\n    );\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (Array.isArray(pad)) {\n    if (!pad.every((val, _, arr) => val === arr[0])) {\n      throw Error(`Unsupported padding parameter: ${pad}`);\n    }\n    padInfo = { top: pad[0], bottom: pad[1], left: pad[2], right: pad[3], front: pad[4], back: pad[5] };\n    const outShape = computeOutputShape4D(\n      [inDepth, inHeight, inWidth, 1],\n      [filterDepth, filterHeight, filterWidth],\n      1,\n      [strideDepth, strideHeight, strideWidth],\n      pad[0],\n    );\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'SAME_UPPER') {\n    // TODO: support 'SAME_LOWER'.\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n\n    padInfo = { top, bottom, left, right, front, back };\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return { padInfo, outDepth, outHeight, outWidth };\n};\n\ntype PadInfo3D = {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n  front: number;\n  back: number;\n};\n\nexport type Conv3DInfo = {\n  batchSize: number;\n  inDepth: number;\n  inHeight: number;\n  inWidth: number;\n  inChannels: number;\n  outDepth: number;\n  outHeight: number;\n  outWidth: number;\n  outChannels: number;\n  dataFormat: 'channelsFirst' | 'channelsLast';\n  strideDepth: number;\n  strideHeight: number;\n  strideWidth: number;\n  dilationDepth: number;\n  dilationHeight: number;\n  dilationWidth: number;\n  filterDepth: number;\n  filterHeight: number;\n  filterWidth: number;\n  effectiveFilterDepth: number;\n  effectiveFilterHeight: number;\n  effectiveFilterWidth: number;\n  padInfo: PadInfo3D;\n  inShape: [number, number, number, number, number];\n  outShape: [number, number, number, number, number];\n  filterShape: [number, number, number, number, number];\n};\n\nexport const computeConv3DInfo = (\n  inShape: [number, number, number, number, number],\n  filterShape: [number, number, number, number, number],\n  strides: number | [number, number, number],\n  dilations: number | [number, number, number],\n  pad: number | string | number[],\n  depthwise = false,\n  dataFormat: 'channelsFirst' | 'channelsLast' = 'channelsLast',\n): Conv3DInfo => {\n  let batchSize, inDepth, inHeight, inWidth, inChannels;\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  const [filterChannels, , filterDepth, filterHeight, filterWidth] = filterShape;\n\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n\n  const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(\n    pad,\n    inDepth,\n    inHeight,\n    inWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n  );\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number, number] = [0, 0, 0, 0, 0];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape,\n  };\n};\n\nexport const createConv3DNaiveProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  outputShape: readonly number[],\n  filterDims: readonly number[],\n  pads: readonly number[],\n  dataFormat: string,\n): ProgramInfo => {\n  const isChannelLast = dataFormat === 'channelsLast';\n  const inChannels = isChannelLast ? inputs[0].dims[3] : inputs[0].dims[1];\n  // TODO: enable vec4.\n  const isVec4 = false;\n  const workGroupSize: [number, number, number] = [64, 1, 1];\n  const dispatchLayout = { x: outputShape.map((_, i) => i) };\n  const dispatch = [Math.ceil(arrayProduct(dispatchLayout.x.map((d) => outputShape[d])) / workGroupSize[0]), 1, 1];\n\n  LOG_DEBUG('verbose', () => `[conv3d_naive_webgpu] dispatch = ${dispatch}`);\n\n  const innerElementSize = isVec4 ? (isChannelLast && inChannels % 4 !== 0 ? 3 : 4) : 1;\n  const outputSize = ShapeUtil.size(outputShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: filterDims },\n    { type: DataType.uint32, data: pads },\n    { type: DataType.uint32, data: attributes.strides },\n    { type: DataType.uint32, data: attributes.dilations },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(inputs[0].dims, inputs[1].dims));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n  const hasBias = inputs.length === 3;\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'filter_dims', type: 'u32', length: filterDims.length },\n      { name: 'pads', type: 'u32', length: pads.length },\n      { name: 'strides', type: 'u32', length: attributes.strides.length },\n      { name: 'dilations', type: 'u32', length: attributes.dilations.length },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n    // TODO: support component 2, 3.\n    const components = isVec4 ? 4 : 1;\n    const t = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n    const x = inputVariable(\n      'x',\n      inputs[0].dataType,\n      inputs[0].dims.length,\n      innerElementSize === 3 ? 1 : innerElementSize,\n    );\n    const w = inputVariable('W', inputs[1].dataType, inputs[1].dims.length, components);\n    const inputVariables = [x, w];\n    const output = outputVariable('result', inputs[0].dataType, outputShape.length, components);\n    let declareFunctions = '';\n    if (hasBias) {\n      const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, components);\n      inputVariables.push(bias);\n      declareFunctions += `\n        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${isVec4 ? `vec4<${t}>` : t} {\n          return bias[${isChannelLast ? getElementAt('coords', 4, 5) : getElementAt('coords', 1, 5)}${\n            isVec4 ? '/ 4' : ''\n          }];\n        }`;\n    }\n    const resType = typeSnippet(innerElementSize, t);\n    const applyActivation = getActivationSnippet(attributes, resType, t);\n\n    return `\n            ${declareFunctions}\n            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${x.getByIndices('aIndices')};\n            }\n            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${w.getByIndices('aIndices')};\n            }\n          ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n          ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n              let coords = ${output.offsetToIndices('global_idx')};\n              let batch = ${getElementAt('coords', 0, x.rank)};\n              let d2 = ${\n                isChannelLast ? getElementAt('coords', x.rank - 1, x.rank) : getElementAt('coords', 1, x.rank)\n              };\n              let xFRCCorner = vec3<u32>(${\n                isChannelLast ? getElementAt('coords', 1, x.rank) : getElementAt('coords', 2, x.rank)\n              },\n              ${isChannelLast ? getElementAt('coords', 2, x.rank) : getElementAt('coords', 3, x.rank)},\n              ${\n                isChannelLast ? getElementAt('coords', 3, x.rank) : getElementAt('coords', 4, x.rank)\n              }) * uniforms.strides - uniforms.pads;\n              let xFCorner = xFRCCorner.x;\n              let xRCorner = xFRCCorner.y;\n              let xCCorner = xFRCCorner.z;\n              let xShapeY = ${\n                isChannelLast\n                  ? getElementAt('uniforms.x_shape', 1, x.rank)\n                  : getElementAt('uniforms.x_shape', 2, x.rank)\n              };\n              let xShapeZ = ${\n                isChannelLast\n                  ? getElementAt('uniforms.x_shape', 2, x.rank)\n                  : getElementAt('uniforms.x_shape', 3, x.rank)\n              };\n              let xShapeW = ${\n                isChannelLast\n                  ? getElementAt('uniforms.x_shape', 3, x.rank)\n                  : getElementAt('uniforms.x_shape', 4, x.rank)\n              };\n              let xShapeU = ${\n                isChannelLast\n                  ? getElementAt('uniforms.x_shape', 4, x.rank)\n                  : getElementAt('uniforms.x_shape', 1, x.rank)\n              };\n              let inputDepthNearestVec4 = (xShapeU / 4) * 4;\n              let inputDepthVec4Remainder = xShapeU % 4;\n\n              var value = 0.0;\n              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {\n                let xF = xFCorner + wF * uniforms.dilations[0];\n                if (xF < 0 || xF >= xShapeY) {\n                  continue;\n                }\n\n                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {\n                  let xR = xRCorner + wR * uniforms.dilations[1];\n                  if (xR < 0 || xR >= xShapeZ) {\n                    continue;\n                  }\n\n                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {\n                    let xC = xCCorner + wC * uniforms.dilations[2];\n                    if (xC < 0 || xC >= xShapeW) {\n                      continue;\n                    }\n\n                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {\n                      ${\n                        isChannelLast\n                          ? `let xValues = vec4<f32>(\n                               getX(batch, xF, xR, xC, d1),\n                               getX(batch, xF, xR, xC, d1 + 1),\n                               getX(batch, xF, xR, xC, d1 + 2),\n                               getX(batch, xF, xR, xC, d1 + 3));\n                            `\n                          : `let xValues = vec4<f32>(\n                               getX(batch, d1, xF, xR, xC),\n                               getX(batch, d1 + 1, xF, xR, xC),\n                               getX(batch, d1 + 2, xF, xR, xC),\n                               getX(batch, d1 + 3, xF, xR, xC));\n                            `\n                      }\n                            let wValues = vec4<f32>(\n                              getW(d2, d1, wF, wR, wC),\n                              getW(d2, d1 + 1, wF, wR, wC),\n                              getW(d2, d1 + 2, wF, wR, wC),\n                              getW(d2, d1 + 3, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                    if (inputDepthVec4Remainder == 1) {\n                        ${\n                          isChannelLast\n                            ? `value += getX(batch, xF, xR, xC, inputDepthNearestVec4)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`\n                            : `value += getX(batch, inputDepthNearestVec4, xF, xR, xC)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`\n                        }\n                    } else if (inputDepthVec4Remainder == 2) {\n                      ${\n                        isChannelLast\n                          ? `let xValues = vec2<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));\n                      `\n                          : `let xValues = vec2<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));\n                    `\n                      }\n                    let wValues = vec2<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    } else if (inputDepthVec4Remainder == 3) {\n                      ${\n                        isChannelLast\n                          ? `let xValues = vec3<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));\n                      `\n                          : `let xValues = vec3<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));\n                    `\n                      }\n                    let wValues = vec3<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                  }\n                }\n              }\n              ${hasBias ? 'value = value + getBiasByOutputCoords(coords)' : ''};\n              ${applyActivation}\n              result[global_idx] = f32(value);\n          }`;\n  };\n  return {\n    name: 'Conv3DNaive',\n    shaderCache: { hint: `${attributes.cacheKey};${isChannelLast};${innerElementSize};${hasBias}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from './common';\nimport { ConvAttributes } from './conv';\nimport { appendActivationUniforms, appendActivationUniformsData, getActivationSnippet } from './fuse-utils';\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  outputShape: readonly number[],\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += b[output_channel];' : '';\n  const xShape = inputs[0].dims;\n  const wShape = inputs[1].dims;\n\n  const isChannelLast = attributes.format === 'NHWC';\n  const outputChannels = isChannelLast ? outputShape[3] : outputShape[1];\n  const outputChannelsPerGroup = outputChannels / attributes.group;\n  const components = isChannelLast && outputChannelsPerGroup >= 4 ? getMaxComponents(outputChannels) : 1;\n  const outputSize = ShapeUtil.size(outputShape) / components;\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: attributes.dilations },\n    { type: DataType.uint32, data: [attributes.strides[0], attributes.strides[1]] },\n    { type: DataType.uint32, data: [attributes.pads[0], attributes.pads[1]] },\n    { type: DataType.uint32, data: outputChannelsPerGroup },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(\n    ...createTensorShapeVariables(xShape, [wShape[0], wShape[1], wShape[2], wShape[3] / components]),\n  );\n  const inputDependencies: ProgramInputTensorInfoDependency[] = hasBias ? ['rank', 'rank', 'rank'] : ['rank', 'rank'];\n  programUniforms.push(\n    ...createTensorShapeVariables([outputShape[0], outputShape[1], outputShape[2], outputShape[3] / components]),\n  );\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length, components);\n    const baseType = tensorTypeToWsglStorageType(output.type.tensor);\n    const applyActivation = getActivationSnippet(attributes, output.type.value, baseType);\n    const x = inputVariable('x', inputs[0].dataType, xShape.length);\n    const w = inputVariable('w', inputs[1].dataType, wShape.length, components);\n    const inputVars = [x, w];\n    if (hasBias) {\n      inputVars.push(inputVariable('b', inputs[2].dataType, inputs[2].dims, components));\n    }\n\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'dilations', type: 'u32', length: attributes.dilations.length },\n      { name: 'strides', type: 'u32', length: 2 },\n      { name: 'pads', type: 'u32', length: 2 },\n      { name: 'output_channels_per_group', type: 'u32' },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n\n    const calculateResult = isChannelLast\n      ? `\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {\n            continue;\n          }\n\n          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {\n            let input_channel = in_channel_offset + wInChannel;\n            let xVal = ${x.get('batch', 'xHeight', 'xWidth', 'input_channel')};\n            let wVal = ${w.get('wHeight', 'wWidth', 'wInChannel', 'output_channel')};\n            value += xVal * wVal;\n          }\n        }\n      }\n      `\n      : `\n      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n        let input_channel = in_channel_offset + wInChannel;\n        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {\n            continue;\n          }\n\n          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {\n              continue;\n            }\n\n            let xVal = ${x.get('batch', 'input_channel', 'xHeight', 'xWidth')};\n            let wVal = ${w.get('output_channel', 'wInChannel', 'wHeight', 'wWidth')};\n            value += xVal * wVal;\n          }\n        }\n      }\n      `;\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVars, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n    let outputIndices = ${output.offsetToIndices('global_idx')};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n      isChannelLast ? 2 : 3\n    }]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel * ${components} / uniforms.output_channels_per_group;\n    var in_channel_offset = group_id * uniforms.w_shape[${isChannelLast ? 2 : 1}];\n\n    var value: ${output.type.value} = ${output.type.value}(0);\n    ${calculateResult}\n    ${processBias}\n    ${applyActivation}\n    ${output.setByOffset('global_idx', 'value')}\n  }`;\n  };\n  return {\n    name: 'GroupedConv',\n    shaderCache: { hint: `${attributes.cacheKey}_${components}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const createGroupedConvVectorizeProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  outputShape: readonly number[],\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const components = getMaxComponents(outputShape[3]);\n  const outputNumber = getMaxComponents(outputShape[2]);\n  const outputSize = ShapeUtil.size(outputShape) / components / outputNumber;\n  const xShape = [inputs[0].dims[0], inputs[0].dims[1], inputs[0].dims[2], inputs[0].dims[3] / components];\n  const wShape = [inputs[1].dims[0], inputs[1].dims[1], inputs[1].dims[2], inputs[1].dims[3] / components];\n  const outputShapeInShader = [outputShape[0], outputShape[1], outputShape[2], outputShape[3] / components];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.int32, data: [attributes.strides[0], attributes.strides[1]] },\n    { type: DataType.int32, data: [attributes.pads[0], attributes.pads[1]] },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(xShape, wShape, outputShapeInShader));\n  const xNumber = (outputNumber - 1) * attributes.strides[1] + wShape[1];\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('output', inputs[0].dataType, outputShapeInShader.length, components);\n    const baseType = tensorTypeToWsglStorageType(output.type.tensor);\n    const applyActivation = getActivationSnippet(attributes, output.type.value, baseType);\n    const x = inputVariable('x', inputs[0].dataType, xShape.length, components);\n    const w = inputVariable('w', inputs[1].dataType, wShape.length, components);\n    const inputVars = [x, w];\n    if (hasBias) {\n      inputVars.push(inputVariable('b', inputs[2].dataType, inputs[2].dims, components));\n    }\n    const processBias = hasBias ? 'value += b[output_channel];' : '';\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'strides', type: 'i32', length: 2 },\n      { name: 'pads', type: 'i32', length: 2 },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVars, output)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${outputNumber}u;\n    let col = (index1 % width1) * ${outputNumber}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${x.type.value}, ${xNumber}>;\n    var values: array<${output.type.value}, ${outputNumber}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w's height/width.\n    for (var w_height: u32 = 0u; w_height < ${wShape[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${xNumber}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${x.get('batch', 'u32(x_height)', 'u32(x_width)', 'input_channel')};\n          } else {\n            x_vals[i] = ${x.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${wShape[1]}; w_width++) {\n          let w_val = ${w.get('w_height', 'w_width', '0', 'output_channel')};\n          for (var i = 0u; i < ${outputNumber}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${outputNumber}u; i++) {\n      var value = values[i];\n      ${processBias}\n      ${applyActivation}\n      ${output.set('batch', 'row', 'col + i', 'output_channel', 'value')};\n    }\n  }`;\n  };\n\n  return {\n    name: 'GroupedConv-Vectorize',\n    shaderCache: {\n      hint: `${attributes.cacheKey};${components};${outputNumber};${xNumber};${wShape[0]};${wShape[1]}`,\n      inputDependencies: hasBias ? ['rank', 'rank', 'type'] : ['rank', 'rank'],\n    },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { BroadcastUtil, ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createMatmulProgramInfo } from './3rd-party/matmul_packed_webgpu';\nimport {\n  createTensorShapeVariables,\n  getBroadcastDims,\n  getMaxComponents,\n  IndicesHelper,\n  inputVariable,\n  internalVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from './common';\nimport {\n  appendActivationUniforms,\n  appendActivationUniformsData,\n  getActivationSnippet,\n  InternalActivationAttributes,\n} from './fuse-utils';\n\nexport const createNaiveMatmulProgramInfo = (\n  inputs: readonly TensorView[],\n  activationAttributes: InternalActivationAttributes,\n  outputShape: readonly number[],\n  reshapedOutputShape?: readonly number[],\n  isChannelsLast = false /* only used for conv2dByMatMul*/,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n\n  const M = aShape[aShape.length - 2];\n  const N = bShape[bShape.length - 1];\n  const K = aShape[aShape.length - 1];\n  const components = getMaxComponents(N);\n  const aComponents = getMaxComponents(K);\n  const outputNumber = getMaxComponents(M);\n  const outputSize = ShapeUtil.size(outputShape) / components / outputNumber;\n  const hasBias = inputs.length > 2;\n  const outerDims = reshapedOutputShape ? reshapedOutputShape.slice(0, -2) : outputShape.slice(0, -2);\n  const batchSize = ShapeUtil.size(outerDims);\n  const outputShapeInShader = [batchSize, M, N];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: M },\n    { type: DataType.uint32, data: N },\n    { type: DataType.uint32, data: K },\n  ];\n  appendActivationUniformsData(activationAttributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(outerDims, aShape, bShape));\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShapeInShader));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const batchDims = internalVariable('batch_dims', inputs[0].dataType, outerDims.length);\n    const a = inputVariable('a', inputs[0].dataType, aShape.length, aComponents);\n    const b = inputVariable('b', inputs[1].dataType, bShape.length, components);\n    const output = outputVariable('output', inputs[0].dataType, outputShapeInShader.length, components);\n    const baseType = tensorTypeToWsglStorageType(output.type.tensor);\n    const applyActivation = getActivationSnippet(activationAttributes, output.type.value, baseType);\n    const inputVariables = [a, b];\n    let processBias = '';\n    if (hasBias) {\n      const biasComponents = isChannelsLast ? components : 1;\n      inputVariables.push(inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, biasComponents));\n      processBias = `${\n        isChannelsLast ? `value += bias[col / ${biasComponents}];` : `value += ${output.type.value}(bias[row + i]);`\n      }`;\n    }\n\n    const outerDimsA = aShape.slice(0, -2);\n    const outerDimsB = bShape.slice(0, -2);\n    const broadCastADims = getBroadcastDims(outerDimsA, outerDims);\n    const broadCastBDims = getBroadcastDims(outerDimsB, outerDims);\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'M', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'K', type: 'u32' },\n    ];\n    appendActivationUniforms(activationAttributes, uniforms);\n\n    const getIndices = (variable: IndicesHelper, broadCastDims: number[]) => {\n      const rank = variable.rank;\n      const name = variable.name;\n      if (rank === 2) {\n        return `var ${name}_indices = ${variable.type.indices}(0u, 0u);`;\n      }\n      const batchRank = batchDims.rank;\n      let resStr = `var ${name}_indices: ${variable.type.indices};`;\n      for (let i = rank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n        resStr += `\\n${name}_indices[${i}] = ${batchRank > 1 ? `batch_indices[${j}]` : 'batch_indices'};`;\n      }\n      broadCastDims.forEach((i) => {\n        resStr += `\\n${name}_indices[${i}] = 0;`;\n      });\n      resStr += `${name}_indices[${rank - 2}] = 0u;\n                     ${name}_indices[${rank - 1}] = 0u;`;\n      return resStr;\n    };\n\n    const calcResult = (): string => {\n      let calcStr = `var a_data: ${a.type.value};`;\n      for (let i = 0; i < aComponents; i++) {\n        calcStr += `\n              let b_data${i} = b[(b_offset + (k + ${i}) * uniforms.N + col) / ${components}];`;\n      }\n      for (let i = 0; i < outputNumber; i++) {\n        calcStr += `a_data = a[(a_offset + (row + ${i}) * uniforms.K + k) / ${aComponents}];`;\n\n        for (let j = 0; j < aComponents; j++) {\n          calcStr += `\n            values[${i}] = fma(${b.type.value}(a_data${aComponents === 1 ? '' : `[${j}]`}), b_data${j}, values[${i}]);\\n`;\n        }\n      }\n      return calcStr;\n    };\n\n    return `\n  ${shaderHelper\n    .registerUniforms(uniforms)\n    .registerInternalVariables(batchDims)\n    .declareVariables(...inputVariables, output)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    let col = (global_idx % (uniforms.N / ${components})) * ${components};\n    var index1 = global_idx / (uniforms.N / ${components});\n    let stride1 = uniforms.M / ${outputNumber};\n    let row = (index1 % stride1) * ${outputNumber};\n    let batch = index1 / stride1;\n\n    ${outputShape.length === 2 ? '' : `let batch_indices = ${batchDims.offsetToIndices('batch')};`}\n    ${getIndices(a, broadCastADims)}\n    let a_offset = ${a.indicesToOffset('a_indices')};\n    ${getIndices(b, broadCastBDims)}\n    let b_offset = ${b.indicesToOffset('b_indices')};\n    var values: array<${output.type.value}, ${outputNumber}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${aComponents}) {\n      ${calcResult()}\n    }\n    for (var i = 0u; i < ${outputNumber}u; i++) {\n      var value = values[i];\n      ${processBias}\n      ${applyActivation}\n      let cur_indices = ${output.type.indices}(batch, row + i, col);\n      let offset = ${output.indicesToOffset('cur_indices')};\n      ${output.setByOffset(`offset / ${components}`, 'value')};\n    }\n  }\n  `;\n  };\n  return {\n    name: 'MatMulNaive',\n    shaderCache: {\n      hint: `${activationAttributes.activation};${components};${aComponents};${outputNumber};${isChannelsLast}`,\n      inputDependencies: hasBias ? ['rank', 'rank', 'rank'] : ['rank', 'rank'],\n    },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const outputShape = BroadcastUtil.calcShape(context.inputs[0].dims, context.inputs[1].dims, true);\n  if (!outputShape) {\n    throw new Error(\"Can't use matmul on the given tensors\");\n  }\n  const N = outputShape[outputShape.length - 1];\n  const K = context.inputs[0].dims[context.inputs[0].dims.length - 1];\n  if (N < 8 && K < 8) {\n    context.compute(createNaiveMatmulProgramInfo(context.inputs, { activation: '' }, outputShape));\n  } else {\n    context.compute(createMatmulProgramInfo(context.inputs, { activation: '' }, outputShape));\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { PoolConvUtil } from '../../util';\nimport { AttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext } from '../types';\n\nimport { createConv2DMatMulProgramInfo } from './3rd-party/conv2d_mm_webgpu';\nimport { computeConv3DInfo, createConv3DNaiveProgramInfo } from './3rd-party/conv3d_naive_webgpu';\nimport { createMatmulProgramInfo } from './3rd-party/matmul_packed_webgpu';\nimport { createGroupedConvProgramInfo, createGroupedConvVectorizeProgramInfo } from './conv-grouped';\nimport { InternalActivationAttributes, parseInternalActivationAttributes } from './fuse-utils';\nimport { createNaiveMatmulProgramInfo } from './matmul';\nimport { createTransposeProgramInfo } from './transpose';\n\nexport const calculateOutputShape = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  dilations: readonly number[],\n  adjustPads: readonly number[],\n  strides: readonly number[],\n  isChannelLast: boolean,\n): number[] => {\n  const batchSize = inputShape[0];\n  const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n  const spatialRank = inputSpatialShape.length;\n  const outChannels = kernelShape[0];\n  const kernelSpatialShape = kernelShape.slice(2);\n  const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n  const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n  const outputShape = inputSpatialShapeWithPad.map((v, i) =>\n    Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]),\n  );\n  outputShape.splice(0, 0, batchSize);\n  outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n  return outputShape;\n};\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC' | 'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute = [2, 3, 1, 0];\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  if (inputs[0].dims.length > 5) {\n    throw new Error('greater than 5D is not supported');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not well specified in the attributes, infer it from the weight tensor dims\n  if (kernelShape.length < inputs[1].dims.length - 2) {\n    kernelShape.push(...Array(inputs[1].dims.length - 2 - kernelShape.length).fill(0));\n  }\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n    inputs[0].dims,\n    attributes.strides,\n    attributes.dilations,\n    kernelShape,\n    pads,\n    attributes.format === 'NHWC',\n    attributes.autoPad,\n  );\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, { kernelShape, pads });\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as number[];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as number[];\n  const pads = attributes.pads as number[];\n  const strides = attributes.strides as number[];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return {\n    autoPad,\n    format,\n    dilations,\n    group,\n    kernelShape,\n    pads,\n    strides,\n    wIsConst,\n    ...activationAttributes,\n    cacheKey: `${attributes.format};${activationAttributes.activation};`,\n  };\n};\n\nconst conv2d = (\n  context: ComputeContext,\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): void => {\n  // check attributes\n\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n  const outputShape = calculateOutputShape(\n    inputs[0].dims,\n    inputs[1].dims,\n    attributes.dilations,\n    attributes.pads,\n    attributes.strides,\n    isChannelsLast,\n  );\n  if (attributes.group !== 1) {\n    const convInputs = [inputs[0]];\n    if (isChannelsLast) {\n      const transposedWeight =\n        (context.kernelCustomData.wT as TensorView | undefined) ??\n        context.compute(createTransposeProgramInfo(inputs[1], weightTransposeAttribute), {\n          inputs: [1],\n          outputs: [attributes.wIsConst ? -2 : -1],\n        })[0];\n      if (attributes.wIsConst && !context.kernelCustomData.wT) {\n        context.kernelCustomData.wT = transposedWeight;\n      }\n      convInputs.push(transposedWeight);\n    } else {\n      convInputs.push(inputs[1]);\n    }\n    if (inputs.length === 3) {\n      convInputs.push(inputs[2]);\n    }\n    // NVIDIA GPU with ampere architecture fails with below 2 cases, but we couldn't repro them with any other\n    // GPUs. So just disable vectorize on NVIDIA ampere to ensure always correct outputs.\n    // [webgpu]Conv - conv - vectorize group - B\n    // [webgpu]Conv - conv - vectorize group - D\n    const enableGroupedConvVectorize = !context.adapterInfo.isArchitecture('ampere');\n    if (\n      enableGroupedConvVectorize &&\n      isChannelsLast &&\n      inputs[1].dims[0] === attributes.group &&\n      inputs[1].dims[1] === 1 &&\n      attributes.dilations[0] === 1 &&\n      attributes.dilations[1] === 1\n    ) {\n      context.compute(\n        createGroupedConvVectorizeProgramInfo(convInputs, attributes, outputShape, squeezeOutputShapeFunction),\n        { inputs: convInputs },\n      );\n    } else {\n      context.compute(createGroupedConvProgramInfo(convInputs, attributes, outputShape, squeezeOutputShapeFunction), {\n        inputs: convInputs,\n      });\n    }\n    return;\n  }\n\n  const hasBias = inputs.length === 3;\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n    isChannelsLast &&\n    weightHeight === inputHeight &&\n    weightWidth === inputWidth &&\n    attributes.pads[0] === 0 &&\n    attributes.pads[1] === 0;\n  if (\n    sameSize ||\n    (weightHeight === 1 &&\n      weightWidth === 1 &&\n      attributes.dilations[0] === 1 &&\n      attributes.dilations[1] === 1 &&\n      attributes.strides[0] === 1 &&\n      attributes.strides[1] === 1 &&\n      attributes.pads[0] === 0 &&\n      attributes.pads[1] === 0)\n  ) {\n    // conv2dByMatMul\n    const batch = outputShape[0];\n    let xReshaped, wReshaped, matmulOutputShape;\n    const matmulInputs = [];\n    if (isChannelsLast) {\n      const transposedWeight =\n        (context.kernelCustomData.wT as TensorView | undefined) ??\n        context.compute(createTransposeProgramInfo(inputs[1], weightTransposeAttribute), {\n          inputs: [1],\n          outputs: [attributes.wIsConst ? -2 : -1],\n        })[0];\n      if (attributes.wIsConst && !context.kernelCustomData.wT) {\n        context.kernelCustomData.wT = transposedWeight;\n      }\n      if (sameSize) {\n        const sharedDim = inputHeight * inputWidth * inputChannels;\n        xReshaped = inputs[0].reshape([1, batch, sharedDim]);\n        wReshaped = transposedWeight.reshape([1, sharedDim, outChannels]);\n        matmulOutputShape = [1, batch, outChannels];\n      } else {\n        xReshaped = inputs[0].reshape([batch, inputHeight * inputWidth, inputChannels]);\n        wReshaped = transposedWeight.reshape([1, inputChannels, outChannels]);\n        matmulOutputShape = [batch, outHeight * outWidth, outChannels];\n      }\n      matmulInputs.push(xReshaped);\n      matmulInputs.push(wReshaped);\n    } else {\n      xReshaped = inputs[0].reshape([batch, inputChannels, inputHeight * inputWidth]);\n      wReshaped = inputs[1].reshape([1, outChannels, inputChannels]);\n      matmulOutputShape = [batch, outChannels, outHeight * outWidth];\n      matmulInputs.push(wReshaped);\n      matmulInputs.push(xReshaped);\n    }\n    if (hasBias) {\n      matmulInputs.push(inputs[2]);\n    }\n    const N = matmulOutputShape[2];\n    const K = matmulInputs[0].dims[matmulInputs[0].dims.length - 1];\n    // Tune the threshold.\n    if (N < 8 && K < 8) {\n      context.compute(\n        createNaiveMatmulProgramInfo(\n          matmulInputs,\n          attributes,\n          outputShape,\n          matmulOutputShape,\n          isChannelsLast,\n          squeezeOutputShapeFunction,\n        ),\n        { inputs: matmulInputs },\n      );\n    } else {\n      context.compute(\n        createMatmulProgramInfo(\n          matmulInputs,\n          attributes,\n          outputShape,\n          matmulOutputShape,\n          isChannelsLast,\n          squeezeOutputShapeFunction,\n        ),\n        { inputs: matmulInputs },\n      );\n    }\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight =\n    (context.kernelCustomData.wT as TensorView | undefined) ??\n    context.compute(createTransposeProgramInfo(inputs[1], weightTransposeAttribute), {\n      inputs: [1],\n      outputs: [attributes.wIsConst ? -2 : -1],\n    })[0];\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\n    context.kernelCustomData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    convInputs.push(inputs[2]);\n  }\n\n  // STEP.3: compute matmul\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n  context.compute(\n    createConv2DMatMulProgramInfo(\n      convInputs,\n      attributes,\n      outputShape,\n      dimAOuter,\n      dimBOuter,\n      dimInner,\n      hasBias,\n      sequentialAccessByThreads,\n      squeezeOutputShapeFunction,\n    ),\n    { inputs: convInputs },\n  );\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n      isChannelLast\n        ? // [N, W, C] -> [N, H=1, W, C]\n          [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]]\n        : // [N, C, W] -> [N, C, H=1, W]\n          [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]],\n    ),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]]),\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes(\n    { ...attributes, pads, strides, dilations, kernelShape },\n    inputs,\n  );\n  conv2d(context, inputs, adjustedAttributes, (outputShape) =>\n    isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : [outputShape[0], outputShape[1], outputShape[3]],\n  );\n};\n\nconst conv3d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const format = attributes.format === 'NHWC' ? 'channelsLast' : 'channelsFirst';\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n  const pads = attributes.autoPad === 'NOTSET' ? attributes.pads : attributes.autoPad;\n  const convInfo = computeConv3DInfo(\n    inputs[0].dims as [number, number, number, number, number],\n    inputs[1].dims as [number, number, number, number, number],\n    attributes.strides as number | [number, number, number],\n    attributes.dilations as number | [number, number, number],\n    pads as string | number[],\n    false,\n    format,\n  );\n  context.compute(\n    createConv3DNaiveProgramInfo(\n      inputs,\n      adjustedAttributes,\n      convInfo.outShape,\n      [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth],\n      [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left],\n      format,\n    ),\n  );\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else if (context.inputs[0].dims.length === 5) {\n    conv3d(context, context.inputs, attributes);\n  } else {\n    const adjustedAttributes = getAdjustedConvAttributes(attributes, context.inputs);\n    conv2d(context, context.inputs, adjustedAttributes);\n  }\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport { DataType } from '../../../../wasm-common';\nimport { LOG_DEBUG } from '../../../log';\nimport { TensorView } from '../../../tensor-view';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from '../common';\nimport { ConvTransposeAttributes } from '../conv-transpose';\nimport { appendActivationUniforms, appendActivationUniformsData, getActivationSnippet } from '../fuse-utils';\n\nimport { biasSnippet } from './activation_util';\nimport { utilFunctions } from './conv_util';\nimport { makeMatMulPackedSource, makeMatMulPackedVec4Source } from './matmul_packed_webgpu';\n\nconst conv2dTransposeCommonSnippet = (\n  isChannelsLast: boolean,\n  addBias = false,\n  attributes: ConvTransposeAttributes,\n  type: string,\n  innerElementSize = 4,\n): string => {\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];';\n      case 4:\n        return `\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return ${type}(v0, v1, v2, v3);\n            `;\n      default:\n        throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const coordASnippet = isChannelsLast\n    ? `\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `\n    : `\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `;\n\n  const coordResSnippet = isChannelsLast\n    ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `\n    : `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n  const xHeight = isChannelsLast ? 'i32(uniforms.x_shape[1])' : 'i32(uniforms.x_shape[2])';\n  const xWidth = isChannelsLast ? 'i32(uniforms.x_shape[2])' : 'i32(uniforms.x_shape[3])';\n  const row = isChannelsLast ? 'row' : 'col';\n  const col = isChannelsLast ? 'col' : 'row';\n\n  const readASnippet = `\n      let inChannels = ${isChannelsLast ? 'i32(uniforms.x_shape[3])' : 'i32(uniforms.x_shape[1])'};\n      let outWidth = ${isChannelsLast ? 'i32(uniforms.result_shape[2])' : 'i32(uniforms.result_shape[3])'};\n      let outRow = ${row} / outWidth;\n      let outCol = ${row} % outWidth;\n\n      let WRow = ${col} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${col} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${xHeight}) || fract(xR) > 0.0) {\n        return ${type}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${xWidth}) || fract(xC) > 0.0) {\n        return ${type}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${col} % inChannels;\n      ${coordASnippet}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${innerElementSize}];`;\n\n  const sampleA = isChannelsLast\n    ? `\n      let col = colIn * ${innerElementSize};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${readASnippet}\n      }\n      return ${type}(0.0);`\n    : `\n      let col = colIn * ${innerElementSize};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${readASnippet}\n      }\n      return ${type}(0.0);`;\n\n  const sampleW = `\n      let col = colIn * ${innerElementSize};\n      let inChannels = ${isChannelsLast ? 'i32(uniforms.x_shape[3])' : 'i32(uniforms.x_shape[1])'};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${\n        isChannelsLast\n          ? 'row < uniforms.dim_inner && col < uniforms.dim_b_outer'\n          : 'row < uniforms.dim_inner && col < uniforms.dim_a_outer'\n      }  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${getWSnippet(innerElementSize)}\n      }\n      return ${type}(0.0);\n      `;\n\n  const applyActivation = getActivationSnippet(attributes, type);\n  const userCode = `\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${type} {\n    ${isChannelsLast ? sampleA : sampleW}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${type} {\n    ${isChannelsLast ? sampleW : sampleA}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${type}) {\n    let col = colIn * ${innerElementSize};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${isChannelsLast ? 'i32(uniforms.result_shape[2])' : 'i32(uniforms.result_shape[3])'};\n      ${coordResSnippet}\n      ${biasSnippet(addBias)}\n      ${applyActivation}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${innerElementSize}] = value;\n    }\n  }`;\n  return userCode;\n};\n\nexport const createConv2DTransposeMatMulProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvTransposeAttributes,\n  outputShape: readonly number[],\n  dimAOuter: number,\n  dimBOuter: number,\n  dimInner: number,\n  hasBias: boolean,\n  sequentialAccessByThreads: boolean,\n): ProgramInfo => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n  const batchSize = outputShape[0];\n  const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n  const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n  const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n  // TODO: enable vec4 for NCHW\n  const isVec4 = isChannelsLast && inChannels % 4 === 0 && inChannels % 3 && outChannels % 4 === 0;\n\n  // TODO: fine tune size\n  const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n  const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n  const workGroupSize: [number, number, number] = [8, 8, 1];\n  const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n  const dispatch = [\n    Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n    Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n    Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[2]),\n  ];\n\n  LOG_DEBUG('verbose', () => `[conv_backprop_mm_webgpu] dispatch = ${dispatch}`);\n\n  const innerElementSize = isVec4 ? 4 : 1;\n  const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n  const components = isVec4 ? 4 : 1;\n  const filterDims = [attributes.kernelShape[isChannelsLast ? 1 : 2], attributes.kernelShape[isChannelsLast ? 2 : 3]];\n  const effectiveFilterDims = [\n    filterDims[0] + (attributes.dilations[0] <= 1 ? 0 : (filterDims[0] - 1) * (attributes.dilations[0] - 1)),\n    filterDims[1] + (attributes.dilations[1] <= 1 ? 0 : (filterDims[1] - 1) * (attributes.dilations[1] - 1)),\n  ];\n  const pads = [\n    effectiveFilterDims[0] - 1 - Math.floor((attributes.pads[0] + attributes.pads[2]) / 2),\n    effectiveFilterDims[1] - 1 - Math.floor((attributes.pads[1] + attributes.pads[3]) / 2),\n  ];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.int32, data: dimAOuter },\n    { type: DataType.int32, data: dimBOuter },\n    { type: DataType.int32, data: dimInner },\n    { type: DataType.int32, data: attributes.strides },\n    { type: DataType.int32, data: attributes.dilations },\n    { type: DataType.int32, data: filterDims },\n    { type: DataType.int32, data: pads },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(inputs[0].dims, inputs[1].dims));\n\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const x = inputVariable('x', inputs[0].dataType, inputs[0].dims.length, components);\n    const w = inputVariable('w', inputs[1].dataType, inputs[1].dims.length, 1);\n    const output = outputVariable('result', inputs[0].dataType, outputShape.length, components);\n    const inputVariables = [x, w];\n\n    let declareFunctions = '';\n    if (hasBias) {\n      const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, components);\n      inputVariables.push(bias);\n      declareFunctions += `\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${bias.type.value} {\n            return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n          }`;\n    }\n\n    const uniforms: UniformsArrayType = [\n      { name: 'dim_a_outer', type: 'i32' },\n      { name: 'dim_b_outer', type: 'i32' },\n      { name: 'dim_inner', type: 'i32' },\n      { name: 'strides', type: 'i32', length: 2 },\n      { name: 'dilations', type: 'i32', length: 2 },\n      { name: 'filter_dims', type: 'i32', length: filterDims.length },\n      { name: 'pads', type: 'i32', length: pads.length },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n    const elemType = tensorTypeToWsglStorageType(inputs[0].dataType, 1);\n    if (elemType !== 'f16' && elemType !== 'f32') {\n      throw new Error(`elemType ${elemType} is not supported.`);\n    }\n    return `\n        ${utilFunctions('uniforms.result_strides')}\n        ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)};\n        ${declareFunctions}\n        ${conv2dTransposeCommonSnippet(isChannelsLast, hasBias, attributes, x.type.value, innerElementSize)}\n        ${\n          isVec4\n            ? makeMatMulPackedVec4Source(\n                elementsPerThread,\n                workGroupSize,\n                elemType,\n                undefined,\n                !isChannelsLast,\n                tileInner,\n              )\n            : makeMatMulPackedSource(\n                elementsPerThread,\n                workGroupSize,\n                elemType,\n                undefined,\n                !isChannelsLast,\n                tileInner,\n                false,\n                undefined,\n                sequentialAccessByThreads,\n              )\n        }`;\n  };\n\n  return {\n    name: 'Conv2DTransposeMatMul',\n    shaderCache: { hint: `${attributes.cacheKey};${elementsPerThread};${workGroupSize};${isVec4}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_webgpu.ts\n\nimport { DataType } from '../../../../wasm-common';\nimport { LOG_DEBUG } from '../../../log';\nimport { TensorView } from '../../../tensor-view';\nimport { ShapeUtil } from '../../../util';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from '../common';\nimport { ConvTransposeAttributes } from '../conv-transpose';\n\nconst createConvTranspose2DOpProgramShaderSource = (\n  shaderHelper: ShaderHelper,\n  inputs: readonly TensorView[],\n  outputShape: readonly number[],\n  hasBias: boolean,\n  is1DimensionDispatch: boolean,\n  isVec4 = false,\n  dataType: string,\n  uniforms: UniformsArrayType,\n  isChannelsLast = false,\n): string => {\n  const rowDim = isChannelsLast ? 1 : 2;\n  const colDim = isChannelsLast ? 2 : 3;\n  const channelDim = isChannelsLast ? 3 : 1;\n  const workPerThread = isVec4 ? 2 : 1;\n\n  let declareFunctions = `\n  fn setOutputAtIndex(flatIndex : u32, value : ${isVec4 ? `vec4<${dataType}>` : dataType}) {\n    result[flatIndex] = ${isVec4 ? `vec4<${dataType}>` : dataType}(value);\n  }`;\n  if (hasBias) {\n    declareFunctions += `\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${isVec4 ? `vec4<${dataType}>` : dataType} {\n      return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n    }`;\n  }\n  const components = isVec4 ? 4 : 1;\n  const w = inputVariable('W', inputs[1].dataType, inputs[1].dims.length, components);\n  const dy = inputVariable('Dy', inputs[0].dataType, inputs[0].dims.length, components);\n  const inputVariables = [dy, w];\n  if (hasBias) {\n    inputVariables.push(inputVariable('bias', inputs[2].dataType, [outputShape[channelDim]].length, components));\n  }\n  const output = outputVariable('result', inputs[0].dataType, outputShape.length, components);\n\n  const codeSnippet4 = `{\n        let batch: u32 = ${is1DimensionDispatch ? 'global_id.z' : 'workgroup_id.z'} / uniforms.result_shape[1];\n        let r = ${is1DimensionDispatch ? 'global_id.z' : 'workgroup_id.z'} % uniforms.result_shape[1];\n        let c = ${is1DimensionDispatch ? 'global_id.y' : 'workgroup_id.y'} * ${workPerThread};\n        let d1: u32 = ${is1DimensionDispatch ? 'global_id.x' : 'workgroup_id.x'} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${dataType}>, ${workPerThread}>;\n        for (var i = 0; i < ${workPerThread}; i++) {\n          dotProd[i] = vec4<${dataType}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${dataType}(dyCorner.x) + ${dataType}(wR)) / ${dataType}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${dataType}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${dataType}(dyCorner.y) + ${dataType}(wC)) / ${dataType}(uniforms.strides.y);\n            let dyC2 = (${dataType}(dyCorner.y) + 1.0 + ${dataType}(wC)) / ${dataType}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${dataType}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${dataType}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC', 'd2')};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${dy.get('batch', 'idyR', 'idyC2', 'd2')};\n\n                dotProd[1] = dotProd[1] + vec4<${dataType}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${channelDim}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC', 'd2')};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC2', 'd2')};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${workPerThread}; i = i + 1) {\n          let value = dotProd[i] + ${hasBias ? 'bias[c+i]' : `vec4<${dataType}>(0.0)`};\n          ${output.set('batch', 'r', 'c + i', 'd1', 'value')};\n        }\n      }`;\n  const codeSnippet = `\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n          let batch = ${output.indicesGet('outputIndices', 0)};\n          let d1 = ${output.indicesGet('outputIndices', channelDim)};\n          let r = ${output.indicesGet('outputIndices', rowDim)};\n          let c = ${output.indicesGet('outputIndices', colDim)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${dataType}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${dataType}(dyRCorner) + ${dataType}(wR)) / ${dataType}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${dataType}(uniforms.Dy_shape[${rowDim}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${dataType}(dyCCorner) + ${dataType}(wC)) / ${dataType}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${dataType}(uniforms.Dy_shape[${colDim}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${\n                  isChannelsLast\n                    ? dy.get('batch', 'idyR', 'idyC', 'inputChannel')\n                    : dy.get('batch', 'inputChannel', 'idyR', 'idyC')\n                };\n                let wValue = ${w.get('inputChannel', 'wOutChannel', 'u32(wRPerm)', 'u32(wCPerm)')};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${hasBias ? 'bias[d1]' : `${dataType}(0.0)`};\n          ${output.setByOffset('global_idx', 'value')};\n        `;\n\n  return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n  ${declareFunctions}\n\n    ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')};\n  ${isVec4 ? codeSnippet4 : codeSnippet}}`;\n};\n\nexport const createConvTranspose2DProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvTransposeAttributes,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  // const isChannelsLast = attributes.format === 'NHWC';\n  const outputShape = attributes.outputShape;\n  const outputSize = ShapeUtil.size(outputShape);\n\n  // const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  // TODO Enable isVec4 for performance\n  // Disabled due to weight matrix layout issue\n  // const isVec4 = attributes.group === 1 && isChannelsLast && inChannels % 4 === 0 && outChannels % 4 === 0;\n  const dispatch = [Math.ceil(outputSize / 64), 1, 1];\n  LOG_DEBUG('verbose', () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\n\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n  const strides = [attributes.strides[0], attributes.strides[1]];\n  const filterDims = [attributes.kernelShape[isChannelsLast ? 1 : 2], attributes.kernelShape[isChannelsLast ? 2 : 3]];\n  const dilations = [attributes.dilations[0], attributes.dilations[1]];\n  const effectiveFilterDims = [\n    filterDims[0] +\n      (attributes.dilations[0] <= 1\n        ? 0\n        : (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)),\n    filterDims[1] +\n      (attributes.dilations[1] <= 1\n        ? 0\n        : (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)),\n  ];\n  const pads = [\n    effectiveFilterDims[0] - 1 - Math.floor((attributes.pads[0] + attributes.pads[2]) / 2),\n    effectiveFilterDims[1] - 1 - Math.floor(attributes.pads[1] + attributes.pads[3]) / 2,\n  ];\n\n  const isVec4 = false;\n  const group = attributes.group;\n  const wShape = inputs[1].dims;\n  const inputChannelsPerGroup = wShape[0] / group;\n  const outputChannelsPerGroup = wShape[1];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: strides },\n    { type: DataType.uint32, data: filterDims },\n    { type: DataType.uint32, data: dilations },\n    { type: DataType.uint32, data: effectiveFilterDims },\n    { type: DataType.int32, data: pads },\n    { type: DataType.uint32, data: inputChannelsPerGroup },\n    { type: DataType.uint32, data: outputChannelsPerGroup },\n    ...createTensorShapeVariables(inputs[0].dims, inputs[1].dims),\n  ];\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const is1DimensionDispatch = dispatch[1] === 1 && dispatch[2] === 1;\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'strides', type: 'u32', length: strides.length },\n      { name: 'filter_dims', type: 'u32', length: filterDims.length },\n      { name: 'dilations', type: 'u32', length: filterDims.length },\n      { name: 'effective_filter_dims', type: 'u32', length: effectiveFilterDims.length },\n      { name: 'pads', type: 'i32', length: pads.length },\n      { name: 'input_channels_per_group', type: 'u32' },\n      { name: 'output_channels_per_group', type: 'u32' },\n    ];\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    return `${createConvTranspose2DOpProgramShaderSource(\n      shaderHelper,\n      inputs,\n      outputShape,\n      hasBias,\n      is1DimensionDispatch,\n      isVec4,\n      dataType,\n      uniforms,\n      isChannelsLast,\n    )}`;\n  };\n  return {\n    name: 'ConvTranspose2D',\n    shaderCache: { hint: `${attributes.cacheKey};`, inputDependencies },\n    getRunData: () => ({\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { ComputeContext } from '../types';\n\nimport { createConv2DTransposeMatMulProgramInfo } from './3rd-party/conv_backprop_mm_webgpu';\nimport { createConvTranspose2DProgramInfo } from './3rd-party/conv_backprop_webgpu';\nimport { ConvAttributes } from './conv';\nimport { parseInternalActivationAttributes } from './fuse-utils';\nimport { createTransposeProgramInfo } from './transpose';\n\nconst computeTotalPad = (\n  inDim: number,\n  stride: number,\n  adj: number,\n  kernel: number,\n  dilation: number,\n  outSize: number,\n) => (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  dilations: readonly number[],\n  autoPad: string,\n  group: number,\n  pads: number[],\n  strides: readonly number[],\n  isChannelLast: boolean,\n  outputPadding: number[],\n  outputShape: number[],\n) => {\n  const spatialRank = inputShape.length - 2;\n  const updateOutputShape = outputShape.length === 0;\n  if (outputPadding.length < spatialRank) {\n    outputPadding.push(...Array(spatialRank - outputPadding.length).fill(0));\n  }\n  const batchSize = inputShape[0];\n  const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\n  for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\n    const inSize = inputShape[j];\n    const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\n    const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\n    distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n    if (updateOutputShape) {\n      outputShape.push(\n        strides[i] * (inSize - 1) +\n          outputPadding[i] +\n          (kernelShape[j] - 1) * dilations[i] +\n          1 -\n          pads[i] -\n          pads[i + spatialRank],\n      );\n    }\n  }\n  outputShape.splice(0, 0, batchSize);\n  outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n};\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(\n  attributes: T,\n  inputs: readonly TensorView[],\n): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 1) === 0) {\n    kernelShape.length = 0;\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const isChannelsLast = attributes.format === 'NHWC';\n  kernelShape.splice(0, 0, inputs[1].dims[0]);\n  kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const outputPadding = attributes.outputPadding.slice();\n  const inputShape = inputs[0].dims;\n  let dilations = attributes.dilations.slice();\n  if (dilations.reduce((a, b) => a + b, 0) === 0) {\n    const spatialRank = inputs[0].dims.length - 2;\n    dilations = new Array(spatialRank).fill(1);\n  }\n  let strides = attributes.strides.slice();\n  if (strides.reduce((a, b) => a + b, 0) === 0) {\n    const spatialRank = inputs[0].dims.length - 2;\n    strides = new Array(spatialRank).fill(1);\n  }\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n    inputShape,\n    kernelShape,\n    dilations,\n    attributes.autoPad,\n    attributes.group,\n    pads,\n    strides,\n    isChannelsLast,\n    outputPadding,\n    outputShape,\n  );\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, { kernelShape, pads, outputPadding, outputShape, dilations, strides });\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes = (attributes: Record<string, unknown>): ConvTransposeAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][\n    typeof attributes.autoPad == 'undefined' ? 0 : (attributes.autoPad as number)\n  ];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernelShape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.wIsConst as () => boolean)();\n  const outputPadding = attributes.outputPadding as [number, number, number, number];\n  const outputShape = attributes.outputShape as [number, number];\n  return {\n    autoPad,\n    format,\n    dilations,\n    group,\n    kernelShape,\n    outputPadding,\n    outputShape,\n    pads,\n    strides,\n    wIsConst,\n    ...activationAttributes,\n    cacheKey: `${attributes.format};${activationAttributes.activation};`,\n  };\n};\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#ConvTranspose\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\n  // wrong dilations dimension\n  if (dilationsSet && attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\n  // Wrong strides dimension\n  if (stridesSet && attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\n  if (padsSet && attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\n  if (\n    kernelShapeSet &&\n    attributes.kernelShape.length !== 0 &&\n    attributes.kernelShape.length !== inputs[1].dims.length - 2\n  ) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n};\n\n// for transposing weight tensor from [C, M/group, KH, KW] to [KH, KW, M/group, C]\nconst weightTransposePerm = [2, 3, 1, 0];\n\nconst convTranspose2d = (\n  context: ComputeContext,\n  inputs: readonly TensorView[],\n  attributes: ConvTransposeAttributes,\n): void => {\n  const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n  const isChannelsLast = attributes.format === 'NHWC';\n  const outputShape = adjustedAttributes.outputShape;\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  // Switch to naive method when outChannels and inputChannels are very small. It's because that in this case it's\n  // not suitable for matmul version since matmul uses tile size 32x32 resulting the underlying execution unit\n  // utilization rate is very low.\n  if (adjustedAttributes.group !== 1 || (outChannels === 1 && inputChannels === 1)) {\n    context.compute(createConvTranspose2DProgramInfo(inputs, adjustedAttributes));\n    return;\n  }\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight =\n    (context.kernelCustomData.wT as TensorView | undefined) ??\n    context.compute(createTransposeProgramInfo(inputs[1], weightTransposePerm), {\n      inputs: [1],\n      outputs: [attributes.wIsConst ? -2 : -1],\n    })[0];\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\n    context.kernelCustomData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convTransposeInputs = [inputs[0], transposedWeight];\n  const hasBias = inputs.length === 3;\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convTransposeInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convTransposeInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n    createConv2DTransposeMatMulProgramInfo(\n      convTransposeInputs,\n      adjustedAttributes,\n      outputShape,\n      dimAOuter,\n      dimBOuter,\n      dimInner,\n      hasBias,\n      sequentialAccessByThreads,\n    ),\n    { inputs: convTransposeInputs },\n  );\n};\n\nconst convTranspose1d = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n\n  const inputs = [\n    context.inputs[0].reshape(\n      isChannelLast\n        ? // [N, W, C] -> [N, H=1, W, C]\n          [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]]\n        : // [N, C, W] -> [N, C, H=1, W]\n          [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]],\n    ),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]]),\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  let kernelShape = attributes.kernelShape;\n  if (kernelShape.length === 0 || kernelShape[0] === 0) {\n    kernelShape = [context.inputs[1].dims[2]];\n  }\n  let dilations = attributes.dilations;\n  if (dilations.length === 0 || dilations[0] === 0) {\n    dilations = [1];\n  }\n  let strides = attributes.strides;\n  if (strides.length === 0 || strides[0] === 0) {\n    strides = [1];\n  }\n  let pads = attributes.pads;\n  if (pads.length === 0) {\n    pads = [0, 0];\n  }\n  pads = [0, pads[0], 0, pads[1]];\n  strides = [1].concat(strides);\n  dilations = [1].concat(dilations);\n  kernelShape = [1].concat(kernelShape);\n  const adjustedAttributes = getAdjustedConvTransposeAttributes(\n    { ...attributes, pads, strides, dilations, kernelShape },\n    inputs,\n  );\n  context.compute(\n    createConvTranspose2DProgramInfo(inputs, adjustedAttributes, (outputShape) =>\n      isChannelLast\n        ? [outputShape[0], outputShape[2], outputShape[3]]\n        : [outputShape[0], outputShape[1], outputShape[3]],\n    ),\n  );\n};\n\nexport const convTranspose = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 3) {\n    convTranspose1d(context, attributes);\n  } else {\n    convTranspose2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, getElementAt, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface CumSumAttributes extends AttributeWithCacheKey {\n  readonly exclusive: boolean;\n  readonly reverse: boolean;\n}\nconst createCumsumProgramInfo = (\n  inputType: number,\n  inputShape: readonly number[],\n  axisInput: TensorView,\n  attributes: CumSumAttributes,\n): ProgramInfo => {\n  const outputSize = ShapeUtil.size(inputShape); // outputShape is same as inputShape.\n  const rank = inputShape.length; // input/output rank\n  const input = inputVariable('input', inputType, rank);\n  const output = outputVariable('output', inputType, rank);\n  const axisValue =\n    axisInput.dataType === DataType.int32 ? axisInput.getInt32Array()[0] : Number(axisInput.getBigInt64Array()[0]);\n  const axis = ShapeUtil.normalizeAxis(axisValue, rank);\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const index = ` i32(${input.indicesGet('inputIndices', 'uniforms.axis')}) `;\n    const max = getElementAt('uniforms.input_shape', 'uniforms.axis', rank);\n    const lowerLimit = attributes.reverse ? index + (attributes.exclusive ? ' + 1' : '') : '0';\n    const upperLimit = attributes.reverse ? max : index + (attributes.exclusive ? '' : ' + 1');\n    return `\n                ${shaderHelper\n                  .registerUniform('outputSize', 'u32')\n                  .registerUniform('axis', 'u32')\n                  .declareVariables(input, output)}\n                ${shaderHelper.mainStart()}\n                  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n                  var inputIndices = ${output.offsetToIndices('global_idx')};\n                  var sum = ${output.type.value}(0);\n                  let first : i32 = ${lowerLimit};\n                  let last : i32 = ${upperLimit};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${input.indicesSet('inputIndices', 'uniforms.axis', 'u32(i)')};\n                    sum = sum + ${input.getByIndices('inputIndices')};\n                  }\n                  ${output.setByOffset('global_idx', 'sum')};\n                }`;\n  };\n  return {\n    name: 'CumSum',\n    shaderCache: { hint: attributes.cacheKey, inputDependencies: ['rank'] },\n    getRunData: () => ({\n      outputs: [{ dims: inputShape, dataType: inputType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: outputSize },\n        { type: DataType.uint32, data: axis },\n        ...createTensorShapeVariables(inputShape, inputShape),\n      ],\n    }),\n    getShaderSource,\n  };\n};\n\nexport const cumsum = (context: ComputeContext, attributes: CumSumAttributes): void => {\n  const inputShape = context.inputs[0].dims;\n  const inputType = context.inputs[0].dataType;\n  const axis = context.inputs[1];\n  context.compute(createCumsumProgramInfo(inputType, inputShape, axis, attributes), { inputs: [0] });\n};\n\nexport const parseCumSumAttributes = (attributes: Record<string, unknown>): CumSumAttributes => {\n  const exclusive = (attributes.exclusive as number) === 1;\n  const reverse = (attributes.reverse as number) === 1;\n  return createAttributeWithCacheKey({ exclusive, reverse });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC' | 'NCHW';\n}\n\nexport interface DepthToSpaceAttributes extends FormatAttributes, AttributeWithCacheKey {\n  readonly blocksize: number;\n  readonly mode: string;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('DepthToSpace requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('DepthToSpace requires 4D input.');\n  }\n};\n\nconst permFunctionBody = (perm: number[], rank: number, input: IndicesHelper, output: IndicesHelper): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\n    var a: ${input.type.indices};`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(input.indicesSet('a', perm[i], `i[${i}]`));\n  }\n  reverseFunc.push('return a;}');\n  return reverseFunc.join('\\n');\n};\n\nconst createDepthToSpaceProgramInfo = (inputTensor: TensorView, attributes: DepthToSpaceAttributes): ProgramInfo => {\n  let n: number, h: number, w: number, c: number;\n  let shape: number[];\n  let perm: number[];\n  const isChannelLast = attributes.format === 'NHWC';\n  const blocksize = attributes.blocksize;\n  const isDCRmode = attributes.mode === 'DCR';\n  if (isChannelLast) {\n    [n, h, w, c] = inputTensor.dims;\n    shape = isDCRmode\n      ? [n, h, w, blocksize, blocksize, c / blocksize ** 2]\n      : [n, h, w, c / blocksize ** 2, blocksize, blocksize];\n    perm = isDCRmode ? [0, 1, 3, 2, 4, 5] : [0, 1, 4, 2, 5, 3];\n  } else {\n    [n, h, w, c] = [inputTensor.dims[0], inputTensor.dims[2], inputTensor.dims[3], inputTensor.dims[1]];\n    shape = isDCRmode\n      ? [n, blocksize, blocksize, c / blocksize ** 2, h, w]\n      : [n, c / blocksize ** 2, blocksize, blocksize, h, w];\n    perm = isDCRmode ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n  }\n  const reshapedInputTensor = inputTensor.reshape(shape);\n  const reshapedInputRank = reshapedInputTensor.dims.length;\n  const inputDataType = inputTensor.dataType;\n\n  const reshapedInput = inputVariable('a', inputDataType, reshapedInputRank);\n  const permedOutput = outputVariable('output', inputDataType, reshapedInputRank);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(reshapedInput, permedOutput)}\n\n  ${permFunctionBody(perm, reshapedInputRank, reshapedInput, permedOutput)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n    let indices = ${permedOutput.offsetToIndices('global_idx')};\n    let aIndices = perm(indices);\n\n    ${permedOutput.setByOffset('global_idx', reshapedInput.getByIndices('aIndices'))}\n  }`;\n\n  return {\n    name: 'DepthToSpace',\n    shaderCache: {\n      hint: `${inputTensor.dims};${attributes.blocksize};${attributes.mode}`,\n      inputDependencies: ['rank'],\n    },\n    getRunData: (inputs) => {\n      const outputShape = isChannelLast\n        ? [n, h * blocksize, w * blocksize, c / blocksize ** 2]\n        : [n, c / blocksize ** 2, h * blocksize, w * blocksize];\n      const outputSize = ShapeUtil.size(outputShape);\n      const shapeBeforePerm = reshapedInputTensor.dims;\n      const shapeAfterPerm = ShapeUtil.sortBasedOnPerm(shapeBeforePerm, perm);\n      return {\n        outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms: [\n          { type: DataType.uint32, data: outputSize },\n          ...createTensorShapeVariables(shapeBeforePerm, shapeAfterPerm),\n        ],\n      };\n    },\n    getShaderSource,\n  };\n};\n\nexport const depthToSpace = (context: ComputeContext, attributes: DepthToSpaceAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createDepthToSpaceProgramInfo(context.inputs[0], attributes));\n};\n\nexport const parseDepthToSpaceAttributes = (attributes: Record<string, unknown>): DepthToSpaceAttributes =>\n  createAttributeWithCacheKey({\n    blocksize: attributes.blocksize as number,\n    mode: attributes.mode as string,\n    format: attributes.format as 'NHWC' | 'NCHW',\n  });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface EinsumAttributes extends AttributeWithCacheKey {\n  readonly equation: string;\n}\n// The equation attribute value is a string which consists of left hand side (LHS) and optionally right hand side (RHS)\n// separated by '->'. Ex. \"ij,jk -> ik\" expresses matrix multiplication\n//     \"ij->ji\" expresses matrix transpose\n//      \"ii->i\" diagonal elements of a square matrix\n// LHS consists of a sequence of terms separated by commas. Each term corresponds to an input variable.\n// Each symbol corresponds to a dimension in the input variable. The symbol can be either a letter, 'a' to 'z' or 'A' to\n// 'Z' or '...' to represent arbitrary dimensions.\n\nconst symbolPattern = '[a-zA-Z]|\\\\.\\\\.\\\\.'; // The pattern each symbol in each term in the symbolic equation should match\nconst termPattern = '(' + symbolPattern + ')+'; // The pattern each term in the symbolic equation should match\nconst termPatternOnly = '^' + termPattern + '$'; // The patterns only matchs a term begin to end.\nconst lhsPattern = '(' + termPattern + ',)*' + termPattern; // The pattern the LHS should match\nconst lhsPatternOnly = '^' + lhsPattern + '$'; // The patterns only matchs a LHS begin to end.\n\ninterface SymbolInfo {\n  count: number; // Symbol corresponding to a dimmension of an input\n  inputIndices: number[]; // Number of input variables the symbol corresponds to\n  dimValue: number; // Number of dimensions the symbol corresponds to\n}\n\nclass EinsumTerm {\n  constructor(inputIndex = -1) {\n    this.symbolToIndices = new Map<string, number[]>();\n    this.inputIndex = inputIndex;\n  }\n\n  // Add a symbol to the term\n  addSymbol(symbol: string, index: number) {\n    let value = this.symbolToIndices.get(symbol);\n    if (value === undefined) {\n      value = [index];\n    } else {\n      value.push(index);\n    }\n    this.symbolToIndices.set(symbol, value);\n  }\n\n  symbolToIndices: Map<string, number[]>; // Map from symbol to dimensions of the input corresponding to the term\n  inputIndex: number; // -1 for output and 0, 1, 2, ... for inputs\n}\n\nclass EinsumEquation {\n  constructor(\n    inputs: readonly TensorView[],\n    public readonly equation: string,\n  ) {\n    this.hasEllipsis = false;\n    this.symbolToInfo = new Map<string, SymbolInfo>();\n    this.lhs = new Array<EinsumTerm>();\n    this.outputDims = [];\n    // As rhs needs to be updated allow using let instead of const for both lhs and rhs.\n    // eslint-disable-next-line prefer-const\n    let [lhs, rhs] = equation.includes('->') ? equation.split('->', 2) : [equation, ''];\n    if (!lhs.match(RegExp(lhsPatternOnly))) {\n      throw new Error('Invalid LHS term');\n    }\n    const inputTerms = lhs.split(',');\n    inputTerms.forEach((inputTerm, index) => {\n      const dims = inputs[index].dims.slice();\n      if (!inputTerm.match(RegExp(termPatternOnly))) {\n        throw new Error('Invalid LHS term');\n      }\n      const einsumTerm = this.processTerm(inputTerm, true, dims, index);\n      this.lhs.push(einsumTerm);\n    });\n\n    // Initialize the RHS if not specified\n    if (rhs === '') {\n      // Construct RHS from LHS terms/symbols\n      rhs += [...this.symbolToInfo.entries()]\n        .filter(([sym, info]) => info.count === 1 || sym === '...')\n        .map(([sym]) => sym)\n        .join('');\n    } else {\n      if (!rhs.match(RegExp(termPattern))) {\n        throw new Error('Invalid RHS');\n      }\n    }\n\n    // Compute output dims\n    const rhsSymbols = rhs.match(RegExp(symbolPattern, 'g'));\n    rhsSymbols?.forEach((symbol) => {\n      if (symbol === '...') {\n        this.outputDims = this.outputDims.concat(this.ellipsisDims);\n      } else {\n        const info = this.symbolToInfo.get(symbol);\n        if (info === undefined) {\n          throw new Error('Invalid RHS symbol');\n        }\n        this.outputDims.push(info.dimValue);\n      }\n    });\n    this.rhs = this.processTerm(rhs, false, this.outputDims);\n  } // End of EinsumEqation constructor\n\n  // Add a symbol to the equation\n  addSymbol(symbol: string, dimValue: number, inputIndex: number) {\n    let info = this.symbolToInfo.get(symbol);\n    if (info !== undefined) {\n      if (info.dimValue !== dimValue && info.count !== 1) {\n        throw new Error('Dimension mismatch');\n      } else {\n        info.count++;\n        info.inputIndices.push(inputIndex);\n      }\n    } else {\n      info = { count: 1, dimValue, inputIndices: [inputIndex] };\n    }\n    this.symbolToInfo.set(symbol, info);\n  }\n\n  // Process one input/output term\n  processTerm(term: string, isInput: boolean, dims: readonly number[], index = -1): EinsumTerm {\n    const rank = dims.length;\n    let ellipsis = false;\n    let ellipsisDims = [];\n    let nextDim = 0;\n    // For output empty string is allowed because the output may be reduced to a scalar value\n    if (!term.match(RegExp(termPatternOnly)) && !isInput && term !== '') {\n      throw new Error('Invalid LHS term');\n    }\n    const indexSymbols = term.match(RegExp(symbolPattern, 'g'));\n    const einsumTerm = new EinsumTerm(index);\n    // symbol can be either a lettre, 'a' to 'z' or 'A' to 'Z', or '...'\n    indexSymbols?.forEach((symbol: string, i: number) => {\n      if (symbol === '...') {\n        if (ellipsis) {\n          throw new Error('Only one ellipsis is allowed per input term');\n        }\n        ellipsis = true;\n        const ellipsisDimLength = rank - indexSymbols.length + 1;\n        if (ellipsisDimLength < 0) {\n          throw new Error('Ellipsis out of bounds');\n        }\n        ellipsisDims = dims.slice(nextDim, nextDim + ellipsisDimLength);\n        if (this.hasEllipsis) {\n          if (\n            this.ellipsisDims.length !== ellipsisDims.length ||\n            this.ellipsisDims.toString() !== ellipsisDims.toString()\n          ) {\n            throw new Error('Ellipsis dimensions mismatch');\n          }\n        } else if (isInput) {\n          this.hasEllipsis = true;\n          this.ellipsisDims = ellipsisDims;\n        } else {\n          throw new Error('Ellipsis must be specified in the LHS');\n        }\n        // Add '0', '1', '2', '3', '4', etc to represent ellipsis dimensions to avoid special handling\n        for (let j = 0; j < ellipsisDims.length; j++) {\n          const symbol = String.fromCharCode('0'.charCodeAt(0) + j);\n          einsumTerm.addSymbol(symbol, i + j);\n          this.addSymbol(symbol, dims[nextDim++], index);\n        }\n      } else {\n        einsumTerm.addSymbol(symbol, i + (this.hasEllipsis ? this.ellipsisDims.length - 1 : 0));\n        this.addSymbol(symbol, dims[nextDim++], index);\n      }\n    });\n    return einsumTerm;\n  }\n\n  symbolToInfo: Map<string, SymbolInfo>; // All symbols in the equation\n  hasEllipsis: boolean; // The equation has ellipsis or not\n  ellipsisDims: number[]; // The dimensions of the equation ellipsis corresponds to.\n  lhs: EinsumTerm[]; // Terms on the left-hand side of the equation\n  rhs: EinsumTerm; // Term on the right-hand side of the equation\n  outputDims: number[]; // Output dimensions of the equation\n} // End of class EinsumEquation\n\nconst appendMax = (name: string): string => name + '_max';\n\nconst createEinsumProgramInfo = (\n  inputShapes: Array<readonly number[]>,\n  dataType: number,\n  einsumEquation: EinsumEquation,\n  outputShape: readonly number[],\n): ProgramInfo => {\n  const ranks = inputShapes.map((dims) => dims.length);\n  const inputVars = ranks.map((rank, index) => inputVariable(`input${index}`, dataType, rank));\n  const outputSize = ShapeUtil.size(outputShape);\n  const output = outputVariable('output', dataType, outputShape.length);\n  const uniformsSymbols = [...einsumEquation.symbolToInfo.keys()].filter(\n    (symbol) => !einsumEquation.rhs.symbolToIndices.has(symbol),\n  );\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const idxCopy: string[] = [];\n    const initProd = 'var prod = 1.0;';\n    const initSum = 'var sum = 0.0;';\n    const updateSum = 'sum += prod;';\n    const reduceOpsSetIndices: string[] = [];\n    const reduceOpsLoopHeaders: string[] = [];\n    const reduceOpsLoopFooters: string[] = [];\n    const reduceOpCompute: string[] = [];\n    const isReduceOpsWithoutLoop = einsumEquation.symbolToInfo.size === einsumEquation.rhs.symbolToIndices.size;\n    einsumEquation.symbolToInfo.forEach((info, symbol) => {\n      if (einsumEquation.rhs.symbolToIndices.has(symbol)) {\n        const outputIndex = einsumEquation.rhs.symbolToIndices.get(symbol)?.[0];\n        if (outputIndex !== undefined) {\n          einsumEquation.lhs.forEach((term, i) => {\n            if (info.inputIndices.includes(i)) {\n              const indices = term.symbolToIndices.get(symbol);\n              if (indices === undefined) {\n                throw new Error('Invalid symbol error');\n              }\n              indices.forEach((index) => {\n                idxCopy.push(\n                  `${inputVars[i].indicesSet(\n                    `input${i}Indices`,\n                    index,\n                    output.indicesGet('outputIndices', outputIndex),\n                  )}`,\n                );\n              });\n            }\n          });\n        }\n      } else {\n        einsumEquation.lhs.forEach((term, i) => {\n          if (info.inputIndices.includes(i)) {\n            const indices = term.symbolToIndices.get(symbol);\n            if (indices === undefined) {\n              throw new Error('Invalid symbol error');\n            }\n            indices.forEach((index) => {\n              reduceOpsSetIndices.push(`${inputVars[i].indicesSet(`input${i}Indices`, index, `${symbol}`)}`);\n            });\n            reduceOpCompute.push(`prod *= ${inputVars[i].getByIndices(`input${i}Indices`)};`);\n          }\n        });\n        reduceOpsLoopHeaders.push(\n          `for(var ${symbol}: u32 = 0; ${symbol} < uniforms.${appendMax(symbol)}; ${symbol}++) {`,\n        );\n        reduceOpsLoopFooters.push('}');\n      }\n    });\n    const reduceOps = isReduceOpsWithoutLoop\n      ? [\n          ...idxCopy,\n          `let sum = ${inputVars.map((inputVar, i) => inputVar.getByIndices(`input${i}Indices`)).join(' * ')};`,\n        ]\n      : [\n          ...idxCopy,\n          initSum,\n          ...reduceOpsLoopHeaders,\n          ...reduceOpsSetIndices,\n          initProd,\n          ...reduceOpCompute,\n          updateSum,\n          ...reduceOpsLoopFooters,\n        ];\n    return `\n            ${shaderHelper\n              .registerUniforms(uniformsSymbols.map((symbol) => ({ name: `${appendMax(symbol)}`, type: 'u32' })))\n              .registerUniform('outputSize', 'u32')\n              .declareVariables(...inputVars, output)}\n\n            ${shaderHelper.mainStart()}\n            ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n            var outputIndices = ${output.offsetToIndices('global_idx')};\n            ${inputVars.map((_var, i) => `var input${i}Indices: ${inputVars[i].type.indices};`).join('\\n')}\n            ${reduceOps.join('\\n')};\n            ${output.setByOffset('global_idx', 'sum')};\n          }`;\n  };\n  return {\n    name: 'Einsum',\n    shaderCache: { hint: einsumEquation.equation, inputDependencies: inputShapes.map(() => 'rank') },\n    getRunData: () => {\n      // The symbols from uniformSymbols array are guaranteed to exist in einsumEquations.symbolToInfo map. The\n      // filter is added to make sure that dimValue is never 0.\n      const programUniformsInit: ProgramUniform[] = uniformsSymbols\n        .filter((symbol) => einsumEquation.symbolToInfo.has(symbol))\n        .map((symbol) => ({ type: DataType.uint32, data: einsumEquation.symbolToInfo.get(symbol)?.dimValue || 0 }));\n      programUniformsInit.push({ type: DataType.uint32, data: outputSize });\n      const programUniforms: ProgramUniform[] = inputShapes\n        .map((dims, _) => [...createTensorShapeVariables(dims)])\n        .reduce((acc, inputProgramUniforms) => acc.concat(inputProgramUniforms), programUniformsInit);\n      programUniforms.push(...createTensorShapeVariables(outputShape));\n      return {\n        outputs: [{ dims: outputShape, dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms,\n      };\n    },\n    getShaderSource,\n  };\n};\n\nexport const einsum = (context: ComputeContext, attributes: EinsumAttributes): void => {\n  const einsumEquation = new EinsumEquation(context.inputs, attributes.equation);\n  const outputShape = einsumEquation.outputDims;\n  const inputShapes = context.inputs.map((input, _) => input.dims);\n  context.compute(createEinsumProgramInfo(inputShapes, context.inputs[0].dataType, einsumEquation, outputShape));\n};\n\nexport const parseEinsumAttributes = (attributes: Record<string, unknown>): EinsumAttributes => {\n  const equation = (attributes.equation as string).replace(/\\s+/g, '');\n  return createAttributeWithCacheKey({ equation });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Expand requires 2 input.');\n  }\n  const inputShape = inputs[0].dims;\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n\n  let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\n  let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\n  for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\n    if (\n      shape[shapeIndex] !== inputShape[inputShapeIndex] &&\n      shape[shapeIndex] !== 1 &&\n      inputShape[inputShapeIndex] !== 1\n    ) {\n      throw new Error('Expand requires shape to be broadcastable to input');\n    }\n  }\n};\n\nconst getAdjustedShape = (shape1: readonly number[], shape2: readonly number[]): number[] => {\n  const diff = shape1.length - shape2.length;\n  const shape: number[] = [];\n  for (let i = 0; i < diff; ++i) {\n    shape.push(shape1[i]);\n  }\n  for (let i = 0; i < shape2.length; ++i) {\n    shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\n  }\n  return shape;\n};\n\nconst calculateOutputShape = (inputShape: readonly number[], shape: readonly number[]): number[] =>\n  inputShape.length > shape.length ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\n\nconst createExpandProgramInfo = (inputs: readonly TensorView[]): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n  const outputShape: number[] = calculateOutputShape(inputShape, shape);\n  const dataType = inputs[0].dataType;\n  const components = dataType === DataType.bool ? 4 : 1;\n  const outputSize = Math.ceil(ShapeUtil.size(outputShape) / components);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const input = inputVariable('input', dataType, inputShape.length, components);\n    const output = outputVariable('output', dataType, outputShape.length, components);\n    let assignment: string;\n    if (dataType === DataType.bool) {\n      const singleAssignment = (resStr: string, x: number, typeCast = '') => `\n          let outputIndices${x} = ${output.offsetToIndices(`outputOffset + ${x}u`)};\n          let offset${x} = ${input.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n          let index${x} = offset${x} / 4u;\n          let component${x} = offset${x} % 4u;\n          ${resStr}[${x}] = ${typeCast}(${input.getByOffset(`index${x}`)}[component${x}]);\n        `;\n      assignment = `\n        let outputOffset = global_idx * ${components};\n        var data = vec4<u32>(0);\n        ${singleAssignment('data', 0, 'u32')}\n        ${singleAssignment('data', 1, 'u32')}\n        ${singleAssignment('data', 2, 'u32')}\n        ${singleAssignment('data', 3, 'u32')}\n        ${output.setByOffset('global_idx', 'data')}\n      }`;\n    } else {\n      assignment = `\n        let outputIndices = ${output.offsetToIndices('global_idx')};\n        let inputOffset = ${input.broadcastedIndicesToOffset('outputIndices', output)};\n        ${output.setByOffset('global_idx', input.getByOffset('inputOffset'))}\n      }`;\n    }\n    return `\n    ${shaderHelper.registerUniform('vec_size', 'u32').declareVariables(input, output)}\n    ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.vec_size')}\n    ${assignment}`;\n  };\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    ...createTensorShapeVariables(inputShape, outputShape),\n  ];\n  return {\n    name: 'Expand',\n    shaderCache: { hint: `${outputShape.length}`, inputDependencies: ['rank'] },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const expand = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(createExpandProgramInfo(context.inputs), { inputs: [0] });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport {\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglValueType,\n  UniformsArrayType,\n  WORKGROUP_SIZE,\n} from './common';\nimport * as unary from './unary-op';\n\n// GELU is defined as Y=0.5*X*(1+tanh(0.797885*X+0.035677*X*X*X)), where X may pre-add a bias.\n\nconst createFastGeluProgramInfo = (inputTensors: readonly TensorView[]): ProgramInfo => {\n  const dataType = inputTensors[0].dataType;\n  const outputSize = ShapeUtil.size(inputTensors[0].dims);\n  const biasLength = ShapeUtil.size(inputTensors[1].dims);\n  // can only use vec4 when bias length is multiple of 4\n  const useVec4 = biasLength % 4 === 0;\n  const getShaderSource = (shaderHelper: ShaderHelper): string => {\n    const x = inputVariable('x', dataType, [1], 4);\n    const bias = inputVariable('bias', dataType, [1], 4);\n    const y = outputVariable('y', dataType, [1], 4);\n\n    const uniforms: UniformsArrayType = [\n      { name: 'output_vec_size', type: 'u32' },\n      { name: 'bias_size', type: 'u32' },\n    ];\n\n    const singleElementBias = (i: 0 | 1 | 2 | 3) => `\n      let bias${i}_offset: u32 = (global_idx * 4 + ${i}) % uniforms.bias_size;\n      let bias${i} = ${bias.getByOffset(`bias${i}_offset / 4`)}[bias${i}_offset % 4];`;\n    const biasGetExpression = useVec4\n      ? `\n      let bias = ${bias.getByOffset('global_idx % (uniforms.bias_size / 4)')};`\n      : `${singleElementBias(0)}${singleElementBias(1)}${singleElementBias(2)}${singleElementBias(3)}\n      let bias = ${x.type.value}(bias0, bias1, bias2, bias3);`;\n\n    return `${shaderHelper.registerUniforms(uniforms).declareVariables(x, bias, y)}\n\n    ${unary.fastGeluImpl(tensorTypeToWsglValueType(dataType))}\n\n    ${shaderHelper.mainStart(WORKGROUP_SIZE)}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_vec_size')}\n\n      let x = ${x.getByOffset('global_idx')};\n      ${biasGetExpression}\n      let x_in = x + bias;\n      ${y.setByOffset('global_idx', unary.fastGeluExpression('x_in'))}\n    }`;\n  };\n\n  return {\n    name: 'FastGeluWithBias',\n    shaderCache: { hint: `${useVec4}`, inputDependencies: ['type', 'type'] },\n    getShaderSource,\n    getRunData: (inputs) => ({\n      outputs: [{ dims: inputs[0].dims, dataType: inputs[0].dataType }],\n      programUniforms: [\n        { type: DataType.uint32, data: Math.ceil(outputSize / 4) },\n        { type: DataType.uint32, data: biasLength },\n      ],\n      dispatchGroup: { x: Math.ceil(outputSize / WORKGROUP_SIZE / 4) },\n    }),\n  };\n};\n\nexport const fastGelu = (context: ComputeContext): void => {\n  if (context.inputs.length < 2 || ShapeUtil.size(context.inputs[1].dims) === 0) {\n    unary.fastGelu(context);\n  } else {\n    context.compute(createFastGeluProgramInfo(context.inputs));\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface GatherAttributes extends AttributeWithCacheKey {\n  axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n};\n\nconst createGatherProgramInfo = (inputs: readonly TensorView[], attributes: GatherAttributes): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const indicesShape = inputs[1].dims;\n\n  const inputRank = inputShape.length;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n\n  const outputShape = inputShape.slice(0);\n  outputShape.splice(axis, 1, ...indicesShape);\n\n  const axisDimLimit = inputShape[axis];\n  const components = inputs[0].dataType === DataType.bool ? 4 : 1;\n  const outputSize = Math.ceil(ShapeUtil.size(outputShape) / components);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.int32, data: axisDimLimit },\n    { type: DataType.uint32, data: axis },\n    ...createTensorShapeVariables(inputs[0].dims, inputs[1].dims, outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const data = inputVariable('data', inputs[0].dataType, inputs[0].dims.length, components);\n    const indices = inputVariable('inputIndices', inputs[1].dataType, inputs[1].dims.length);\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length, components);\n\n    const calcDataIndices = (x: number | string): string => {\n      const indicesRank = indicesShape.length;\n      let calcStr = `var indicesIndices${x}  = ${indices.type.indices}(0);`;\n      for (let i = 0; i < indicesRank; i++) {\n        calcStr += `${indicesRank > 1 ? `indicesIndices${x}[${i}]` : `indicesIndices${x}`} = ${\n          outputShape.length > 1 ? `outputIndices${x}[uniforms.axis + ${i}]` : `outputIndices${x}`\n        };`;\n      }\n      calcStr += `\n          var idx${x} = ${indices.getByIndices(`indicesIndices${x}`)};\n          if (idx${x} < 0) {\n            idx${x} = idx${x} + uniforms.axisDimLimit;\n          }\n          var dataIndices${x} : ${data.type.indices};\n        `;\n      for (let i = 0, j = 0; i < inputRank; i++) {\n        if (i === axis) {\n          calcStr += `${inputRank > 1 ? `dataIndices${x}[${i}]` : `dataIndices${x}`} = u32(idx${x});`;\n          j += indicesRank;\n        } else {\n          calcStr += `${inputRank > 1 ? `dataIndices${x}[${i}]` : `dataIndices${x}`} = ${\n            outputShape.length > 1 ? `outputIndices${x}[${j}]` : `outputIndices${x}`\n          };`;\n          j++;\n        }\n      }\n      return calcStr;\n    };\n    let assignment: string;\n    if (inputs[0].dataType === DataType.bool) {\n      const singleAssignment = (resStr: string, x: number, typeCast = '') => `\n          let outputIndices${x} = ${output.offsetToIndices(`outputOffset + ${x}u`)};\n          ${calcDataIndices(x)};\n          let offset${x} = ${data.indicesToOffset(`dataIndices${x}`)};\n          let index${x} = offset${x} / 4u;\n          let component${x} = offset${x} % 4u;\n          ${resStr}[${x}] = ${typeCast}(${data.getByOffset(`index${x}`)}[component${x}]);\n        `;\n      assignment = `\n        let outputOffset = global_idx * ${components};\n        var value = vec4<u32>(0);\n        ${singleAssignment('value', 0, 'u32')}\n        ${singleAssignment('value', 1, 'u32')}\n        ${singleAssignment('value', 2, 'u32')}\n        ${singleAssignment('value', 3, 'u32')}\n        ${output.setByOffset('global_idx', 'value')}\n      `;\n    } else {\n      assignment = `\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n      ${calcDataIndices('')};\n      let value = ${data.getByIndices('dataIndices')};\n      ${output.setByOffset('global_idx', 'value')};\n      `;\n    }\n    return `\n      ${shaderHelper\n        .registerUniform('outputSize', 'u32')\n        .registerUniform('axisDimLimit', 'i32')\n        .registerUniform('axis', 'u32')\n        .declareVariables(data, indices, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n        ${assignment}\n      }`;\n  };\n  return {\n    name: 'Gather',\n    shaderCache: { hint: attributes.cacheKey, inputDependencies: ['rank', 'rank'] },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const parseGatherAttributes = (attributes: Record<string, unknown>): GatherAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number });\n\nexport const gather = (context: ComputeContext, attributes: GatherAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs);\n  context.compute(createGatherProgramInfo(context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglValueType,\n  UniformsArrayType,\n} from './common';\n\nexport interface GatherBlockQuantizedAttributes extends AttributeWithCacheKey {\n  gatherAxis: number;\n  quantizeAxis: number;\n  blockSize: number;\n}\n\nexport const validateInputs = (inputs: readonly TensorView[], attributes: GatherBlockQuantizedAttributes): void => {\n  if (inputs.length < 3 || inputs.length > 4) {\n    throw new Error('GatherBlockQuantized requires 3 or 4 inputs.');\n  }\n  const quantizeAxis = ShapeUtil.normalizeAxis(attributes.quantizeAxis, inputs[0].dims.length);\n  const blockSize = attributes.blockSize;\n  const data = inputs[0];\n  const scales = inputs[2];\n  const zeroPoint = inputs.length === 4 ? inputs[3] : undefined;\n  if (\n    scales.dims.length !== data.dims.length ||\n    !data.dims\n      .map((d, i) => (i === quantizeAxis ? Math.ceil(d / blockSize) === scales.dims[i] : d === scales.dims[i]))\n      .reduce((a, b) => a && b, true)\n  ) {\n    throw new Error(\n      'Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.',\n    );\n  }\n  // TODO Uncomment the following check once the test case creation code is fixed to create data correctly aligned.\n  // const indices = inputs[1];\n  // const validIndex = (index: number) => index >= 0 && index < data.dims[attributes.gatherAxis];\n  // if (indices.dataType === DataType.int32 && indices.getInt32Array().some((v) => !validIndex(v)) ||\n  //     indices.dataType === DataType.int64 && indices.getBigInt64Array().some((v) => !validIndex(Number(v)))) {\n  //   throw new Error('Indices must be within the bounds of the gatherAxis.');\n  // }\n  if (zeroPoint) {\n    if (zeroPoint.dataType !== data.dataType) {\n      throw new Error('Zero point must have the same data type as the input tensor.');\n    }\n    if (\n      zeroPoint.dims.length !== scales.dims.length ||\n      !zeroPoint.dims.map((d, i) => d === scales.dims[i]).reduce((a, b) => a && b, true)\n    ) {\n      throw new Error(\n        'Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.',\n      );\n    }\n  }\n};\n\nconst createGatherBlockQuantizedProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: GatherBlockQuantizedAttributes,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const indicesShape = inputs[1].dims;\n  const inputRank = inputShape.length;\n  const gatherAxis = ShapeUtil.normalizeAxis(attributes.gatherAxis, inputRank);\n  const quantizeAxis = ShapeUtil.normalizeAxis(attributes.quantizeAxis, inputRank);\n  const outputShape = inputShape.slice(0);\n  outputShape.splice(gatherAxis, 1, ...indicesShape);\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputType = inputs[2].dataType;\n  const inputType = inputs[0].dataType;\n  const isSigned = inputType === DataType.int4; // input data type is either int4 or uint4.\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: quantizeAxis },\n    { type: DataType.uint32, data: gatherAxis },\n    { type: DataType.uint32, data: attributes.blockSize },\n    ...createTensorShapeVariables(...inputs.map((input, _) => input.dims), outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const data = inputVariable('data', inputs[0].dataType, inputs[0].dims.length);\n    const indices = inputVariable('inputIndices', inputs[1].dataType, inputs[1].dims.length);\n    const scales = inputVariable('scales', inputs[2].dataType, inputs[2].dims.length);\n    const zeroPoint =\n      inputs.length > 3 ? inputVariable('zeroPoint', inputs[3].dataType, inputs[3].dims.length) : undefined;\n    const output = outputVariable('output', outputType, outputShape.length);\n    const inputVariables = [data, indices, scales];\n    if (zeroPoint) {\n      inputVariables.push(zeroPoint);\n    }\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'quantize_axis', type: 'u32' },\n      { name: 'gather_axis', type: 'u32' },\n      { name: 'block_size', type: 'u32' },\n    ];\n    return `\n        ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n        ${shaderHelper.mainStart()}\n        let output_indices = ${output.offsetToIndices('global_idx')};\n        var indices_indices = ${indices.type.indices}(0);\n        ${(() => {\n          if (indicesShape.length > 1) {\n            return `\n          for (var i: u32 = 0; i < ${indicesShape.length}; i++) {\n            let index = ${output.indicesGet('output_indices', 'uniforms.gather_axis + i')};\n            ${indices.indicesSet('indices_indices', 'i', 'index')};\n          }`;\n          } else {\n            return `indices_indices = ${output.indicesGet('output_indices', 'uniforms.gather_axis')};`;\n          }\n        })()};\n        var data_indices = ${data.type.indices}(0);\n        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {\n          let index = ${output.indicesGet('output_indices', 'i')};\n          ${data.indicesSet('data_indices', 'i', 'index')};\n        }\n        var index_from_indices = ${indices.getByIndices('indices_indices')};\n        if (index_from_indices < 0) {\n          index_from_indices += ${inputShape[gatherAxis]};\n        }\n        ${data.indicesSet('data_indices', 'uniforms.gather_axis', 'u32(index_from_indices)')};\n        for (var i = uniforms.gather_axis + 1; i < ${outputShape.length}; i++) {\n          let index = ${output.indicesGet('output_indices', `i + ${indicesShape.length} - 1`)};\n          ${data.indicesSet('data_indices', 'i', 'index')};\n        }\n        let data_offset = ${data.indicesToOffset('data_indices')};\n        let data_index = data_offset % 8;\n        // Convert 4-bit packed data to 8-bit packed data.\n        let packed_4bit_quantized_data = ${data.getByOffset('data_offset / 8')};\n        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;\n        let quantized_data_vec = ${isSigned ? 'unpack4xI8' : 'unpack4xU8'}(u32(packed_8bit_quantized_data));\n        let quantized_data = quantized_data_vec[data_index / 2];\n        var scale_indices = data_indices;\n        let quantize_axis_index = ${scales.indicesGet('data_indices', 'uniforms.quantize_axis')} / uniforms.block_size;\n        ${scales.indicesSet('scale_indices', 'uniforms.quantize_axis', 'quantize_axis_index')};\n        var scale = ${scales.getByIndices('scale_indices')};\n        ${(() => {\n          if (!zeroPoint) {\n            return 'var zero_point = 0';\n          } else {\n            return `\n              let zero_point_indices = scale_indices;\n              let zero_point_offset = ${zeroPoint.indicesToOffset('zero_point_indices')};\n              let zero_point_index = zero_point_offset % 8;\n              let packed_4bit_zero_points = ${zeroPoint.getByOffset('zero_point_offset / 8')};\n              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;\n              let zero_point_vec = ${isSigned ? 'unpack4xI8' : 'unpack4xU8'}(u32(packed_8bit_zero_points));\n              let zero_point = zero_point_vec[zero_point_index / 2];`;\n          }\n        })()};\n        let dequantized_data = ${tensorTypeToWsglValueType(outputType)}(quantized_data - zero_point) * scale;\n        ${output.setByOffset('global_idx', 'dequantized_data')};\n    }`;\n  };\n  return {\n    name: 'GatherBlockQuantized',\n    shaderCache: {\n      hint: `${attributes.cacheKey};${inputs\n        .filter((_, i) => i !== 1)\n        .map((input) => input.dims.join('_'))\n        .join(';')}`,\n      inputDependencies: Array.from({ length: inputs.length }, (_v, _i) => 'rank'),\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const gatherBlockQuantized = (context: ComputeContext, attributes: GatherBlockQuantizedAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs, attributes);\n  context.compute(createGatherBlockQuantizedProgramInfo(context.inputs, attributes));\n};\n\nexport const parseGatherBlockQuantizedAttributes = (\n  attributes: Record<string, unknown>,\n): GatherBlockQuantizedAttributes =>\n  createAttributeWithCacheKey({\n    blockSize: attributes.blockSize as number,\n    gatherAxis: attributes.gatherAxis as number,\n    quantizeAxis: attributes.quantizeAxis as number,\n  });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface GatherElementsAttributes extends AttributeWithCacheKey {\n  axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('GatherElements requires 2 inputs.');\n  }\n\n  if (inputs[0].dims.length < 1) {\n    throw new Error('GatherElements requires that the data input be rank >= 1.');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`);\n  }\n};\n\nconst createGatherElementsProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: GatherElementsAttributes,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const inputOutputDataType = inputs[0].dataType;\n  const inputRank = inputShape.length;\n\n  const indicesShape = inputs[1].dims;\n  const indicesDataType = inputs[1].dataType;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n  const axisDimLimit = inputShape[axis];\n\n  const outputShape = indicesShape.slice(0);\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const input = inputVariable('input', inputOutputDataType, inputRank);\n  const indices = inputVariable('indicesInput', indicesDataType, indicesShape.length);\n  const output = outputVariable('output', inputOutputDataType, outputShape.length);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.int32, data: axisDimLimit },\n    { type: DataType.uint32, data: axis },\n  ];\n  programUniforms.push(...createTensorShapeVariables(inputShape, indicesShape, outputShape));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n\n  // int64 indices would be treated as little endian i32 with assumption they fall in i32 limits\n  // That assumption is safe as it's not possible to allocate >2gb buffer for input tensor\n  // Input data will be treated as u32 or two u32 for 8-byte tensors\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper\n        .registerUniform('outputSize', 'u32')\n        .registerUniform('axisDimLimit', 'i32')\n        .registerUniform('axis', 'u32')\n        .declareVariables(input, indices, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n\n      var idx = ${indices.getByOffset('global_idx')};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${input.type.indices}(outputIndices);\n      ${input.indicesSet('inputIndices', 'uniforms.axis', 'u32(idx)')};\n      let value = ${input.getByIndices('inputIndices')};\n\n      ${output.setByOffset('global_idx', 'value')};\n  }`;\n\n  return {\n    name: 'GatherElements',\n    shaderCache: { inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const parseGatherElementsAttributes = (attributes: Record<string, unknown>): GatherElementsAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number });\n\nexport const gatherElements = (context: ComputeContext, attributes: GatherElementsAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs);\n  context.compute(createGatherElementsProgramInfo(context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { GemmUtil, ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformsArrayType,\n} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if (inputs[0].dataType !== inputs[1].dataType || (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst createGemmProgramInfo = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n  const aShape = inputs[0].dims.slice();\n  const bShape = inputs[1].dims.slice();\n  const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n    aShape,\n    attributes.transA,\n    bShape,\n    attributes.transB,\n    inputs.length === 3 ? inputs[2].dims : undefined,\n  );\n  const outputShape = [M, N];\n  if (!outputShape) {\n    throw new Error(\"Can't use gemm on the given tensors\");\n  }\n  const outputSize = ShapeUtil.size(outputShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: M },\n    { type: DataType.uint32, data: N },\n    { type: DataType.uint32, data: K },\n    { type: DataType.float, data: attributes.alpha },\n    { type: DataType.float, data: attributes.beta },\n  ];\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n  if (inputs.length === 3) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    let line = '';\n    if (attributes.transA && attributes.transB) {\n      line = 'value += a[k * uniforms.M + m] * b[n * uniforms.K + k];';\n    } else if (attributes.transA && !attributes.transB) {\n      line = 'value += a[k * uniforms.M + m] * b[k * uniforms.N + n];';\n    } else if (!attributes.transA && attributes.transB) {\n      line = 'value += a[m * uniforms.K + k] * b[n * uniforms.K + k];';\n    } else if (!attributes.transA && !attributes.transB) {\n      line = 'value += a[m * uniforms.K + k] * b[k * uniforms.N + n];';\n    }\n\n    const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= uniforms.alpha;';\n    const a = inputVariable('a', inputs[0].dataType, inputs[0].dims);\n    const b = inputVariable('b', inputs[1].dataType, inputs[1].dims);\n    const dataType = a.type.value;\n    let c: IndicesHelper | null = null;\n    const variables = [a, b];\n    if (inputs.length === 3) {\n      c = inputVariable('c', inputs[2].dataType, inputs[2].dims.length);\n      variables.push(c);\n    }\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n    variables.push(output);\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'M', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'alpha', type: 'f32' },\n      { name: 'beta', type: 'f32' },\n    ];\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${(() => {\n      if (c != null) {\n        return `let cOffset = ${c.broadcastedIndicesToOffset('vec2(m, n)', output)}; value += ${\n          dataType\n        }(uniforms.beta) * ${c.getByOffset('cOffset')};`;\n      }\n      return '';\n    })()}\n    output[global_idx] = value;\n  }`;\n  };\n\n  return {\n    name: 'Gemm',\n    shaderCache: { hint: `${attributes.cacheKey}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes => {\n  const transA = attributes.transA as boolean;\n  const transB = attributes.transB as boolean;\n  const alpha = attributes.alpha as number;\n  const beta = attributes.beta as number;\n  return {\n    transA,\n    transB,\n    alpha,\n    beta,\n    cacheKey: `${attributes.transA};${attributes.transB};${attributes.alpha === 1}`,\n  };\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfo(context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, GpuDataType, ProgramUniform } from '../types';\n\nimport {\n  applyAttention,\n  AttentionAttrs,\n  AttentionMaskType,\n  AttentionParameters,\n  AttentionQkvFormat,\n} from './attention';\nimport { inputVariable, outputVariable, ShaderHelper, UniformsArrayType } from './common';\nimport { createTransposeProgramInfo, TransposeAttributes } from './transpose';\n\nconst getInput = (inputs: readonly TensorView[], i: number) =>\n  inputs.length > i && inputs[i].dims.length > 0 ? inputs[i] : undefined;\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: AttentionAttrs): AttentionParameters => {\n  const query = inputs[0];\n  const key = getInput(inputs, 1);\n  const value = getInput(inputs, 2);\n  const bias = getInput(inputs, 3);\n  const keyPaddingMask = getInput(inputs, 4);\n  const attentionBias = getInput(inputs, 5);\n  const pastKey = getInput(inputs, 6);\n  const pastValue = getInput(inputs, 7);\n\n  // ---------------------------------------------------------------\n  // Notations:\n  //    B: batch_size\n  //    N: num_heads\n  //    H: head_size of Q and K\n  //    H_v: head_size of V\n  //    D: hidden_size for Q and K, where D = N * H\n  //    D_v: hidden_size of V, where D_v = N * H_v\n  //    S: q_sequence_length\n  //    P: past_sequence_length of kv cache\n  //    L: kv_sequence_length\n  //    T: total_sequence_length = P + L\n  //    M: max_sequence_length of kv cache when past and present share buffer\n  // ---------------------------------------------------------------\n  // MultiHeadAttention inputs:\n  // ---------------------------------------------------------------\n  //  Q_K_V_BSNH - no packing:\n  //     query            (Q)       : (B, S, D)\n  //     key              (K)       : (B, L, D)\n  //     value            (V)       : (B, L, D_v)\n  //  Q_K_V_BSNH_BNSH_BNSH - cross attention (kv cache is not used, L == T, D == D_v):\n  //     query            (Q)       : (B, S, D)\n  //     key              (K)       : (B, N, L, H)\n  //     value            (V)       : (B, N, L, H_v)\n  //  Q_KV_BSNH_BSN2H - packed kv (kv cache is not used, bias is not allowed for packed kv):\n  //     query            (Q)       : (B, S, D)\n  //     key              (K/V)     : (B, L, N, 2, H)\n  //     value                      : None\n  //  QKV_BSN3H - packed qkv (kv cache is not used, S == L, D == D_v):\n  //     query            (Q/K/V)   : (B, S, N, 3, H)\n  //     key                        : None\n  //     value                      : None\n  //\n  //  Other inputs:\n  //     bias             (Q/K/V)   : None or (D + D + D_v)\n  //     key_padding_mask (K/V)     : (B) or (3 * B + 2) or (B, T) or (B, S, T)\n  //     attention_bias             : None or (B, N, S, T), (1, N, S, T), (B, 1, S, T) or (1, 1, S, T)\n  //     past_key                   : (B, N, P, H) or None. Past state is only allowed for Q_K_V_BSNH.\n  //     past_value                 : (B, N, P, H) or None. Past state is only allowed for Q_K_V_BSNH.\n  //\n  //  Not Supported:\n  //     key_padding_mask, packed kv, packed qkv, and broadcast for attention_bias.\n\n  if (query.dims.length !== 3 && query.dims.length !== 5) {\n    throw new Error('Input query is expected to have 3 or 5 dimensions');\n  }\n\n  const batchSize = query.dims[0];\n  const sequenceLength = query.dims[1];\n  const hiddenSize = query.dims.length === 3 ? query.dims[2] : attributes.numHeads * query.dims[4];\n  let kvSequenceLength = sequenceLength;\n\n  let pastSequenceLength = 0;\n  let maxSequenceLength = 0;\n  const headSize = Math.floor(hiddenSize / attributes.numHeads);\n  if (pastKey && pastValue && ShapeUtil.size(pastKey.dims) && ShapeUtil.size(pastValue.dims)) {\n    if (pastKey.dims.length !== 4) {\n      throw new Error('Input \"past_key\" is expected to have 4 dimensions');\n    }\n    if (pastKey.dims[0] !== batchSize || pastKey.dims[1] !== attributes.numHeads || pastKey.dims[3] !== headSize) {\n      throw new Error('Input \"past_key\" shape (batch_size, num_heads, past_sequence_length, head_size)');\n    }\n    if (\n      pastValue.dims[0] !== batchSize ||\n      pastValue.dims[1] !== attributes.numHeads ||\n      pastValue.dims[3] !== headSize\n    ) {\n      throw new Error('Input \"past_value\" shape (batch_size, num_heads, past_sequence_length, head_size)');\n    }\n    if (pastKey.dims[2] !== pastValue.dims[2]) {\n      throw new Error('Input \"past_key\" and \"past_value\" shall have same dim 2 (past_sequence_length)');\n    }\n    if (pastValue.dims.length !== 4) {\n      throw new Error('Input \"past_value\" is expected to have 4 dimensions');\n    }\n    pastSequenceLength = pastKey.dims[2];\n    maxSequenceLength = pastKey.dims[2];\n  } else if ((pastKey && ShapeUtil.size(pastKey.dims)) || (pastValue && ShapeUtil.size(pastValue.dims))) {\n    throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');\n  }\n\n  let qkvFormat: AttentionQkvFormat;\n  if (key && ShapeUtil.size(key.dims) > 0) {\n    if (query.dims.length !== 3) {\n      throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');\n    }\n    if (key.dims.length < 3 || key.dims.length > 5) {\n      throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');\n    }\n    if (query.dims[0] !== key.dims[0]) {\n      throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');\n    }\n\n    if (key.dims.length === 3) {\n      if (key.dims[2] !== query.dims[2]) {\n        throw new Error('Input \"query\" and \"key\" shall have same dim 2 (hidden_size)');\n      }\n      qkvFormat = AttentionQkvFormat.qkvBSNH;\n      kvSequenceLength = key.dims[1];\n    } else if (key.dims.length === 5) {\n      if (key.dims[2] !== attributes.numHeads || key.dims[3] !== 2 || key.dims[4] !== headSize) {\n        throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');\n      }\n      if (value) {\n        throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');\n      }\n      qkvFormat = AttentionQkvFormat.qKvBSNHxBSN2H;\n      kvSequenceLength = key.dims[1];\n    } else {\n      // key_dims.size() == 4 (cross-attention with past_key)\n      if (key.dims[1] !== attributes.numHeads || key.dims[3] !== headSize) {\n        throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');\n      }\n\n      qkvFormat = AttentionQkvFormat.unknown; // Q_K_V_BSNH_BNSH_BNSH\n      kvSequenceLength = key.dims[2];\n    }\n  } else {\n    // packed QKV\n    if (query.dims.length !== 5) {\n      throw new Error('Input \"query\" is expected to have 5 dimensions when key is empty');\n    }\n    if (query.dims[2] !== attributes.numHeads || query.dims[3] !== 3) {\n      throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');\n    }\n\n    qkvFormat = AttentionQkvFormat.qkvBSN3H;\n  }\n\n  if (bias && ShapeUtil.size(bias.dims) > 0) {\n    if (bias.dims.length !== 1) {\n      throw new Error('Input \"bias\" is expected to have 1 dimension');\n    }\n\n    if (key) {\n      if (key.dims.length === 5 && key.dims[3] === 2) {\n        throw new Error('bias is not allowed for packed kv.');\n      }\n    }\n  }\n\n  const totalSequenceLength = pastSequenceLength + kvSequenceLength;\n\n  let maskType: AttentionMaskType = AttentionMaskType.none;\n  if (keyPaddingMask && ShapeUtil.size(keyPaddingMask.dims) > 0) {\n    maskType = AttentionMaskType.maskUnknown;\n    const maskDims = keyPaddingMask.dims;\n    if (maskDims.length === 1) {\n      if (maskDims[0] === batchSize) {\n        maskType = AttentionMaskType.mask1dKeySeqLen;\n      } else if (maskDims[0] === 3 * batchSize + 2) {\n        maskType = AttentionMaskType.mask1DKeySeqLenStart;\n      }\n    } else if (maskDims.length === 2 && maskDims[0] === batchSize && maskDims[1] === totalSequenceLength) {\n      maskType = AttentionMaskType.mask2dKeyPadding;\n    }\n    if (maskType === AttentionMaskType.maskUnknown) {\n      throw new Error('Input \"key_padding_mask\" shape shall be (batch_size) or (batch_size, total_sequence_length)');\n    }\n    throw new Error('Mask not supported');\n  }\n\n  let passPastInKv = false;\n  let vHiddenSize = hiddenSize;\n  if (value && ShapeUtil.size(value.dims) > 0) {\n    if (value.dims.length !== 3 && value.dims.length !== 4) {\n      throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');\n    }\n\n    if (query.dims[0] !== value.dims[0]) {\n      throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');\n    }\n\n    if (value.dims.length === 3) {\n      if (kvSequenceLength !== value.dims[1]) {\n        throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');\n      }\n      vHiddenSize = value.dims[2];\n    } else {\n      // Q_K_V_BSNH_BNSH_BNSH\n      if (kvSequenceLength !== value.dims[2]) {\n        throw new Error('Input \"key\" and \"value\" shall have the same dim 2 (kv_sequence_length)');\n      }\n      vHiddenSize = value.dims[1] * value.dims[3];\n      passPastInKv = true;\n    }\n  }\n\n  const broadcastResPosBias = false;\n\n  if (keyPaddingMask && ShapeUtil.size(keyPaddingMask.dims) > 0) {\n    throw new Error('Key padding mask is not supported');\n  }\n\n  if (attentionBias && ShapeUtil.size(attentionBias.dims) > 0) {\n    if (attentionBias.dims.length !== 4) {\n      throw new Error('Input \"attention_bias\" is expected to have 4 dimensions');\n    }\n\n    // TODO: support broadcasting the first and second dimensions of attention_bias.\n    if (\n      attentionBias.dims[0] !== batchSize ||\n      attentionBias.dims[1] !== attributes.numHeads ||\n      attentionBias.dims[2] !== sequenceLength ||\n      attentionBias.dims[3] !== totalSequenceLength\n    ) {\n      throw new Error('Expect \"attention_bias\" shape (batch_size, num_heads, sequence_length, total_sequence_length)');\n    }\n  }\n\n  return {\n    batchSize,\n    sequenceLength,\n    pastSequenceLength,\n    kvSequenceLength,\n    totalSequenceLength,\n    maxSequenceLength,\n    inputHiddenSize: 0,\n    hiddenSize,\n    vHiddenSize,\n    headSize,\n    vHeadSize: Math.floor(vHiddenSize / attributes.numHeads),\n    numHeads: attributes.numHeads,\n    isUnidirectional: false,\n    pastPresentShareBuffer: false,\n    maskFilterValue: attributes.maskFilterValue,\n    maskType,\n    scale: attributes.scale,\n    broadcastResPosBias,\n    passPastInKv,\n    qkvFormat,\n  };\n};\n\nexport const parseMultiHeadAttentionAttributes = (attributes: AttentionAttrs): AttentionAttrs =>\n  createAttributeWithCacheKey({ ...attributes });\n\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({ perm: [0, 2, 1, 3] });\n\nconst addBiasTranspose = (\n  context: ComputeContext,\n  qkv: TensorView,\n  bias: TensorView,\n  batchSize: number,\n  sequenceLength: number,\n  hiddenSize: number,\n  biasOffset: number,\n) => {\n  const outputShape = [batchSize, sequenceLength, hiddenSize];\n  const outputSize = ShapeUtil.size(outputShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: biasOffset },\n    { type: DataType.uint32, data: hiddenSize },\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('qkv_with_bias', qkv.dataType, outputShape);\n    const qkvInput = inputVariable('qkv', qkv.dataType, outputShape);\n    const biasInput = inputVariable('bias', bias.dataType, outputShape);\n\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'bias_offset', type: 'u32' },\n      { name: 'hidden_size', type: 'u32' },\n    ];\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(qkvInput, biasInput, output)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`;\n  };\n\n  return context.compute(\n    {\n      name: 'MultiHeadAttentionAddBias',\n      shaderCache: { inputDependencies: ['type', 'type'] },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: qkv.dataType, gpuDataType: GpuDataType.default }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs: [qkv, bias], outputs: [-1] },\n  )[0];\n};\n\nexport const maybeTransposeToBNSHAndAddBias = (\n  context: ComputeContext,\n  batchSize: number,\n  numHeads: number,\n  sequenceLength: number,\n  headSize: number,\n  input: TensorView,\n  bias?: TensorView,\n  biasOffset?: number,\n) => {\n  // const newDims = [];\n\n  let reshapedInput = input;\n  if (!(bias && ShapeUtil.size(bias.dims) > 0)) {\n    if (input.dims.length === 3) {\n      reshapedInput = input.reshape([batchSize, sequenceLength, numHeads, headSize]);\n    }\n    if (numHeads === 1 || sequenceLength === 1) {\n      return reshapedInput;\n    }\n    return context.compute(createTransposeProgramInfo(reshapedInput, weightTransposeAttribute.perm), {\n      inputs: [reshapedInput],\n      outputs: [-1],\n    })[0];\n  } else {\n    if (sequenceLength === 1) {\n      throw new Error('AddBiasReshape is not implemented. Please export your model with packed QKV or KV');\n    } else {\n      reshapedInput = addBiasTranspose(\n        context,\n        input,\n        bias,\n        batchSize,\n        sequenceLength,\n        numHeads * headSize,\n        biasOffset!,\n      );\n      reshapedInput = reshapedInput.reshape([batchSize, sequenceLength, numHeads, headSize]);\n      if (numHeads === 1 || sequenceLength === 1) {\n        return reshapedInput;\n      }\n      return context.compute(createTransposeProgramInfo(reshapedInput, weightTransposeAttribute.perm), {\n        inputs: [reshapedInput],\n        outputs: [-1],\n      })[0];\n    }\n  }\n};\n\nexport const multiHeadAttention = (context: ComputeContext, attributes: AttentionAttrs): void => {\n  const params = validateInputs(context.inputs, attributes);\n  const query = context.inputs[0];\n  const key = getInput(context.inputs, 1);\n  const value = getInput(context.inputs, 2);\n  const bias = getInput(context.inputs, 3);\n  const keyPaddingMask = getInput(context.inputs, 4);\n  const attentionBias = getInput(context.inputs, 5);\n  const pastKey = getInput(context.inputs, 6);\n  const pastValue = getInput(context.inputs, 7);\n  if (query.dims.length === 5) {\n    throw new Error('Packed QKV is not implemented');\n  }\n\n  if (key?.dims.length === 5) {\n    throw new Error('Packed KV is not implemented');\n  }\n\n  // applyAttention expects BNSH inputs\n  const kvBNSH = key && value && key.dims.length === 4 && value.dims.length === 4;\n\n  const Q = maybeTransposeToBNSHAndAddBias(\n    context,\n    params.batchSize,\n    params.numHeads,\n    params.sequenceLength,\n    params.headSize,\n    query,\n    bias,\n    0,\n  );\n\n  if (kvBNSH) {\n    return applyAttention(\n      context,\n      Q,\n      key,\n      value,\n      keyPaddingMask,\n      undefined,\n      pastKey,\n      pastValue,\n      attentionBias,\n      params,\n      attributes,\n    );\n  }\n  if (!key || !value) {\n    throw new Error('key and value must be provided');\n  }\n  const K = maybeTransposeToBNSHAndAddBias(\n    context,\n    params.batchSize,\n    params.numHeads,\n    params.kvSequenceLength,\n    params.headSize,\n    key,\n    bias,\n    params.hiddenSize,\n  );\n\n  const V = maybeTransposeToBNSHAndAddBias(\n    context,\n    params.batchSize,\n    params.numHeads,\n    params.kvSequenceLength,\n    params.vHeadSize,\n    value,\n    bias,\n    2 * params.hiddenSize,\n  );\n\n  applyAttention(context, Q, K, V, keyPaddingMask, undefined, pastKey, pastValue, attentionBias, params, attributes);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nconst getRepeats = (repeatsTensorView: TensorView): readonly number[] =>\n  Array.from(repeatsTensorView.getBigInt64Array(), Number);\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 inputs.');\n  }\n\n  if (\n    inputs[0].dataType !== DataType.float &&\n    inputs[0].dataType !== DataType.float16 &&\n    inputs[0].dataType !== DataType.int32 &&\n    inputs[0].dataType !== DataType.uint32\n  ) {\n    throw new Error('Tile only support float, float16, int32, and uint32 data types');\n  }\n\n  if (inputs[1].dataType !== DataType.int64) {\n    throw new Error('Tile `repeats` input should be of int64 data type');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('Tile `repeats` input should be 1-D');\n  }\n\n  const repeats: readonly number[] = getRepeats(inputs[1]);\n\n  if (repeats.length !== inputs[0].dims.length) {\n    throw new Error('Tile `repeats` input should have same number of elements as rank of input data tensor');\n  }\n};\n\nconst getOutputShape = (inputShape: readonly number[], repeats: readonly number[]): readonly number[] => {\n  const outputShape: number[] = [];\n\n  for (let i = 0; i < inputShape.length; ++i) {\n    outputShape.push(inputShape[i] * repeats[i]);\n  }\n\n  return outputShape;\n};\n\nexport const createTileProgramInfo = (inputs: readonly TensorView[], shape?: number[]): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const repeats: readonly number[] = shape == null ? getRepeats(inputs[1]) : shape;\n  const outputShape = getOutputShape(inputShape, repeats);\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const dataType = inputs[0].dataType;\n  const input = inputVariable('input', dataType, inputShape.length);\n  const output = outputVariable('output', dataType, outputShape.length);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      const inputShape = ${input.indices(...inputShape)};\n      ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n      let output_indices = ${output.offsetToIndices('global_idx')};\n      var input_indices: ${input.type.indices};\n      for (var i = 0; i < ${inputShape.length}; i++) {\n        let input_dim_i = ${input.indicesGet('uniforms.input_shape', 'i')};\n        let input_dim_value = ${output.indicesGet('output_indices', 'i')}  % input_dim_i;\n\n        ${input.indicesSet('input_indices', 'i', 'input_dim_value')}\n      }\n      ${output.setByOffset('global_idx', input.getByIndices('input_indices'))}\n    }`;\n\n  return {\n    name: 'Tile',\n    shaderCache: { hint: `${repeats}`, inputDependencies: ['rank'] },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: outputSize },\n        ...createTensorShapeVariables(inputs[0].dims, outputShape),\n      ],\n    }),\n    getShaderSource,\n  };\n};\n\nexport const tile = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(createTileProgramInfo(context.inputs), { inputs: [0] });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  applyAttention,\n  AttentionAttrs,\n  AttentionMaskType,\n  AttentionParameters,\n  AttentionQkvFormat,\n} from './attention';\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper, UniformsArrayType } from './common';\nimport { maybeTransposeToBNSHAndAddBias } from './multihead-attention';\nimport { createTileProgramInfo } from './tile';\nimport { createTransposeProgramInfo, TransposeAttributes } from './transpose';\n\nexport const validateInputs = (inputs: readonly TensorView[], attributes: AttentionAttrs): AttentionParameters => {\n  const query = inputs[0];\n  const key = inputs[1];\n  const value = inputs[2];\n  const pastKey = inputs[3];\n  const pastValue = inputs[4];\n\n  // Abbreviation and Meanings:\n  //   B:    batch_size\n  //   S:    sequence_length (input sequence length of query)\n  //   P:    past_sequence_length (past sequence length of key or value)\n  //   L:    kv_sequence_length (input sequence length of key or value)\n  //   M:    max_sequence_length\n  //   T:    total_sequence_length = past_sequence_length + kv_sequence_length\n  //   N:    num_heads\n  //   H:    head size for Q and K, aka q_head_size or k_head_size or qk_head_size\n  //   H_v:  v_head_size\n  //   D_i:  input hidden size\n  //   D:    hidden size for Q and K (D = N * H), aka q_hidden_size or k_hidden_size or qk_hidden_size\n  //   D_v:  v_hidden_size = num_heads * v_head_size\n\n  //     past_key                   : (B, N, S*, H)\n  //     past_value                 : (B, N, S*, H)\n  // When no packing for q/k/v:\n  //     query            (Q)       : (B, S, D)\n  //     key              (K)       : (B, L, D) or (B, N, S*, H)\n  //     value            (V)       : (B, L, D_v) or (B, N, S*, H)\n  // When packed kv is used:\n  //     query            (Q)       : (B, S, D)\n  //     key              (K)       : (B, L, N, 2, H)\n  //     value            (V)       : None\n  // When packed qkv is used:\n  //     query            (Q)       : (B, L, N, 3, H) or (B, S, 3*D)\n  //     key              (K)       : None\n  //     value            (V)       : None\n\n  if (query.dims.length !== 3 && query.dims.length !== 5) {\n    throw new Error('Input query is expected to have 3 or 5 dimensions');\n  }\n\n  const dmmhaPacking = false;\n  const batchSize = query.dims[0];\n  const sequenceLength = query.dims[1];\n  const hiddenSize =\n    query.dims.length === 3 ? (dmmhaPacking ? query.dims[2] / 3 : query.dims[2]) : attributes.numHeads * query.dims[4];\n  let kvSequenceLength = sequenceLength;\n\n  let pastSequenceLength = 0;\n  let maxSequenceLength = 0;\n  const headSize = Math.floor(hiddenSize / attributes.numHeads);\n  const hasPastKey = pastKey && pastKey.dims.length !== 0;\n  const hasPastValue = pastValue && pastValue.dims.length !== 0;\n  // TODO : this should be from attributes.\n  const isPastkvBSNH = true;\n  if (hasPastKey && hasPastValue) {\n    if (pastKey.dims.length !== 4) {\n      throw new Error('Input \"past_key\" is expected to have 4 dimensions');\n    }\n    if (pastValue.dims.length !== 4) {\n      throw new Error('Input \"past_value\" is expected to have 4 dimensions');\n    }\n    if (isPastkvBSNH) {\n      // For BSNH\n      pastSequenceLength = pastKey.dims[1];\n      maxSequenceLength = pastKey.dims[1];\n    } else {\n      // For BNSH\n      pastSequenceLength = pastKey.dims[2];\n      maxSequenceLength = pastKey.dims[2];\n    }\n  } else if (hasPastKey || hasPastValue) {\n    throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');\n  }\n\n  let qkvFormat: AttentionQkvFormat;\n  if (key) {\n    if (query.dims.length !== 3) {\n      throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');\n    }\n    if (key.dims.length < 3 || key.dims.length > 5) {\n      throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');\n    }\n    if (query.dims[0] !== key.dims[0]) {\n      throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');\n    }\n\n    if (key.dims.length === 3) {\n      if (query.dims[2] % key.dims[2] !== 0) {\n        throw new Error('Dimension 2 of \"query\" should be a multiple of \"key\"');\n      }\n      qkvFormat = AttentionQkvFormat.qkvBSNH;\n      kvSequenceLength = key.dims[1];\n    } else if (key.dims.length === 5) {\n      if (key.dims[2] !== attributes.numHeads || key.dims[3] !== 2 || key.dims[4] !== headSize) {\n        throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');\n      }\n      if (value) {\n        throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');\n      }\n      qkvFormat = AttentionQkvFormat.qKvBSNHxBSN2H;\n      kvSequenceLength = key.dims[1];\n    } else {\n      // key_dims.size() == 4 (cross-attention with past_key)\n      if (key.dims[1] !== attributes.numHeads || key.dims[3] !== headSize) {\n        throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');\n      }\n\n      qkvFormat = AttentionQkvFormat.unknown;\n      kvSequenceLength = key.dims[2];\n    }\n  } else {\n    // packed QKV\n    if (query.dims.length !== 3 && query.dims.length !== 5) {\n      throw new Error('Input \"query\" is expected to have 3 or 5 dimensions when key is empty');\n    }\n    if (query.dims.length === 5 && (query.dims[2] !== attributes.numHeads || query.dims[3] !== 3)) {\n      throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');\n    }\n\n    qkvFormat = AttentionQkvFormat.qkvBSN3H;\n  }\n\n  const maskType: AttentionMaskType = AttentionMaskType.none;\n  let passPastInKv = false;\n  let vHiddenSize = hiddenSize;\n  if (value) {\n    if (value.dims.length !== 3 && value.dims.length !== 4) {\n      throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');\n    }\n\n    if (query.dims[0] !== value.dims[0]) {\n      throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');\n    }\n\n    if (value.dims.length === 3) {\n      if (kvSequenceLength !== value.dims[1]) {\n        throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');\n      }\n      vHiddenSize = value.dims[2];\n    } else {\n      if (kvSequenceLength !== value.dims[2]) {\n        throw new Error('Input \"past_key\" and \"past_value\" shall have the same dim 2 (kv_sequence_length)');\n      }\n      vHiddenSize = value.dims[1] * value.dims[3];\n      passPastInKv = true;\n    }\n  }\n  const totalSequenceLength = pastSequenceLength + kvSequenceLength;\n  const broadcastResPosBias = false;\n\n  return {\n    batchSize,\n    sequenceLength,\n    pastSequenceLength,\n    kvSequenceLength,\n    totalSequenceLength,\n    maxSequenceLength,\n    inputHiddenSize: 0,\n    hiddenSize,\n    vHiddenSize,\n    headSize,\n    vHeadSize: Math.floor(vHiddenSize / attributes.kvNumHeads!),\n    numHeads: attributes.numHeads,\n    kvNumHeads: attributes.kvNumHeads,\n    nReps: attributes.numHeads / attributes.kvNumHeads!,\n    pastPresentShareBuffer: false,\n    maskType,\n    scale: attributes.scale,\n    broadcastResPosBias,\n    passPastInKv,\n    qkvFormat,\n    isPastkvBSNH,\n  };\n};\n\nconst createConcatProgramInfo = (\n  a: TensorView,\n  b: TensorView | undefined,\n  dataType: DataType,\n  params: AttentionParameters,\n): ProgramInfo => {\n  const outputShape = [params.batchSize, params.totalSequenceLength, params.kvNumHeads!, params.headSize];\n  const component = 4;\n  const outputSize = ShapeUtil.size(outputShape) / component;\n  const presentSequenceLength = params.totalSequenceLength;\n  const output = outputVariable('present_kv', dataType, outputShape.length, component);\n  const inputA = inputVariable('new_kv', a.dataType, a.dims.length, component);\n  const inputB = b ? inputVariable('past_kv', b.dataType, b.dims.length, component) : undefined;\n\n  const H = Math.ceil(params.headSize / component);\n  const dispatch = { x: presentSequenceLength, y: a.dims[0], z: 1 };\n\n  const inputDependencies: ProgramInputTensorInfoDependency[] = b ? ['rank', 'rank'] : ['rank'];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: params.pastSequenceLength },\n    { type: DataType.uint32, data: params.kvSequenceLength },\n    { type: DataType.uint32, data: params.totalSequenceLength },\n  ];\n\n  const inputs = [inputA];\n  if (inputB) {\n    programUniforms.push(\n      ...createTensorShapeVariables(a.dims),\n      ...createTensorShapeVariables(b!.dims),\n      ...createTensorShapeVariables(outputShape),\n    );\n    inputs.push(inputB);\n  } else {\n    programUniforms.push(...createTensorShapeVariables(a.dims), ...createTensorShapeVariables(outputShape));\n  }\n  const uniforms: UniformsArrayType = [\n    { name: 'output_size', type: 'u32' },\n    { name: 'past_seqlen', type: 'u32' },\n    { name: 'new_seqlen', type: 'u32' },\n    { name: 'present_seqlen', type: 'u32' },\n  ];\n\n  const pastStr = `      let past_batch_stride = uniforms.past_seqlen * num_heads * H;\n        var past_head_stride = uniforms.past_seqlen * H;\n        if (is_bsnh) {\n          past_head_stride = H;\n        }\n        let in_offset = b * past_batch_stride + s * row_stride + n * past_head_stride + h;\n        present_kv[out_offset] = past_kv[in_offset];`;\n  const newStr = `      let new_batch_stride = uniforms.new_seqlen * num_heads * H;\n        let new_row_stride = num_heads * H;\n        let new_head_stride = H;\n        let in_offset = b * new_batch_stride + (s - past_seqlen) * new_row_stride + n * new_head_stride + h;\n        present_kv[out_offset] = new_kv[in_offset];`;\n  const concatStr = b\n    ? `if (s < past_seqlen) {\n        ${pastStr}\n        } else if (s < past_seqlen + uniforms.new_seqlen) {\n        ${newStr}\n        }`\n    : `if (s < past_seqlen + uniforms.new_seqlen) {\n          ${newStr}\n        }`;\n\n  // TODO: handle H * params.kvNumHeads greater than maxComputeInvocationsPerWorkgroup limit.\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputs, output)}\n  ${shaderHelper.mainStart([H, params.kvNumHeads!, 1])}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    var indices = ${output.offsetToIndices('global_idx')};\n    let h = local_id.x;\n    let n = local_id.y;\n    let s = workgroup_id.x;\n    let b = workgroup_id.y;\n    let num_heads = ${params.kvNumHeads!}u;\n    let H = ${H}u;\n\n    let present_seqlen = uniforms.present_seqlen;\n    let present_batch_stride = present_seqlen * num_heads * H;\n    var row_stride = H;\n    let is_bsnh = ${params.isPastkvBSNH};\n\n    if (is_bsnh) {\n      row_stride = num_heads * H;\n    }\n    var present_head_stride = present_seqlen * H;\n    if (is_bsnh) {\n      present_head_stride = H;\n    }\n\n    let past_seqlen = uniforms.past_seqlen;\n\n    let out_offset = b * present_batch_stride + s * row_stride + n * present_head_stride + h;\n    ${concatStr}\n  }`;\n\n  return {\n    name: 'ConcatPastNew',\n    shaderCache: { hint: `${params.kvNumHeads!}${H}${!!b}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: dispatch,\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const parseGroupQueryAttentionAttributes = (attributes: AttentionAttrs): AttentionAttrs =>\n  createAttributeWithCacheKey({ ...attributes });\n\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({ perm: [0, 2, 1, 3] });\n\nconst maybeExpandAndTransposeToBNSH = (\n  context: ComputeContext,\n  input: TensorView,\n  pastKV: TensorView | undefined,\n  params: AttentionParameters,\n  outputIndex: number,\n) => {\n  let reshapedInput = input;\n  const numHeads = params.kvNumHeads!;\n  const nReps = params.nReps!;\n  if (input.dims.length === 3 && params.kvSequenceLength !== 0) {\n    reshapedInput = input.reshape([params.batchSize, params.kvSequenceLength, numHeads, params.headSize]);\n  }\n\n  if (pastKV) {\n    reshapedInput = context.compute(createConcatProgramInfo(reshapedInput, pastKV, reshapedInput.dataType, params), {\n      inputs: [reshapedInput, pastKV],\n      outputs: [params.isPastkvBSNH ? outputIndex : -1],\n    })[0];\n  } else {\n    reshapedInput = context.compute(createConcatProgramInfo(reshapedInput, undefined, reshapedInput.dataType, params), {\n      inputs: [reshapedInput],\n      outputs: [params.isPastkvBSNH ? outputIndex : -1],\n    })[0];\n  }\n  if (nReps !== 1) {\n    reshapedInput = context.compute(createTileProgramInfo([reshapedInput], [1, 1, 1, nReps]), {\n      inputs: [reshapedInput],\n      outputs: [-1],\n    })[0];\n    reshapedInput = reshapedInput.reshape([\n      params.batchSize,\n      params.totalSequenceLength,\n      numHeads * nReps,\n      params.headSize,\n    ]);\n  }\n\n  return context.compute(createTransposeProgramInfo(reshapedInput, weightTransposeAttribute.perm), {\n    inputs: [reshapedInput],\n    outputs: [-1],\n  })[0];\n};\n\nexport const groupQueryAttention = (context: ComputeContext, attributes: AttentionAttrs): void => {\n  const params = validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 5) {\n    throw new Error('Packed QKV is not implemented');\n  }\n\n  if (context.inputs[1]?.dims.length === 5) {\n    throw new Error('Packed KV is not implemented');\n  }\n\n  const Q = maybeTransposeToBNSHAndAddBias(\n    context,\n    params.batchSize,\n    params.numHeads,\n    params.sequenceLength,\n    params.headSize,\n    context.inputs[0],\n    undefined,\n    0,\n  );\n  const pastKey = context.inputs[3] && context.inputs[3].dims.length !== 0 ? context.inputs[3] : undefined;\n  const pastValue = context.inputs[4] && context.inputs[4].dims.length !== 0 ? context.inputs[4] : undefined;\n  const K = maybeExpandAndTransposeToBNSH(context, context.inputs[1], pastKey, params, 1);\n  const V = maybeExpandAndTransposeToBNSH(context, context.inputs[2], pastValue, params, 2);\n  applyAttention(context, Q, K, V, undefined, undefined, undefined, undefined, undefined, params, attributes);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\nimport { createTransposeProgramInfo } from './transpose';\n\nimport {\n  createTensorShapeVariables,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  sumVector,\n  tensorTypeToWsglStorageType,\n} from './common';\n\nexport interface InstanceNormAttributes {\n  epsilon: number;\n  format: 'NHWC' | 'NCHW';\n}\n\nconst computeChannelScaleShift = (\n  context: ComputeContext,\n  input: TensorView,\n  scale: TensorView,\n  bias: TensorView,\n  n: number,\n  h: number,\n  c: number,\n  epsilon: number,\n) => {\n  const components = getMaxComponents(h);\n  const f32Type = components === 1 ? 'f32' : `vec${components}f`;\n  const wgType = components === 1 ? 'vec2f' : `mat2x${components}f`;\n  const unitsOfWork = n * c;\n\n  const inputShape = [n, c, h / components];\n  const outputShape = [n, c, 2];\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'type', 'type'];\n  const programUniforms: ProgramUniform[] = [];\n  programUniforms.push(...createTensorShapeVariables(inputShape, outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const x = inputVariable('x', input.dataType, 3, components);\n    const s = inputVariable('scale', scale.dataType, scale.dims);\n    const b = inputVariable('bias', bias.dataType, bias.dims);\n    const output = outputVariable('output', DataType.float, 3, 2);\n    const variables = [x, s, b, output];\n    const workgroupSize = 64;\n    return `\n  var<workgroup> workgroup_shared : array<${wgType}, ${workgroupSize}>;\n  const workgroup_size = ${workgroupSize}u;\n  ${shaderHelper.declareVariables(...variables)}\n  ${shaderHelper.mainStart(workgroupSize)}\n    let batch = workgroup_index / uniforms.x_shape[1];\n    let channel = workgroup_index % uniforms.x_shape[1];\n    let hight = uniforms.x_shape[2];\n    // initialize workgroup memory\n    var sum = ${f32Type}(0);\n    var squared_sum = ${f32Type}(0);\n    for (var h = local_idx; h < hight; h += workgroup_size) {\n      let value = ${f32Type}(${x.get('batch', 'channel', 'h')});\n      sum += value;\n      squared_sum += value * value;\n    }\n    workgroup_shared[local_idx] = ${wgType}(sum, squared_sum);\n    workgroupBarrier();\n\n    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (local_idx < currSize) {\n        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (local_idx == 0) {\n      let sum_final = ${sumVector('workgroup_shared[0][0]', components)} / f32(hight * ${components});\n      let squared_sum_final = ${sumVector('workgroup_shared[0][1]', components)} / f32(hight * ${components});\n\n      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${epsilon}));\n      let channel_scale = inv_std_dev * f32(scale[channel]);\n      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;\n      output[workgroup_index] = vec2f(channel_scale, channel_shift);\n    }\n  }`;\n  };\n\n  return context.compute(\n    {\n      name: 'InstanceNormComputeChannelScaleShift',\n      // TODO: use epsilon as uniform. Currently epsilon as uniform fails test_instancenorm_epsilon.\n      shaderCache: { hint: `${components};${epsilon}`, inputDependencies },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: DataType.float }],\n        dispatchGroup: { x: unitsOfWork },\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs: [input, scale, bias], outputs: [-1] },\n  )[0];\n};\n\nconst createInstanceNormProgramInfo = (\n  context: ComputeContext,\n  inputs: readonly TensorView[],\n  attributes: InstanceNormAttributes,\n) => {\n  const xShape = inputs[0].dims;\n  const outputShape = xShape;\n  const axis = 2;\n  const N = xShape[0];\n  const C = xShape[1];\n  const H = ShapeUtil.sizeFromDimension(xShape, axis);\n  const components = getMaxComponents(H);\n  const outputSize = ShapeUtil.size(outputShape) / components;\n  // compute channel scale and channel shift.\n  const channelScaleShift = computeChannelScaleShift(\n    context,\n    inputs[0],\n    inputs[1],\n    inputs[2],\n    N,\n    H,\n    C,\n    attributes.epsilon,\n  );\n\n  const inputShape = [N, C, H / components];\n  const scaleShape = [N, C];\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'none'];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const x = inputVariable('x', inputs[0].dataType, inputShape.length, components);\n    const scale = inputVariable('scale_shift', DataType.float, scaleShape.length, 2);\n    const output = outputVariable('output', inputs[0].dataType, inputShape.length, components);\n    const variables = [x, scale, output];\n    return `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(...variables)}\n  ${shaderHelper.mainStart()}\n  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n      let batch = outputIndices[0];\n      let channel = outputIndices[1];\n      let scale_shift = ${scale.getByIndices('vec2<u32>(batch, channel)')};\n      let value = ${x.getByOffset('global_idx')} * ${output.type.value}(scale_shift.x) + ${output.type.value}(scale_shift.y);\n      ${output.setByOffset('global_idx', 'value')};\n  }`;\n  };\n\n  context.compute(\n    {\n      name: 'InstanceNormalization',\n      shaderCache: { hint: `${components}`, inputDependencies },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms: [\n          { type: DataType.uint32, data: outputSize },\n          ...createTensorShapeVariables(inputShape, scaleShape, inputShape),\n        ],\n      }),\n      getShaderSource,\n    },\n    { inputs: [inputs[0], channelScaleShift] },\n  );\n};\n\nconst createInstanceNormNHWCProgramInfo = (\n  context: ComputeContext,\n  inputs: readonly TensorView[],\n  attributes: InstanceNormAttributes,\n) => {\n  const xShape = inputs[0].dims;\n  const outputShape = xShape;\n  const N = xShape[0];\n  const C = xShape[xShape.length - 1];\n  const H = ShapeUtil.sizeFromDimension(xShape, 1) / C;\n  const components = getMaxComponents(C);\n  const outputSize = ShapeUtil.size(outputShape) / components;\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: H },\n    { type: DataType.uint32, data: Math.floor(C / components) },\n  ];\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n\n  // 1. transpose x from NHWC to NCHW\n  const transposedXPerm = [0, xShape.length - 1];\n  for (let i = 0; i < xShape.length - 2; i++) {\n    transposedXPerm.push(i + 1);\n  }\n  const transposedX = context.compute(createTransposeProgramInfo(context.inputs[0], transposedXPerm), {\n    inputs: [context.inputs[0]],\n    outputs: [-1],\n  })[0];\n  // 2. compute channel scale and channel shift.\n  const channelScaleShift = computeChannelScaleShift(\n    context,\n    transposedX,\n    inputs[1],\n    inputs[2],\n    N,\n    H,\n    C,\n    attributes.epsilon,\n  );\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const scaleType = components === 1 ? 'vec2f' : `mat${components}x2f`;\n    const scaleData = (num: number) => {\n      const index = num === 0 ? 'x' : 'y';\n      const f32Type = components === 1 ? 'f32' : `vec${components}f`;\n      switch (components) {\n        case 1:\n          return `${dataType}(${f32Type}(scale.${index}))`;\n        case 2:\n          return `vec2<${dataType}>(${f32Type}(scale[0].${index}, scale[1].${index}))`;\n        case 4:\n          return `vec4<${dataType}>(${f32Type}(scale[0].${index}, scale[1].${index}, scale[2].${index}, scale[3].${index}))`;\n        default:\n          throw new Error(`Not supported compoents ${components}`);\n      }\n    };\n    const inputHelper = inputVariable('input', inputs[0].dataType, inputs[0].dims, components);\n    const outputHelper = outputVariable('output', inputs[0].dataType, outputShape, components);\n\n    return `\n  @group(0) @binding(0) var<storage, read> input : array<${inputHelper.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scale_input : array<${scaleType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${outputHelper.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${shaderHelper.mainStart()}\n    let current_image_number = global_idx / (uniforms.C * uniforms.H);\n    let current_channel_number = global_idx % uniforms.C;\n\n    let scale_offset = current_image_number * uniforms.C + current_channel_number;\n    let scale = scale_input[scale_offset];\n    output[global_idx] = fma(input[global_idx], ${scaleData(0)}, ${scaleData(1)});\n  }`;\n  };\n  context.compute(\n    {\n      name: 'InstanceNormalizationNHWC',\n      shaderCache: { hint: `${components}`, inputDependencies },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs: [inputs[0], channelScaleShift] },\n  );\n};\n\nexport const instanceNorm = (context: ComputeContext, attributes: InstanceNormAttributes): void => {\n  if (attributes.format === 'NHWC') {\n    createInstanceNormNHWCProgramInfo(context, context.inputs, attributes);\n  } else {\n    createInstanceNormProgramInfo(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  castToF32,\n  fillVector,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  sumVector,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from './common';\n\ninterface LayerNormAttributes {\n  simplified: boolean;\n  axis: number;\n  epsilon: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 2) {\n    throw new Error('layerNorm requires at least 2 inputs.');\n  }\n};\n\nconst createLayerNormProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: LayerNormAttributes,\n  outputCount: number,\n): ProgramInfo => {\n  const simplified = attributes.simplified;\n\n  const xShape = inputs[0].dims;\n  const scale = inputs[1];\n  const bias = !simplified && inputs[2];\n\n  const outputShape = xShape;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, xShape.length);\n  const normCount = ShapeUtil.sizeToDimension(xShape, axis);\n  const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\n\n  const scaleSize = ShapeUtil.size(scale.dims);\n  const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\n  if (scaleSize !== normSize || (bias && biasSize !== normSize)) {\n    throw new Error(`Size of X.shape()[axis:] == ${normSize}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${scaleSize} and bias size of ${biasSize}`);\n  }\n\n  const meanInvStdDevDim: number[] = [];\n  for (let i = 0; i < xShape.length; ++i) {\n    if (i < axis) {\n      meanInvStdDevDim.push(xShape[i]);\n    } else {\n      meanInvStdDevDim.push(1);\n    }\n  }\n  const components = getMaxComponents(normSize);\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: normCount },\n    { type: DataType.float, data: normSize },\n    { type: DataType.uint32, data: Math.floor(normSize / components) },\n    { type: DataType.float, data: attributes.epsilon },\n  ];\n  if (bias) {\n    inputDependencies.push('type');\n  }\n  const hasMeanDataOutput = outputCount > 1;\n  const hasInvStdOutput = outputCount > 2;\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const variables = [\n      inputVariable('x', inputs[0].dataType, inputs[0].dims, components),\n      inputVariable('scale', scale.dataType, scale.dims, components),\n    ];\n    if (bias) {\n      variables.push(inputVariable('bias', bias.dataType, bias.dims, components));\n    }\n    variables.push(outputVariable('output', inputs[0].dataType, outputShape, components));\n    if (hasMeanDataOutput) {\n      variables.push(outputVariable('mean_data_output', DataType.float, meanInvStdDevDim));\n    }\n    if (hasInvStdOutput) {\n      variables.push(outputVariable('inv_std_output', DataType.float, meanInvStdDevDim));\n    }\n\n    const uniforms: UniformsArrayType = [\n      { name: 'norm_count', type: 'u32' },\n      { name: 'norm_size', type: 'f32' },\n      { name: 'norm_size_vectorized', type: 'u32' },\n      { name: 'epsilon', type: 'f32' },\n    ];\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.norm_count')}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${fillVector('f32', components)};\n    var mean_square_vector = ${fillVector('f32', components)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${castToF32(dataType, components, 'x[h + offset]')};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${sumVector('mean_vector', components)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${sumVector('mean_square_vector', components)} / uniforms.norm_size ${\n      simplified ? '' : '- mean * mean'\n    } + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${castToF32(dataType, components, 'x[j + offset]')};\n      let f32scale = ${castToF32(dataType, components, 'scale[j]')};\n      output[j + offset] = ${variables[0].type.value}((f32input ${simplified ? '' : '- mean'}) * inv_std_dev * f32scale\n        ${bias ? `+ ${castToF32(dataType, components, 'bias[j]')}` : ''}\n      );\n    }\n\n    ${hasMeanDataOutput ? 'mean_data_output[global_idx] = mean' : ''};\n    ${hasInvStdOutput ? 'inv_std_output[global_idx] = inv_std_dev' : ''};\n  }`;\n  };\n  const outputs = [{ dims: outputShape, dataType: inputs[0].dataType }];\n  if (hasMeanDataOutput) {\n    outputs.push({ dims: meanInvStdDevDim, dataType: DataType.float });\n  }\n  if (hasInvStdOutput) {\n    outputs.push({ dims: meanInvStdDevDim, dataType: DataType.float });\n  }\n\n  return {\n    name: 'LayerNormalization',\n    shaderCache: { hint: `${components};${outputCount};${simplified}`, inputDependencies },\n    getRunData: () => ({\n      outputs,\n      dispatchGroup: { x: Math.ceil(normCount / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const layerNorm = (context: ComputeContext, attributes: LayerNormAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createLayerNormProgramInfo(context.inputs, attributes, context.outputCount));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n} from './common';\n\n//  TODO support quantization bits not equal to 4\nexport interface MatMulNBitsAttributes extends AttributeWithCacheKey {\n  k: number;\n  n: number;\n  accuracyLevel: number;\n  bits: number;\n  blockSize: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: MatMulNBitsAttributes): void => {\n  if (inputs.length < 3 || inputs.length > 4) {\n    throw new Error('MatMulNBits requires 3 or 4 inputs');\n  }\n  const a = inputs[0];\n  const aRank = a.dims.length;\n  if (a.dims[aRank - 1] !== attributes.k) {\n    throw new Error('The last dim of input shape does not match the k value');\n  }\n  const nBlocksPerCol = Math.floor((attributes.k + attributes.blockSize - 1) / attributes.blockSize);\n  const blobSize = (attributes.blockSize / 8) * attributes.bits;\n  const b = inputs[1];\n  if (!ShapeUtil.areEqual(b.dims, [attributes.n, nBlocksPerCol, blobSize])) {\n    throw new Error('The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize');\n  }\n  const scales = inputs[2];\n  const scalesShape = scales.dims;\n  if (ShapeUtil.size(scalesShape) !== attributes.n * nBlocksPerCol) {\n    throw new Error('scales input size error.');\n  }\n  if (inputs.length === 4) {\n    const zeroPoints = inputs[3];\n    const zeroPointsShape = zeroPoints.dims;\n    const expectedZeroPointsSize =\n      attributes.bits > 4 ? attributes.n * nBlocksPerCol : attributes.n * Math.floor((nBlocksPerCol + 1) / 2);\n    if (ShapeUtil.size(zeroPointsShape) !== expectedZeroPointsSize) {\n      throw new Error('zeroPoints input size error.');\n    }\n  }\n};\n\nexport const createMatMulNBitsProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: MatMulNBitsAttributes,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const aRank = inputShape.length;\n  const dimAOuter = inputShape[aRank - 2];\n  const dimInner = attributes.k;\n  const dimBOuter = attributes.n;\n  const batchDims = inputShape.slice(0, aRank - 2);\n  const batchSize = ShapeUtil.size(batchDims);\n  const blobSize = inputs[1].dims[2];\n  const blobSizeInWords = blobSize / 4;\n  const dataType = inputs[0].dataType;\n  const aComponents = getMaxComponents(attributes.k);\n  const bComponents = getMaxComponents(blobSizeInWords);\n  const components = getMaxComponents(dimBOuter);\n  const outputShape = batchDims.concat([dimAOuter, dimBOuter]);\n  const outputNumber = dimAOuter > 1 && (dimBOuter / components) % 2 === 0 ? 2 : 1;\n  const dispatchSize = ShapeUtil.size(outputShape) / components / outputNumber;\n\n  const workgroupSize = 64;\n\n  const programUniforms: ProgramUniform[] = [];\n  const inputShapeTemp = [batchSize, dimAOuter, dimInner / aComponents];\n  const bShape = ShapeUtil.convertShape(inputs[1].dims).slice();\n  bShape.splice(-1, 1, blobSizeInWords / bComponents);\n  programUniforms.push(...createTensorShapeVariables(inputShapeTemp));\n  programUniforms.push(...createTensorShapeVariables(bShape));\n  programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n  if (inputs.length === 4) {\n    programUniforms.push(...createTensorShapeVariables(ShapeUtil.convertShape(inputs[3].dims)));\n  }\n  const outputShapeTemp = [batchSize, dimAOuter, dimBOuter / components];\n  programUniforms.push(...createTensorShapeVariables(outputShapeTemp));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const inputRank = inputShapeTemp.length;\n    const a = inputVariable('a', inputs[0].dataType, inputRank, aComponents);\n    const b = inputVariable('b', DataType.uint32, bShape.length, bComponents);\n    const scales = inputVariable('scales', inputs[2].dataType, inputs[2].dims.length);\n    const inputVariables = [a, b, scales];\n    const zeroPoints =\n      inputs.length === 4 ? inputVariable('zero_points', DataType.uint32, inputs[3].dims.length) : undefined;\n    if (zeroPoints) {\n      inputVariables.push(zeroPoints);\n    }\n    const outputRank = outputShapeTemp.length;\n    const output = outputVariable('output', inputs[0].dataType, outputRank, components);\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n    const qDqDataType = (() => {\n      switch (aComponents) {\n        case 1:\n          return `array<${dataType}, 8>`;\n        case 2:\n          return `mat4x2<${dataType}>`;\n        case 4:\n          return `mat2x4<${dataType}>`;\n        default:\n          throw new Error(`${aComponents}-component is not supported.`);\n      }\n    })();\n\n    const processOneWord = (): string => {\n      let calcStr = `\n          // reuse a data\n            var input_offset = ${a.indicesToOffset(`${a.type.indices}(batch, row, word_offset)`)};\n            var a_data: ${qDqDataType};\n            for (var j: u32 = 0; j < ${8 / aComponents}; j++) {\n              a_data[j] = ${a.getByOffset('input_offset')};\n              input_offset++;\n            }\n          `;\n      for (let c = 0; c < components * outputNumber; c++) {\n        calcStr += `\n            b_value = ${bComponents === 1 ? `b${c}_data` : `b${c}_data[i]`};\n            b_value_lower = unpack4xU8(b_value & b_mask);\n            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);\n            b_quantized_values = ${qDqDataType}(${Array.from(\n              { length: 4 },\n              (_, i) => `${dataType}(b_value_lower[${i}]), ${dataType}(b_value_upper[${i}])`,\n            ).join(', ')});\n            b_dequantized_values = ${(() => {\n              if (aComponents === 1) {\n                return `${qDqDataType}(${Array.from(\n                  { length: 8 },\n                  (_, i) => `(b_quantized_values[${i}] - ${zeroPoints ? `zero_point${c}` : 'zero_point'}) * scale${c}`,\n                ).join(', ')});`;\n              } else {\n                return `(b_quantized_values - ${qDqDataType}(${Array(8)\n                  .fill(`${zeroPoints ? `zero_point${c}` : 'zero_point'}`)\n                  .join(',')})) * scale${c};`;\n              }\n            })()};\n            workgroup_shared[local_id.x * ${outputNumber} + ${Math.floor(c / components)}]${components > 1 ? `[${c % components}]` : ''} += ${Array.from(\n              { length: 8 / aComponents },\n              (_, i) =>\n                `${\n                  aComponents === 1\n                    ? `a_data[${i}] * b_dequantized_values[${i}]`\n                    : `dot(a_data[${i}], b_dequantized_values[${i}])`\n                }`,\n            ).join(' + ')};\n          `;\n      }\n      return calcStr;\n    };\n    const prepareScaleAndZeroPoint = (): string => {\n      let calcStr = `\n            var col_index = col * ${components};\n            ${\n              zeroPoints\n                ? `\n            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;\n            var zero_point_byte_count: u32;\n            var zero_point_word_index: u32;\n            var zero_point_byte_offset: u32;\n            let zero_point_nibble_offset: u32 = block & 0x1u;\n            var zero_point_bits_offset: u32;\n            var zero_point_word: u32;`\n                : `\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${dataType}(${8.0});`\n            }\n            `;\n      for (let c = 0; c < components * outputNumber; c++) {\n        calcStr += `\n            let scale${c} = ${scales.getByOffset(`col_index * nBlocksPerCol + block`)};\n            ${\n              zeroPoints\n                ? `\n            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);\n            zero_point_word_index = zero_point_byte_count >> 0x2u;\n            zero_point_byte_offset = zero_point_byte_count & 0x3u;\n            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            zero_point_word = ${zeroPoints.getByOffset('zero_point_word_index')} >> zero_point_bits_offset;\n            let zero_point${c} = ${dataType}((zero_point_word) & 0xFu);`\n                : ''\n            }\n            col_index += 1;`;\n      }\n      return calcStr;\n    };\n    const prepareBData = (): string => {\n      let calcStr = `col_index = col * ${components};`;\n      for (let c = 0; c < components * outputNumber; c++) {\n        calcStr += `\n            let b${c}_data = ${b.getByIndices(`${b.type.indices}(col_index, block, word)`)};\n            col_index += 1;`;\n      }\n      calcStr += `\n            var b_value: u32;\n            let b_mask: u32 = 0x0F0F0F0Fu;\n            var b_value_lower: vec4<u32>;\n            var b_value_upper: vec4<u32>;\n            var b_quantized_values: ${qDqDataType};\n            var b_dequantized_values: ${qDqDataType};`;\n      return calcStr;\n    };\n    return `\n        var<workgroup> workgroup_shared: array<${output.type.value}, ${outputNumber * workgroupSize}>;\n        ${shaderHelper.declareVariables(...inputVariables, output)}\n        ${shaderHelper.mainStart([workgroupSize, 1, 1])}\n          let output_indices = ${output.offsetToIndices(`(global_idx / ${workgroupSize}) * ${outputNumber}`)};\n          let col = output_indices[2];\n          let row = output_indices[1];\n          let batch = output_indices[0];\n          let nBlocksPerCol = uniforms.b_shape[1];\n\n          for (var block = local_id.x; block < nBlocksPerCol; block += ${workgroupSize}) {\n            //process one block\n            var word_offset: u32 = block * ${attributes.blockSize / aComponents};\n            ${prepareScaleAndZeroPoint()}\n            for (var word: u32 = 0; word < ${blobSizeInWords}; word += ${bComponents}) {\n              ${prepareBData()}\n              for (var i: u32 = 0; i < ${bComponents}; i++) {\n                ${processOneWord()}\n                word_offset += ${8 / aComponents};\n              }\n            }\n          }\n          workgroupBarrier();\n\n          if (local_id.x < ${outputNumber}) {\n            var output_value: ${output.type.value} = ${output.type.value}(0);\n            var workgroup_shared_offset: u32 = local_id.x;\n            for (var b: u32 = 0u; b < ${workgroupSize}u; b++) {\n              output_value += workgroup_shared[workgroup_shared_offset];\n              workgroup_shared_offset += ${outputNumber};\n            }\n            ${output.setByIndices(`${output.type.indices}(batch, row, col + local_id.x)`, 'output_value')};\n          }\n        }`;\n  };\n  return {\n    name: 'MatMulNBits',\n    shaderCache: {\n      hint: `${attributes.blockSize};${attributes.bits};${aComponents};${bComponents};${components};${outputNumber};${workgroupSize}`,\n      inputDependencies: Array(inputs.length).fill('rank'),\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: dispatchSize },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\n// Currently, only support blockSize = 32.\nexport const createMatMulNBitsBlockSize32ProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: MatMulNBitsAttributes,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const aRank = inputShape.length;\n  const dimAOuter = inputShape[aRank - 2];\n  const dimInner = attributes.k;\n  const dimBOuter = attributes.n;\n  const batchDims = inputShape.slice(0, aRank - 2);\n  const batchSize = ShapeUtil.size(batchDims);\n  const blobSize = inputs[1].dims[2];\n  const blobSizeInWords = blobSize / 4;\n  const dataType = inputs[0].dataType;\n  const aComponents = getMaxComponents(attributes.k);\n  const bComponents = getMaxComponents(blobSizeInWords);\n  const outputShape = batchDims.concat([dimAOuter, dimBOuter]);\n\n  const workgroupSize = 128;\n  const workgroupY = dimBOuter % 8 === 0 ? 8 : dimBOuter % 4 === 0 ? 4 : 1;\n  const workgroupX = workgroupSize / workgroupY;\n  const tileSize = workgroupX * bComponents * 8; // each uint32 has 8 data.\n  const aLengthPerTile = tileSize / aComponents;\n  const blocksPerTile = tileSize / attributes.blockSize;\n  const dispatchSize = ShapeUtil.size(outputShape) / workgroupY;\n\n  const programUniforms: ProgramUniform[] = [];\n  const inputShapeTemp = [batchSize, dimAOuter, dimInner / aComponents];\n  const bShape = ShapeUtil.convertShape(inputs[1].dims).slice();\n  bShape.splice(-1, 1, blobSizeInWords / bComponents);\n  programUniforms.push(...createTensorShapeVariables(inputShapeTemp));\n  programUniforms.push(...createTensorShapeVariables(bShape));\n  programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n  if (inputs.length === 4) {\n    programUniforms.push(...createTensorShapeVariables(ShapeUtil.convertShape(inputs[3].dims)));\n  }\n  const outputShapeTemp = [batchSize, dimAOuter, dimBOuter];\n  programUniforms.push(...createTensorShapeVariables(outputShapeTemp));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const inputRank = inputShapeTemp.length;\n    const a = inputVariable('a', inputs[0].dataType, inputRank, aComponents);\n    const b = inputVariable('b', DataType.uint32, bShape.length, bComponents);\n    const scales = inputVariable('scales', inputs[2].dataType, inputs[2].dims.length);\n    const inputVariables = [a, b, scales];\n    const zeroPoints =\n      inputs.length === 4 ? inputVariable('zero_points', DataType.uint32, inputs[3].dims.length) : undefined;\n    if (zeroPoints) {\n      inputVariables.push(zeroPoints);\n    }\n    const outputRank = outputShapeTemp.length;\n    const output = outputVariable('output', inputs[0].dataType, outputRank);\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const readA = () => {\n      switch (aComponents) {\n        case 1:\n          return `\n          let a_data0 = vec4<${dataType}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);\n          let a_data1 = vec4<${dataType}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;\n        case 2:\n          return `\n          let a_data0 = vec4<${dataType}>(sub_a[word_offset], sub_a[word_offset + 1]);\n          let a_data1 = vec4<${dataType}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;\n        case 4:\n          return `\n          let a_data0 = sub_a[word_offset];\n          let a_data1 = sub_a[word_offset + 1];`;\n        default:\n          throw new Error(`${aComponents}-component is not supported.`);\n      }\n    };\n\n    return `\n        var<workgroup> sub_a: array<${a.type.value}, ${aLengthPerTile}>;\n        var<workgroup> inter_results: array<array<${output.type.value}, ${workgroupX}>, ${workgroupY}>;\n        ${shaderHelper.declareVariables(...inputVariables, output)}\n        ${shaderHelper.mainStart([workgroupX, workgroupY, 1])}\n          let output_indices = ${output.offsetToIndices(`workgroup_index * ${workgroupY}`)};\n          let col = output_indices[2];\n          let row = output_indices[1];\n          let batch = output_indices[0];\n          let n_blocks_per_col = uniforms.b_shape[1];\n          let num_tiles =  (n_blocks_per_col - 1) / ${blocksPerTile} + 1;\n\n          // Loop over shared dimension.\n          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {\n            let a_col_start = tile * ${aLengthPerTile};\n            // load one tile A data into shared memory.\n            for (var a_offset = local_idx; a_offset < ${aLengthPerTile}; a_offset += ${workgroupSize})\n            {\n              let a_col = a_col_start + a_offset;\n              if (a_col < uniforms.a_shape[2])\n              {\n                sub_a[a_offset] = ${a.getByIndices(`${a.type.indices}(batch, row, a_col)`)};\n              } else {\n                sub_a[a_offset] = ${a.type.value}(0);\n              }\n            }\n            workgroupBarrier();\n\n            // each thread process one block\n            let b_row = col + local_id.y;\n            let block = tile * ${blocksPerTile} + local_id.x;\n            ${\n              zeroPoints\n                ? `\n            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;\n            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);\n            let zero_point_word_index = zero_point_byte_count >> 0x2u;\n            let zero_point_byte_offset = zero_point_byte_count & 0x3u;\n            let zero_point_nibble_offset: u32 = block & 0x1u;\n            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            let zero_point_word = ${zeroPoints.getByOffset('zero_point_word_index')} >> zero_point_bits_offset;\n            let zero_point = ${dataType}((zero_point_word) & 0xFu);`\n                : `\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${dataType}(${8.0});`\n            }\n            let scale = ${scales.getByOffset(`b_row * n_blocks_per_col + block`)};\n            let b_data = ${b.getByIndices(`${b.type.indices}(b_row, block, 0)`)};\n            var word_offset = local_id.x * ${attributes.blockSize / aComponents};\n            for (var i: u32 = 0; i < ${bComponents}; i++) {\n              ${readA()}\n              let b_value = ${bComponents === 1 ? `b_data` : `b_data[i]`};\n              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);\n              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);\n              let b_quantized_values = mat2x4<${dataType}>(${Array.from(\n                { length: 4 },\n                (_, i) => `${dataType}(b_value_lower[${i}]), ${dataType}(b_value_upper[${i}])`,\n              ).join(', ')});\n              let b_dequantized_values = (b_quantized_values - mat2x4<${dataType}>(${Array(8).fill('zero_point').join(',')})) * scale;\n              inter_results[local_id.y][local_id.x] += ${Array.from(\n                { length: 2 },\n                (_, i) => `${`dot(a_data${i}, b_dequantized_values[${i}])`}`,\n              ).join(' + ')};\n              word_offset += ${8 / aComponents};\n            }\n            workgroupBarrier();\n          }\n\n          if (local_idx < ${workgroupY}) {\n            var output_value: ${output.type.value} = ${output.type.value}(0);\n            for (var b = 0u; b < ${workgroupX}; b++) {\n              output_value += inter_results[local_idx][b];\n            }\n            if (col + local_idx < uniforms.output_shape[2])\n            {\n              ${output.setByIndices(`${output.type.indices}(batch, row, col + local_idx)`, 'output_value')}\n            }\n          }\n        }`;\n  };\n  return {\n    name: 'BlockwiseMatMulNBits32',\n    shaderCache: {\n      hint: `${attributes.blockSize};${aComponents};${bComponents};${workgroupX};${workgroupY}`,\n      inputDependencies: Array(inputs.length).fill('rank'),\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: dispatchSize },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const matMulNBits = (context: ComputeContext, attributes: MatMulNBitsAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (\n    attributes.blockSize === 32 &&\n    context.adapterInfo.isVendor('intel') &&\n    context.adapterInfo.isArchitecture('gen-12lp')\n  ) {\n    context.compute(createMatMulNBitsBlockSize32ProgramInfo(context.inputs, attributes));\n  } else {\n    context.compute(createMatMulNBitsProgramInfo(context.inputs, attributes));\n  }\n};\n\nexport const parseMatMulNBitsAttributes = (attributes: Record<string, unknown>): MatMulNBitsAttributes =>\n  createAttributeWithCacheKey(attributes as Omit<MatMulNBitsAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformDataElementType,\n  UniformsArrayType,\n} from './common';\n\ninterface PadAttributes {\n  // 0-constant, 1-reflect, 2-edge, 3-wrap\n  readonly mode: number;\n  readonly value: number;\n  readonly pads: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('Too few inputs');\n  }\n  if (inputs[0].dataType !== DataType.float && inputs[0].dataType !== DataType.float16) {\n    throw new Error('Input type must be float or float16.');\n  }\n\n  if (inputs.length >= 2) {\n    let validPads = inputs[0].dims.length * 2 === inputs[1].dims[0];\n    if (inputs.length === 4) {\n      validPads = inputs[3].dims[0] * 2 === inputs[1].dims[0];\n    }\n    if (!validPads) {\n      throw new Error('The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].');\n    }\n  }\n};\n\nconst getPadConstant = (output: IndicesHelper, inputRank: number, padsLength: number): string => {\n  let block = '';\n  for (let i = inputRank - 1; i >= 0; --i) {\n    block += `\n            k = i32(${output.indicesGet('indices', i)}) - ${getElementAt('uniforms.pads', i, padsLength)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${getElementAt('uniforms.x_shape', i, inputRank)})) {\n              break;\n            }\n            offset += k * i32(${getElementAt('uniforms.x_strides', i, inputRank)});\n        `;\n  }\n\n  return `\n          value = ${output.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${block}\n            value = x[offset];\n          }\n      `;\n};\n\nconst getPadReflect = (output: IndicesHelper, inputRank: number, padsLength: number): string => {\n  let block = '';\n  for (let i = inputRank - 1; i >= 0; --i) {\n    block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${getElementAt('uniforms.pads', i, padsLength)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${getElementAt('uniforms.x_shape', i, inputRank)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${getElementAt('uniforms.x_shape', i, inputRank)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${getElementAt('uniforms.x_strides', i, inputRank)});\n            `;\n  }\n\n  return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n};\n\nconst getPadEdge = (output: IndicesHelper, inputRank: number, padsLength: number): string => {\n  let block = '';\n  for (let i = inputRank - 1; i >= 0; --i) {\n    block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${getElementAt('uniforms.pads', i, padsLength)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${getElementAt('uniforms.x_shape', i, inputRank)})) {\n                  k = i32(${getElementAt('uniforms.x_shape', i, inputRank)}) - 1;\n                }\n                offset += k * i32(${getElementAt('uniforms.x_strides', i, inputRank)});\n            `;\n  }\n\n  return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n};\n\nconst getPadWrap = (output: IndicesHelper, inputRank: number, padsLength: number): string => {\n  let block = '';\n  for (let i = inputRank - 1; i >= 0; --i) {\n    block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${getElementAt('uniforms.pads', i, padsLength)};\n                if (k < 0)  {\n                  k += i32(${getElementAt('uniforms.x_shape', i, inputRank)}]);\n                }\n                if (k >= i32(${getElementAt('uniforms.x_shape', i, inputRank)})) {\n                  k -= i32(${getElementAt('uniforms.x_shape', i, inputRank)});\n                }\n                offset += k * i32(${getElementAt('uniforms.x_strides', i, inputRank)});\n            `;\n  }\n\n  return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n};\n\nconst getPadSnippet = (output: IndicesHelper, inputRank: number, attributes: PadAttributes): string => {\n  switch (attributes.mode) {\n    case 0:\n      return getPadConstant(output, inputRank, attributes.pads.length);\n    case 1:\n      return getPadReflect(output, inputRank, attributes.pads.length);\n    case 2:\n      return getPadEdge(output, inputRank, attributes.pads.length);\n    case 3:\n      return getPadWrap(output, inputRank, attributes.pads.length);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst createPadProgramInfo = (inputs: readonly TensorView[], attributes: PadAttributes): ProgramInfo => {\n  const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), attributes.pads);\n  const inputDims = inputs[0].dims;\n  const outputSize = ShapeUtil.size(outputShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.int32, data: attributes.pads },\n  ];\n\n  const isValueFromInput = inputs.length >= 3 && inputs[2].data;\n  if (attributes.mode === 0) {\n    programUniforms.push({ type: isValueFromInput ? inputs[2].dataType : DataType.float, data: attributes.value });\n  }\n\n  programUniforms.push(...createTensorShapeVariables(inputs[0].dims, outputShape));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank'];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n    const input = inputVariable('x', inputs[0].dataType, inputDims.length);\n    const dataType = input.type.value;\n    const padSnippet = getPadSnippet(output, inputDims.length, attributes);\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'pads', type: 'i32', length: attributes.pads.length },\n    ];\n    if (attributes.mode === 0) {\n      uniforms.push({ name: 'constant_value', type: (isValueFromInput ? dataType : 'f32') as UniformDataElementType });\n    }\n\n    return `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(input, output)}\n            ${shaderHelper.mainStart()}\n            ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n            let indices = ${output.offsetToIndices('global_idx')};\n\n            var value = ${dataType}(0);\n            ${padSnippet}\n            output[global_idx] = value;\n        }`;\n  };\n\n  return {\n    name: 'Pad',\n    shaderCache: { hint: `${attributes.mode}${isValueFromInput}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nconst createPadAttributesFromInputs = (inputs: readonly TensorView[], attributes: PadAttributes): PadAttributes => {\n  if (inputs.length > 1) {\n    const bigInt64Pads = inputs[1].getBigInt64Array();\n    const value =\n      inputs.length >= 3 && inputs[2].data\n        ? inputs[2].dataType === DataType.float16\n          ? inputs[2].getUint16Array()[0]\n          : inputs[2].getFloat32Array()[0]\n        : 0.0;\n\n    const inputRank = inputs[0].dims.length;\n    const updatePads = new Int32Array(2 * inputRank).fill(0);\n    if (inputs.length >= 4) {\n      const axes = inputs[3].getBigInt64Array();\n      for (let i = 0; i < axes.length; i++) {\n        updatePads[Number(axes[i])] = Number(bigInt64Pads[i]);\n        updatePads[Number(axes[i]) + inputRank] = Number(bigInt64Pads[i + axes.length]);\n      }\n    } else {\n      bigInt64Pads.forEach((v, i) => (updatePads[Number(i)] = Number(v)));\n    }\n\n    const pads: number[] = [];\n    updatePads.forEach((v) => pads.push(v));\n\n    return { mode: attributes.mode, value, pads };\n  } else {\n    return attributes;\n  }\n};\n\nexport const pad = (context: ComputeContext, attributes: PadAttributes): void => {\n  validateInputs(context.inputs);\n  const updatedAttributes = createPadAttributesFromInputs(context.inputs, attributes);\n  context.compute(createPadProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { PoolConvUtil, ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformsArrayType,\n} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (env.webgpu.validateInputContent && (!inputs || inputs.length !== 1)) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes | MaxPoolAttributes>(\n  input: TensorView,\n  attributes: AttributeType,\n  isGlobalOperator: boolean,\n): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = input.dims.slice();\n  if (isChannelsLast) {\n    inputShapeAsChannelFirst.splice(1, 0, inputShapeAsChannelFirst.pop()!); // Move channel to the second position.\n  }\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n    isGlobalOperator,\n    inputShapeAsChannelFirst,\n    strides,\n    dilations,\n    kernelShape,\n    pads,\n    attributes.autoPad,\n  );\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, { kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey });\n  } else {\n    Object.assign(newAttributes, { kernelShape, strides, pads, cacheKey: attributes.cacheKey });\n  }\n  const outputShapeAsChannelLast = outputShapeAsChannelFirst.slice();\n  outputShapeAsChannelLast.push(outputShapeAsChannelLast.splice(1, 1)[0]);\n  return [newAttributes, isChannelsLast ? outputShapeAsChannelLast : outputShapeAsChannelFirst];\n};\n\nconst getUniformAndPadInfo = <AttributeType extends AveragePoolAttributes | MaxPoolAttributes>(\n  outputShape: readonly number[],\n  attributes: AttributeType,\n): [ProgramUniform[], UniformsArrayType, boolean, boolean, boolean] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const outputSize = ShapeUtil.size(outputShape);\n  const kernelSize = ShapeUtil.size(attributes.kernelShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: kernelSize },\n  ];\n  const uniforms: UniformsArrayType = [\n    { name: 'outputSize', type: 'u32' },\n    { name: 'kernelSize', type: 'u32' },\n  ];\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const pwStartEndNotZero = !!(pwStart + pwEnd);\n    programUniforms.push(\n      { type: DataType.uint32, data: kw },\n      { type: DataType.uint32, data: sw },\n      { type: DataType.uint32, data: pwStart },\n      { type: DataType.uint32, data: pwEnd },\n    );\n    uniforms.push(\n      { name: 'kw', type: 'u32' },\n      { name: 'sw', type: 'u32' },\n      { name: 'pwStart', type: 'u32' },\n      { name: 'pwEnd', type: 'u32' },\n    );\n\n    let phStartEndNotZero = false;\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      phStartEndNotZero = !!(phStart + phEnd);\n      programUniforms.push(\n        { type: DataType.uint32, data: kh },\n        { type: DataType.uint32, data: sh },\n        { type: DataType.uint32, data: phStart },\n        { type: DataType.uint32, data: phEnd },\n      );\n\n      uniforms.push(\n        { name: 'kh', type: 'u32' },\n        { name: 'sh', type: 'u32' },\n        { name: 'phStart', type: 'u32' },\n        { name: 'phEnd', type: 'u32' },\n      );\n    }\n    return [programUniforms, uniforms, true, pwStartEndNotZero, phStartEndNotZero];\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    programUniforms.push(\n      { type: DataType.uint32, data: kernelStrides },\n      { type: DataType.uint32, data: attributes.pads },\n      { type: DataType.uint32, data: attributes.strides },\n    );\n    uniforms.push(\n      { name: 'kernelStrides', type: 'u32', length: kernelStrides.length },\n      { name: 'pads', type: 'u32', length: attributes.pads.length },\n      { name: 'strides', type: 'u32', length: attributes.strides.length },\n    );\n\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    return [programUniforms, uniforms, !!hasPads, false, false];\n  }\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes | MaxPoolAttributes>(\n  shaderHelper: ShaderHelper,\n  x: IndicesHelper,\n  rank: number,\n  outputShapeRank: number,\n  attributes: AttributeType,\n  op1: string,\n  op2: string,\n  start: number,\n  uniforms: UniformsArrayType,\n  hasPads: boolean,\n  pwStartEndNotZero: boolean,\n  phStartEndNotZero: boolean,\n): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const dataType = x.type.value;\n  const output = outputVariable('output', x.type.tensor, outputShapeRank);\n\n  if (attributes.kernelShape.length <= 2) {\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    if (pwStartEndNotZero) {\n      codeW = `\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${dimIdxW}] = indices[${dimIdxW}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}]\n                      >= uniforms.x_shape[${dimIdxW}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${x.indicesToOffset('xIndices')}];\n                  ${op1}\n                }`;\n    } else {\n      codeW = `\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${dimIdxW}] = indices[${dimIdxW}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${x.indicesToOffset('xIndices')}];\n                  ${op1}\n                }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      if (phStartEndNotZero) {\n        codeH = `\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= uniforms.x_shape[${dimIdxH}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * uniforms.sh - uniforms.phStart + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(x, output)}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n\n              let indices = ${output.offsetToIndices('global_idx')};\n              var xIndices = ${output.offsetToIndices('global_idx')};\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const stridesRank = attributes.kernelShape.length;\n    const padsRank = attributes.pads.length;\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${x.indicesToOffset('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${x.indicesToOffset('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(x, output)}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n              let indices = ${output.offsetToIndices('global_idx')};\n              var xIndices = ${output.offsetToIndices('global_idx')};\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / ${getElementAt('uniforms.kernelStrides', 'j', stridesRank)};\n                  offset -= offsets[j] * ${getElementAt('uniforms.kernelStrides', 'j', stridesRank)};\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * ${getElementAt(\n                    'uniforms.strides',\n                    `j - ${rank - stridesRank}u`,\n                    stridesRank,\n                  )}\n                    + offsets[j - ${rank - stridesRank}u] - ${getElementAt('uniforms.pads', 'j - 2u', padsRank)};\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC' | 'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst createShaderKeyFromAttributes = (attributes: PoolCommonAttributes): string =>\n  `${attributes.format};${attributes.ceilMode};${attributes.autoPad};${attributes.kernelShape.length}`;\n\nconst createAveragePoolShaderKeyFromAttributes = (attributes: AveragePoolAttributes): string =>\n  `${createShaderKeyFromAttributes(attributes)};${attributes.countIncludePad}`;\n\nconst createMaxPoolShaderKeyFromAttributes = (attributes: MaxPoolAttributes): string =>\n  `${createShaderKeyFromAttributes(attributes)};${attributes.storageOrder};${attributes.dilations}`;\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number],\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo = (\n  name: string,\n  input: TensorView,\n  isGlobalOperator: boolean,\n  attributes: AveragePoolAttributes,\n): ProgramInfo => {\n  const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(\n    input,\n    attributes,\n    isGlobalOperator,\n  );\n  const x = inputVariable('x', input.dataType, input.dims.length);\n  const dataType = x.type.value;\n\n  const op1 = 'value += x_val;';\n  let op2 = '';\n  if (adjustedAttributes.countIncludePad) {\n    op2 += `value /= ${dataType}(uniforms.kernelSize);`;\n  } else {\n    op2 += `value /= ${dataType}(i32(uniforms.kernelSize) - pad);`;\n  }\n  const [programUniforms, uniforms, hasPads, pwStartEndNotZero, phStartEndNotZero] = getUniformAndPadInfo(\n    outputShape,\n    adjustedAttributes,\n  );\n  programUniforms.push(...createTensorShapeVariables(input.dims, outputShape));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank'];\n  return {\n    name,\n    shaderCache: {\n      hint: `${attributes.cacheKey};${hasPads};${pwStartEndNotZero};${phStartEndNotZero}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: input.dataType }],\n      dispatchGroup: { x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource: (shaderHelper) =>\n      generatePoolingCode(\n        shaderHelper,\n        x,\n        input.dims.length,\n        outputShape.length,\n        adjustedAttributes,\n        op1,\n        op2,\n        0.0,\n        uniforms,\n        hasPads,\n        pwStartEndNotZero,\n        phStartEndNotZero,\n      ),\n  };\n};\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n  const averagePoolAttributes = { countIncludePad, ...attr, cacheKey: '' };\n  return { ...averagePoolAttributes, cacheKey: createAveragePoolShaderKeyFromAttributes(averagePoolAttributes) };\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createAveragePoolProgramInfo('AveragePool', context.inputs[0], false, attributes));\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return { format, ...globalPoolAttributes, cacheKey: format };\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createAveragePoolProgramInfo('GlobalAveragePool', context.inputs[0], true, attributes));\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo = (\n  name: string,\n  input: TensorView,\n  isGlobalOperator: boolean,\n  attributes: MaxPoolAttributes,\n): ProgramInfo => {\n  const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(\n    input,\n    attributes,\n    isGlobalOperator,\n  );\n  const op1 = `\n      value = max(x_val, value);\n    `;\n  const op2 = '';\n  const x = inputVariable('x', input.dataType, input.dims.length);\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank'];\n  const [programUniforms, uniforms, hasPads, pwStartEndNotZero, phStartEndNotZero] = getUniformAndPadInfo(\n    outputShape,\n    adjustedAttributes,\n  );\n  programUniforms.push(...createTensorShapeVariables(input.dims, outputShape));\n  return {\n    name,\n    shaderCache: {\n      hint: `${attributes.cacheKey};${hasPads};${pwStartEndNotZero};${phStartEndNotZero}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: input.dataType }],\n      dispatchGroup: { x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource: (shaderHelper) =>\n      generatePoolingCode(\n        shaderHelper,\n        x,\n        input.dims.length,\n        outputShape.length,\n        adjustedAttributes,\n        op1,\n        op2,\n        input.dataType === DataType.float16 ? -65504 : -1e5,\n        uniforms,\n        hasPads,\n        pwStartEndNotZero,\n        phStartEndNotZero,\n      ),\n  };\n};\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createMaxPoolProgramInfo('MaxPool', context.inputs[0], false, attributes));\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n  const maxPoolAttributes = { storageOrder, dilations, ...attr, cacheKey: '' };\n  return { ...maxPoolAttributes, cacheKey: createMaxPoolShaderKeyFromAttributes(maxPoolAttributes) };\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return { format, ...globalPoolAttributes, cacheKey: format };\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createMaxPoolProgramInfo('GlobalMaxPool', context.inputs[0], true, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformsArrayType,\n} from './common';\n\nexport interface DequantizeLinerAttributes extends AttributeWithCacheKey {\n  axis: number;\n  blockSize: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: DequantizeLinerAttributes): void => {\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('DequantizeLinear requires 2 or 3 inputs.');\n  }\n  if (inputs.length === 3 && inputs[1].dims === inputs[2].dims) {\n    throw new Error('x-scale and x-zero-point must have the same shape.');\n  }\n  if (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType) {\n    throw new Error('x and x-zero-point must have the same data type.');\n  }\n  if (inputs[0].dataType === DataType.int32 && inputs.length > 2) {\n    throw new Error('In the case of dequantizing int32 there is no zero point.');\n  }\n  if (inputs[1].dims.length !== 0 && inputs[1].dims.length !== 1 && inputs[1].dims.length !== inputs[0].dims.length) {\n    throw new Error('scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.');\n  }\n  // validate scale and zero-point input shapes\n  if (inputs.length > 2) {\n    // zero-point input type should be the same as input data type.\n    if (inputs[0].dataType !== inputs[2].dataType) {\n      throw new Error('x and x-zero-point must have the same data type.');\n    }\n    // Scale and zero-point inputs must have the same shape\n    if (inputs[1].dims.length !== inputs[2].dims.length) {\n      throw new Error('scale and zero-point inputs must have the same rank.');\n    }\n    if (!inputs[1].dims.map((d, i) => d === inputs[2].dims[i]).reduce((a, b) => a && b, true)) {\n      throw new Error('scale and zero-point inputs must have the same shape.');\n    }\n  }\n  // Validate blockSize\n  if (attributes.blockSize > 0) {\n    // Block qunatization\n    if (inputs[1].dims.length === 0 || (inputs[1].dims.length === 1 && inputs[1].dims[0] === 1)) {\n      throw new Error('blockSize must be set only for block quantization.');\n    }\n    if (\n      !inputs[1].dims.map((d, i) => i === attributes.axis || d === inputs[0].dims[i]).reduce((a, b) => a && b, true)\n    ) {\n      throw new Error('For block qunatization, scale input shape to match the input shape except for the axis');\n    }\n    // Scale input rank should be same as the input rank\n    if (inputs[1].dims.length !== inputs[0].dims.length) {\n      throw new Error('For block qunatization the scale input rank must be the same as the x rank.');\n    }\n    const dI = inputs[0].dims[attributes.axis];\n    const si = inputs[1].dims[attributes.axis];\n    if (attributes.blockSize < Math.ceil(dI / si) || attributes.blockSize > Math.ceil(dI / (si - 1) - 1)) {\n      throw new Error('blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].');\n    }\n  }\n};\n\nconst createDequantizeLinearProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: DequantizeLinerAttributes,\n): ProgramInfo => {\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n  const inputType = inputs[0].dataType;\n  const isSigned = inputType === DataType.int8;\n  const outputShape = inputs[0].dims; // output shape is same as the input shape\n  const dataType = inputs[1].dataType; // output type is same as the the scale input type\n  const outputSize = ShapeUtil.size(outputShape);\n  const isPacked = inputType === DataType.int8 || inputType === DataType.uint8;\n  const inputShape = isPacked ? [Math.ceil(ShapeUtil.size(inputs[0].dims) / 4)] : inputs[0].dims;\n  const scaleShape = inputs[1].dims;\n  const zeroPointInput = inputs.length > 2 ? inputs[2] : undefined;\n  const zeroPointShape = zeroPointInput\n    ? isPacked\n      ? [Math.ceil(ShapeUtil.size(zeroPointInput.dims) / 4)]\n      : zeroPointInput.dims\n    : undefined;\n  // Scales input is a scaler for per-tensor/per-layer quantization, 1-D tensor for per-axis quantization\n  // or tensor with same rank as input for blocked quantization.\n  const perLayerQuantization = scaleShape.length === 0 || (scaleShape.length === 1 && scaleShape[0] === 1);\n  const perAxisQuantization = perLayerQuantization === false && scaleShape.length === 1;\n  // Left unnecessary commented-out assignment for documentation\n  // const blockQuantization = perLayerQuantization === false && perAxisQuantization === false;\n  const maxComponents = getMaxComponents(outputSize);\n  const useComponents = perLayerQuantization && (!isPacked || maxComponents === 4);\n  const components = useComponents ? maxComponents : 1;\n  const inputComponent = useComponents && !isPacked ? maxComponents : 1;\n  const input = inputVariable('input', isPacked ? DataType.uint32 : inputType, inputShape.length, inputComponent);\n  const scale = inputVariable('scale', dataType, scaleShape.length);\n  const zeroPoint = zeroPointInput\n    ? inputVariable('zero_point', isPacked ? DataType.uint32 : inputType, zeroPointShape!.length)\n    : undefined;\n  const output = outputVariable('output', dataType, outputShape.length, components);\n  const inputVariables = [input, scale];\n  if (zeroPoint) {\n    inputVariables.push(zeroPoint);\n  }\n  const inputShapes = [inputShape, scaleShape];\n  if (zeroPointInput) {\n    inputShapes.push(zeroPointShape!);\n  }\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize / components },\n    { type: DataType.uint32, data: axis },\n    { type: DataType.uint32, data: attributes.blockSize },\n    ...createTensorShapeVariables(...inputShapes, outputShape),\n  ];\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'axis', type: 'u32' },\n      { name: 'block_size', type: 'u32' },\n    ];\n    return `\n      ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n      ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n          let output_indices = ${output.offsetToIndices('global_idx')};\n\n          // Set input x\n          ${(() => {\n            if (isPacked) {\n              return `\n            let input = ${input.getByOffset('global_idx / 4')};\n            let x_vec = ${isSigned ? 'unpack4xI8(input)' : 'unpack4xU8(input)'};\n            let x_value = ${components === 1 ? 'x_vec[global_idx % 4]' : 'x_vec'};`;\n            } else {\n              return `let x_value = ${input.getByOffset('global_idx')};`;\n            }\n          })()};\n\n          // Set scale input\n          ${(() => {\n            if (perLayerQuantization) {\n              // scale input is a scalar ()\n              return `let scale_value= ${scale.getByOffset('0')}`;\n            } else if (perAxisQuantization) {\n              // scale input is a 1D tensor\n              return `\n            let scale_index = ${output.indicesGet('output_indices', 'uniforms.axis')};\n            let scale_value= ${scale.getByOffset('scale_index')};`;\n            } else {\n              // Block quantization. Scale input rank is same as input/output rank.\n              return `\n            var scale_indices: ${scale.type.indices} = output_indices;\n            let index = ${scale.indicesGet('scale_indices', 'uniforms.axis')} / uniforms.block_size;\n            ${scale.indicesSet('scale_indices', 'uniforms.axis', 'index')};\n            let scale_value= ${scale.getByIndices('scale_indices')};`;\n            }\n          })()};\n\n          // Set zero-point input\n          ${(() => {\n            if (zeroPoint) {\n              if (perLayerQuantization) {\n                // zero-point input is a scalar\n                if (isPacked) {\n                  return `\n                let zero_point_input = ${zeroPoint.getByOffset('0')};\n                let zero_point_vec =  ${isSigned ? 'unpack4xI8(zero_point_input)' : 'unpack4xU8(zero_point_input)'};\n                let zero_point_value= zero_point_vec[0]`;\n                } else {\n                  return `let zero_point_value = ${zeroPoint.getByOffset('0')}`;\n                }\n              } else if (perAxisQuantization) {\n                // zero-point input is a 1D tensor\n                if (isPacked) {\n                  return `\n                let zero_point_index = ${output.indicesGet('output_indices', 'uniforms.axis')};\n                let zero_point_input = ${zeroPoint.getByOffset('zero_point_index / 4')};\n                let zero_point_vec =  ${isSigned ? 'unpack4xI8(zero_point_input)' : 'unpack4xU8(zero_point_input)'};\n                let zero_point_value = zero_point_vec[zero_point_index % 4]`;\n                } else {\n                  return `\n                let zero_point_index = ${output.indicesGet('output_indices', 'uniforms.axis')};\n                let zero_point_value = ${zeroPoint.getByOffset('zero_point_index')};`;\n                }\n              } else {\n                // BlockedQuantization. The zero-point input shape is same as the input shape except along axis.\n                if (isPacked) {\n                  return `\n                let zero_point_offset = ${scale.indicesToOffset('scale_indices')};\n                let zero_point_input = ${zeroPoint.getByOffset('zero_point_offset / 4')};\n                let zero_point_vec = ${isSigned ? 'unpack4xI8(zero_point_input)' : 'unpack4xU8(zero_point_input)'};\n                let zero_point_value = zero_point_vec[zero_point_offset % 4];`;\n                } else {\n                  return `let zero_point_value = ${zeroPoint.getByIndices('scale_indices')};`;\n                }\n              }\n            } else {\n              return `let zero_point_value = ${isPacked ? (isSigned ? 'i32' : 'u32') : input.type.value}(0);`;\n            }\n          })()};\n      // Compute and write output\n      ${output.setByOffset('global_idx', `${output.type.value}(x_value - zero_point_value) * scale_value`)};\n      }`;\n  };\n  return {\n    name: 'DequantizeLinear',\n    shaderCache: {\n      hint: attributes.cacheKey,\n      inputDependencies: zeroPoint ? ['rank', 'rank', 'rank'] : ['rank', 'rank'],\n    },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / components / 64), y: 1, z: 1 },\n      programUniforms,\n    }),\n  };\n};\n\nexport const dequantizeLinear = (context: ComputeContext, attributes: DequantizeLinerAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  context.compute(createDequantizeLinearProgramInfo(context.inputs, attributes));\n};\n\nexport const parseDequantizeLinearAttributes = (attributes: Record<string, unknown>): DequantizeLinerAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number, blockSize: attributes.blockSize as number });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { DataType } from '../../../wasm-common';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  outputVariable,\n  ShaderHelper,\n  UniformDataElementType,\n  UniformsArrayType,\n} from './common';\n\nconst validateInputsContent = (start: number, limit: number, delta: number): void => {\n  const sameStartLimit = start === limit;\n  const increasingRangeNegativeStep = start < limit && delta < 0;\n  const decreasingRangePositiveStep = start > limit && delta > 0;\n\n  if (sameStartLimit || increasingRangeNegativeStep || decreasingRangePositiveStep) {\n    throw new Error(\"Range these inputs' contents are invalid.\");\n  }\n};\n\nconst createRangeProgramInfo = (start: number, limit: number, delta: number, dataType: DataType): ProgramInfo => {\n  const numElements = Math.abs(Math.ceil((limit - start) / delta));\n  const outputShape: number[] = [numElements];\n  const outputSize = numElements;\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: dataType, data: start },\n    { type: dataType, data: delta },\n    ...createTensorShapeVariables(outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('output', dataType, outputShape.length);\n    const wgslType = output.type.value;\n    const uniforms: UniformsArrayType = [\n      { name: 'outputSize', type: 'u32' },\n      { name: 'start', type: wgslType as UniformDataElementType },\n      { name: 'delta', type: wgslType as UniformDataElementType },\n    ];\n    return `\n        ${shaderHelper.registerUniforms(uniforms).declareVariables(output)}\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n        output[global_idx] = uniforms.start + ${wgslType}(global_idx) * uniforms.delta;\n      }`;\n  };\n\n  return {\n    name: 'Range',\n    shaderCache: { hint: `${dataType}` },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const range = (context: ComputeContext): void => {\n  let start = 0;\n  let limit = 0;\n  let delta = 0;\n  if (context.inputs[0].dataType === DataType.int32) {\n    start = context.inputs[0].getInt32Array()[0];\n    limit = context.inputs[1].getInt32Array()[0];\n    delta = context.inputs[2].getInt32Array()[0];\n  } else if (context.inputs[0].dataType === DataType.float) {\n    start = context.inputs[0].getFloat32Array()[0];\n    limit = context.inputs[1].getFloat32Array()[0];\n    delta = context.inputs[2].getFloat32Array()[0];\n  }\n  if (env.webgpu.validateInputContent) {\n    validateInputsContent(start, limit, delta);\n  }\n\n  context.compute(createRangeProgramInfo(start, limit, delta, context.inputs[0].dataType), { inputs: [] });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n} from './common';\n\ntype CoordinateTransformMode =\n  | 'half_pixel'\n  | 'asymmetric'\n  | 'pytorch_half_pixel'\n  | 'tf_half_pixel_for_nn'\n  | 'align_corners'\n  | 'tf_crop_and_resize'\n  | 'half_pixel_symmetric';\n\ntype KeepAspectRatioPolicy = 'stretch' | 'not_smaller' | 'not_larger';\n\ntype Mode = 'nearest' | 'linear' | 'cubic';\n\ntype NearestMode = 'round_prefer_floor' | 'round_prefer_ceil' | 'floor' | 'ceil' | 'simple';\n\nexport interface ResizeAttributes extends AttributeWithCacheKey {\n  antialias: number;\n  axes: number[];\n  coordinateTransformMode: CoordinateTransformMode;\n  cubicCoeffA: number;\n  excludeOutside: boolean;\n  extrapolationValue: number;\n  keepAspectRatioPolicy: KeepAspectRatioPolicy;\n  mode: Mode;\n  nearestMode: NearestMode;\n}\n\nconst validateScales = (scales: number[], attributes: ResizeAttributes): void => {\n  scales.every(\n    (value) =>\n      value > 0 ||\n      (() => {\n        throw new Error('Resize requires scales input values to be positive');\n      }),\n  );\n  // Check scales dims based on mode: LINEAR, CUBIC\n  if (scales.length > 0) {\n    if (attributes.mode === 'linear') {\n      if (\n        !(\n          scales.length === 2 ||\n          scales.length === 3 ||\n          (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\n          (scales.length === 4 && scales[0] === 1 && scales[3] === 1) ||\n          (scales.length === 5 && scales[0] === 1 && scales[1] === 1)\n        )\n      ) {\n        throw new Error(\n          `For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`,\n        );\n      }\n    } else if (attributes.mode === 'cubic') {\n      if (\n        !(\n          scales.length === 2 ||\n          (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\n          (scales.length === 4 && scales[0] === 1 && scales[3] === 1)\n        )\n      ) {\n        throw new Error('Resize requires scales input size to be 2 or 4 for cubic mode');\n      }\n    }\n  }\n};\n\nconst updateScales = (scales: readonly number[], axes: readonly number[], rank: number): number[] => {\n  axes.every(\n    (value) =>\n      (value >= 0 && value < rank) ||\n      (() => {\n        throw new Error('Resize requires axes input values to be positive and less than rank');\n      }),\n  );\n  const newScales = new Array(rank).fill(1.0);\n  axes.forEach((value, index) => (newScales[value] = scales[index]));\n  return newScales;\n};\n\nconst validateInputs = (\n  inputs: readonly TensorView[],\n  attributes: ResizeAttributes,\n  opsetVersion: number,\n  scales: number[],\n  sizes: number[],\n  roi: number[],\n): void => {\n  const [roiInputIndex, scalesInputIndex, sizesInputIndex] =\n    opsetVersion > 10 ? [1, 2, 3] : [-1, inputs.length > 1 ? 1 : -1, -1];\n  const rank = inputs[0].dims.length;\n  if (roiInputIndex > 0 && inputs.length > roiInputIndex && inputs[roiInputIndex].dims.length > 0) {\n    inputs[roiInputIndex].getFloat32Array().forEach((value) => roi.push(value));\n  } else if (attributes.coordinateTransformMode === 'tf_crop_and_resize') {\n    throw new Error('Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize');\n  }\n\n  if (\n    scalesInputIndex > 0 &&\n    inputs.length > scalesInputIndex &&\n    inputs[scalesInputIndex].dims.length === 1 &&\n    inputs[scalesInputIndex].dims[0] > 0\n  ) {\n    inputs[scalesInputIndex].getFloat32Array().forEach((value) => scales.push(value));\n    if (\n      scales.length !== 0 &&\n      scales.length !== rank &&\n      opsetVersion >= 18 &&\n      scales.length !== attributes.axes.length\n    ) {\n      throw new Error('Resize requires scales input size to be same as input rank or axes size for opset 18 and up');\n    }\n    validateScales(scales, attributes);\n    if (attributes.axes.length > 0) {\n      updateScales(scales, attributes.axes, rank).forEach((value, index) => (scales[index] = value));\n    }\n  }\n  if (\n    sizesInputIndex > 0 &&\n    inputs.length > sizesInputIndex &&\n    inputs[sizesInputIndex].dims.length === 1 &&\n    inputs[sizesInputIndex].dims[0] > 0\n  ) {\n    inputs[sizesInputIndex].getBigInt64Array().forEach((value) => sizes.push(Number(value)));\n    if (sizes.length !== 0 && sizes.length !== rank && opsetVersion >= 18 && sizes.length !== attributes.axes.length) {\n      throw new Error('Resize requires sizes input size to be same as input rank or axes size for opset 18 and up');\n    }\n  }\n\n  if (attributes.axes.length > 0) {\n    if (scales.length !== 0 && scales.length !== attributes.axes.length) {\n      throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');\n    }\n    if (sizes.length !== 0 && sizes.length !== attributes.axes.length) {\n      throw new Error('Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified');\n    }\n  }\n  if (typeof scales !== 'undefined' && typeof sizes !== 'undefined' && scales.length > 0 && sizes.length > rank) {\n    throw new Error('Resize requires only of scales or sizes to be specified');\n  }\n};\n\nconst getOriginalCoordinateFromResizedCoordinate = (\n  coordinateTransferMode: CoordinateTransformMode,\n  dType: string,\n): string =>\n  `fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${dType} { ` +\n  (() => {\n    switch (coordinateTransferMode) {\n      case 'asymmetric':\n        return `return ${dType}(xResized) / ${dType}(xScale);`;\n      case 'pytorch_half_pixel':\n        return `if (lengthResized > 1) {\n                    return (${dType}(xResized) + 0.5) / ${dType}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;\n      case 'tf_half_pixel_for_nn':\n        return `return (${dType}(xResized) + 0.5) / ${dType}(xScale);`;\n      case 'align_corners':\n        return `if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${dType}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${dType}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${dType}(lengthResized - 1);\n                    return whole + fract;\n                  }`;\n      case 'tf_crop_and_resize':\n        return `if (lengthResized > 1) {\n                    return ${dType}(roiStart) * ${dType}(lengthOriginal - 1) +\n                        (${dType}(xResized) * ${dType}(roiEnd - roiStart) * ${dType}(lengthOriginal - 1)) /\n                        ${dType}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${dType}(roiStart + roiEnd) * ${dType}(lengthOriginal - 1);\n                  }`;\n      case 'half_pixel_symmetric':\n        return `const outputWidth = ${dType}xScale * ${dType}(lengthResized);\n                  const adjustment = ${dType}(lengthResized) / outputWidth;\n                  const center = ${dType}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${dType}(xResized) + 0.5) / ${dType}(xScale)) - 0.5;`;\n      case 'half_pixel':\n        return `return ((${dType}(xResized) + 0.5) / ${dType}(xScale)) - 0.5;`;\n      default:\n        throw new Error(`Coordinate transform mode ${coordinateTransferMode} is not supported`);\n    }\n  })() +\n  '}';\n\nconst getNearestPixelFromOriginal = (nearestMode: NearestMode, opsetVersion: number, dType: string): string =>\n  `fn getNearestPixelFromOriginal(xOriginal: ${dType}, isDownSample: bool) -> ${dType} {` +\n  (() => {\n    switch (nearestMode) {\n      case 'round_prefer_ceil':\n        return 'if (fract(xOriginal) == 0.5) { \\\n            return ceil(xOriginal); \\\n          } else { \\\n            return round(xOriginal); \\\n          }';\n      case 'floor':\n        return 'return floor(xOriginal);';\n      case 'ceil':\n        return 'return ceil(xOriginal);';\n      case 'round_prefer_floor':\n        return 'if (fract(xOriginal) == 0.5) { \\\n                    return floor(xOriginal); \\\n                  } else { \\\n                    return round(xOriginal); \\\n                  }';\n      case 'simple':\n      default:\n        if (opsetVersion < 11) {\n          return 'if (isDownSample) \\\n                    { \\\n                      return ceil(xOriginal); \\\n                    } else { \\\n                      return xOriginal; \\\n                    }';\n        }\n        throw new Error(`Nearest mode ${nearestMode} is not supported`);\n    }\n  })() +\n  '}';\n\nconst updateRoI = (roi: readonly number[], axes: readonly number[], rank: number): number[] => {\n  const roiTmp = new Array(rank).fill(0).concat(new Array(rank).fill(1));\n  const roiLocal = roi.length === 0 ? roiTmp : roi.slice();\n  if (axes.length > 0) {\n    axes.forEach((v, i) => {\n      roiTmp[v] = roiLocal[i];\n      roiTmp[i + rank] = roiLocal[axes.length + i];\n    });\n    return roiTmp;\n  }\n  return roiLocal;\n};\n\nconst initOutputShape = (\n  inputShape: readonly number[],\n  scales: readonly number[],\n  sizes: readonly number[],\n  axes: readonly number[],\n): number[] => {\n  let outputShape: number[] = [];\n  if (sizes.length > 0) {\n    if (axes.length > 0) {\n      inputShape.forEach((v) => outputShape.push(v));\n      if (Math.max(...axes) > inputShape.length) {\n        throw new Error('axes is out of bound');\n      }\n      axes.forEach((v, i) => (outputShape[v] = sizes[i]));\n    } else {\n      sizes.forEach((v) => outputShape.push(v));\n    }\n  } else {\n    if (scales.length === 0) {\n      throw new Error('Resize requires either scales or sizes.');\n    } else {\n      outputShape = inputShape.map((value, index) => Math.round(value * scales[index]));\n    }\n  }\n  return outputShape;\n};\n\nconst adjustOutputShape = (inputShape: readonly number[], scales: number[], attributes: ResizeAttributes) => {\n  const scaleInPolicy = (() => {\n    switch (attributes.keepAspectRatioPolicy) {\n      case 'not_larger':\n        return attributes.axes.length > 0\n          ? Math.min(...attributes.axes.map((i) => scales[i]), Number.MAX_VALUE)\n          : Math.min(...scales, Number.MAX_VALUE);\n      case 'not_smaller':\n        return attributes.axes.length > 0\n          ? Math.max(...attributes.axes.map((i) => scales[i]), Number.MIN_VALUE)\n          : Math.max(...scales, Number.MIN_VALUE);\n      default:\n        throw new Error(`Keep aspect ratio policy ${attributes.keepAspectRatioPolicy} is not supported`);\n    }\n  })();\n  scales.fill(1.0, 0, scales.length);\n  const adjustedOutputShape = inputShape.slice();\n  if (attributes.axes.length > 0) {\n    attributes.axes.forEach((v) => (scales[v] = scaleInPolicy));\n    attributes.axes.forEach((v) => (adjustedOutputShape[v] = Math.round(inputShape[v] * scales[v])));\n  } else {\n    scales.fill(scaleInPolicy, 0, scales.length);\n    adjustedOutputShape.forEach((v, i) => (adjustedOutputShape[i] = Math.round(v * scales[i])));\n  }\n  return adjustedOutputShape;\n};\n\nconst calculateOriginalIndicesFromOutputIndices = (\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  outputShape: readonly number[],\n  scalesLength: number,\n  roiLength: number,\n): string => `\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${output.type.indices}) -> array<${\n      output.type.value\n    }, ${outputShape.length}> {\n      var original_indices: array<${output.type.value}, ${outputShape.length}>;\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n        var output_index = ${output.indicesGet('output_indices', 'i')};\n        var scale = ${getElementAt('uniforms.scales', 'i', scalesLength)};\n        var roi_low = ${getElementAt('uniforms.roi', 'i', roiLength)};\n        var roi_hi = ${getElementAt('uniforms.roi', `i + ${inputShape.length}`, roiLength)};\n        if (scale == 1.0) {\n          original_indices[i] = ${output.type.value}(output_index);\n        } else {\n          var input_shape_i = ${getElementAt('uniforms.input_shape', 'i', inputShape.length)};\n          var output_shape_i = ${getElementAt('uniforms.output_shape', 'i', outputShape.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`;\n\nconst calculateInputIndicesFromOutputIndices = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  outputShape: readonly number[],\n  scalesLength: number,\n  roiLength: number,\n  useExtrapolation: boolean,\n): string => `\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${output.type.indices}) -> ${input.type.indices} {\n      var input_indices: ${input.type.indices};\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n        var output_index = ${output.indicesGet('output_indices', 'i')};\n        var input_index: u32;\n        var scale = ${getElementAt('uniforms.scales', 'i', scalesLength)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${getElementAt('uniforms.roi', 'i', roiLength)};\n          var roi_hi = ${getElementAt('uniforms.roi', `i + ${inputShape.length}`, roiLength)};\n          var input_shape_i = ${getElementAt('uniforms.input_shape', 'i', inputShape.length)};\n          var output_shape_i = ${getElementAt('uniforms.output_shape', 'i', outputShape.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${useExtrapolation} || (original_idx >= 0 && original_idx < ${output.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${output.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${input.indicesSet('input_indices', 'i', ' input_index')}\n      }\n      return input_indices;\n    }`;\nconst checkInputIndices = (input: IndicesHelper, inputShape: readonly number[]): string => `\n    fn checkInputIndices(input_indices: ${input.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${inputShape.length}; i++) {\n        var input_index = ${input.indicesGet('input_indices', 'i')};\n        if (input_index < 0 || input_index >= ${getElementAt('uniforms.input_shape', 'i', inputShape.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`;\n\nconst setChannelAndBatchIndices = (\n  input: IndicesHelper,\n  channelIdx: number,\n  batchIdx: number,\n  spacialDims: number,\n): string =>\n  input.rank > spacialDims\n    ? `\n    ${input.indicesSet('input_indices', channelIdx, 'channel')};\n    ${input.indicesSet('input_indices', batchIdx, 'batch')};\n`\n    : '';\n\nconst bilinearInterpolation = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  useExtrapolation: boolean,\n  extrapolationValue: number,\n): string => {\n  const isNchw = true;\n  const [batchIdx, heightIdx, widthIdx, channelIdx] =\n    inputShape.length === 2 ? [-1, 0, 1, -1] : isNchw ? [0, 2, 3, 1] : [0, 1, 2, 3];\n  const dType = input.type.value;\n  return `\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${dType} {\n      var input_indices: ${input.type.indices};\n      ${input.indicesSet('input_indices', heightIdx, `max(0, min(row, ${inputShape[heightIdx]} - 1))`)};\n      ${input.indicesSet('input_indices', widthIdx, `max(0, min(col, ${inputShape[widthIdx]} - 1))`)};\n      ${setChannelAndBatchIndices(input, channelIdx, batchIdx, 2)}\n      return ${input.getByIndices('input_indices')};\n    }\n\n    fn bilinearInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${dType} = originalIndices[${heightIdx}];\n      var col:${dType} = originalIndices[${widthIdx}];\n      ${\n        useExtrapolation\n          ? `if (row < 0 || row > (${inputShape[heightIdx]} - 1) || col < 0 || col > (${inputShape[widthIdx]} - 1)) {\n        return ${extrapolationValue};\n      }`\n          : ''\n      };\n      row = max(0, min(row, ${inputShape[heightIdx]} - 1));\n      col = max(0, min(col, ${inputShape[widthIdx]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${inputShape.length > 2 ? `u32(originalIndices[${channelIdx}])` : '0'};\n      var batch: u32 =  ${inputShape.length > 2 ? `u32(originalIndices[${batchIdx}])` : '0'};\n      var x11: ${dType} = getInputValue(batch, channel, row1, col1);\n      var x12: ${dType} = getInputValue(batch, channel, row1, col2);\n      var x21: ${dType} = getInputValue(batch, channel, row2, col1);\n      var x22: ${dType} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${dType} = abs(row - ${dType}(row1));\n      var dx2: ${dType} = abs(${dType}(row2) - row);\n      var dy1: ${dType} = abs(col - ${dType}(col1));\n      var dy2: ${dType} = abs(${dType}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`;\n};\n\nconst bicubicInterpolation = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  outputShape: readonly number[],\n  scales: readonly number[],\n  roi: readonly number[],\n  cubicCoeffA: number,\n  useExtrapolation: boolean,\n  extrapolationValue: number,\n  excludeOutside: boolean,\n): string => {\n  const is2D = inputShape.length === 2;\n  const isNchw = true;\n  const [heightIdx, widthIdx] = is2D ? [0, 1] : isNchw ? [2, 3] : [1, 2];\n  const dType = input.type.value;\n  const createCubicInterpolationFunction = (idx: number): string => {\n    const direction = idx === heightIdx ? 'row' : 'col';\n    return `\n      fn ${direction}CubicInterpolation(input_indices: ${input.type.indices}, output_indices: ${\n        output.type.indices\n      }) -> ${dType} {\n        var output_index = ${output.indicesGet('output_indices', idx)};\n        var originalIdx: ${dType} = getOriginalCoordinateFromResizedCoordinate(output_index, ${scales[idx]},\n        ${outputShape[idx]}, ${inputShape[idx]}, ${roi[idx]}, ${roi[idx]} + ${inputShape.length});\n        var fractOriginalIdx: ${dType} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${useExtrapolation} && (originalIdx < 0 || originalIdx > (${inputShape[idx]} - 1))) {\n          return ${extrapolationValue};\n        }\n        var data: array<${dType}, 4> = array<${dType}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${direction}: ${dType} = originalIdx + ${dType}(i);\n          if (${direction} < 0 || ${direction} >= ${inputShape[idx]}) {\n            ${(() => {\n              if (excludeOutside) {\n                return `coefs[i + 1] = 0.0;\n                        continue;`;\n              } else if (useExtrapolation) {\n                return `return ${extrapolationValue};`;\n              } else {\n                return `${direction} = max(0, min(${direction}, ${inputShape[idx]} - 1));`;\n              }\n            })()};\n          }\n        var input_indices_copy: ${input.type.indices} = input_indices;\n          ${input.indicesSet('input_indices_copy', idx, `u32(${direction})`)};\n          data[i + 1] = ${\n            idx === heightIdx\n              ? input.getByIndices('input_indices_copy')\n              : 'rowCubicInterpolation(input_indices_copy, output_indices)'\n          };\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`;\n  };\n\n  return `\n    ${createCubicInterpolationFunction(heightIdx)};\n    ${createCubicInterpolationFunction(widthIdx)};\n  fn getCubicInterpolationCoefs(s: ${dType}) -> array<${dType}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${dType}, 4> = array<${dType}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${dType} = 1.0 - absS;\n    var twoMinusAbsS: ${dType} = 2.0 - absS;\n    var onePlusAbsS: ${dType} = 1.0 + absS;\n    coeffs[0] = ((${cubicCoeffA} * onePlusAbsS - 5 * ${cubicCoeffA}) * onePlusAbsS + 8 * ${\n      cubicCoeffA\n    }) * onePlusAbsS - 4 * ${cubicCoeffA};\n    coeffs[1] = ((${cubicCoeffA} + 2) * absS - (${cubicCoeffA} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${cubicCoeffA} + 2) * oneMinusAbsS - (${cubicCoeffA} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${cubicCoeffA} * twoMinusAbsS - 5 * ${cubicCoeffA}) * twoMinusAbsS + 8 * ${\n      cubicCoeffA\n    }) * twoMinusAbsS - 4 * ${cubicCoeffA};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${dType}, 4>, coefs: array<${dType}, 4>) -> ${dType} {\n    var coefsSum: ${dType} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n    var input_indices: ${input.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `;\n};\n\nconst trilinearInterpolation = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  useExtrapolation: boolean,\n  extrapolationValue: number,\n): string => {\n  const isNchw = true;\n  const [batchIdx, depthIdx, heightIdx, widthIdx, channelIdx] =\n    inputShape.length === 3 ? [-1, 0, 1, 2, -1] : isNchw ? [0, 2, 3, 4, 1] : [0, 1, 2, 3, 4];\n  const dType = input.type.value;\n  return `\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${dType} {\n      var input_indices: ${input.type.indices};\n      ${input.indicesSet('input_indices', depthIdx, `max(0, min(depth, ${inputShape[depthIdx]} - 1))`)};\n      ${input.indicesSet('input_indices', heightIdx, `max(0, min(height, ${inputShape[heightIdx]} - 1))`)};\n      ${input.indicesSet('input_indices', widthIdx, `max(0, min(width, ${inputShape[widthIdx]} - 1))`)};\n      ${setChannelAndBatchIndices(input, channelIdx, batchIdx, 3)}\n      return ${input.getByIndices('input_indices')};\n    }\n\n    fn trilinearInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${dType} = originalIndices[${depthIdx}];\n      var height:${dType} = originalIndices[${heightIdx}];\n      var width:${dType} = originalIndices[${widthIdx}];\n      ${\n        useExtrapolation\n          ? `if (depth < 0 || depth > (${inputShape[depthIdx]} - 1) || height < 0 || height > (${\n              inputShape[heightIdx]\n            } - 1) || width < 0 || (width > ${inputShape[widthIdx]} - 1)) {\n      return ${extrapolationValue};\n        }`\n          : ''\n      };\n\n    depth = max(0, min(depth, ${inputShape[depthIdx]} - 1));\n      height = max(0, min(height, ${inputShape[heightIdx]} - 1));\n      width = max(0, min(width, ${inputShape[widthIdx]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${inputShape.length > 3 ? `u32(originalIndices[${channelIdx}])` : '0'};\n      var batch: u32 =  ${inputShape.length > 3 ? `u32(originalIndices[${batchIdx}])` : '0'};\n\n      var x111: ${dType} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${dType} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${dType} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${dType} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${dType} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${dType} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${dType} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${dType} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${dType} = abs(depth - ${dType}(depth1));\n      var dx2: ${dType} = abs(${dType}(depth2) - depth);\n      var dy1: ${dType} = abs(height - ${dType}(height1));\n      var dy2: ${dType} = abs(${dType}(height2) - height);\n      var dz1: ${dType} = abs(width - ${dType}(width1));\n      var dz2: ${dType} = abs(${dType}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`;\n};\n\nconst createResizeProgramInfo = (\n  inputTensor: TensorView,\n  attributes: ResizeAttributes,\n  opsetVersion: number,\n  scalesInput: readonly number[],\n  sizes: readonly number[],\n  roiInput: readonly number[],\n): ProgramInfo => {\n  const inputShape = inputTensor.dims;\n  const roi = updateRoI(roiInput, attributes.axes, inputShape.length);\n\n  let outputShape = initOutputShape(inputShape, scalesInput, sizes, attributes.axes);\n  let scales = scalesInput.slice();\n  if (scalesInput.length === 0) {\n    scales = inputShape.map((value, index) => (value === 0 ? 1.0 : outputShape[index] / value));\n    if (attributes.keepAspectRatioPolicy !== 'stretch') {\n      outputShape = adjustOutputShape(inputShape, scales, attributes);\n    }\n  }\n  const output = outputVariable('output', inputTensor.dataType, outputShape.length);\n  const input = inputVariable('input', inputTensor.dataType, inputShape.length);\n  const outputSize = ShapeUtil.size(outputShape);\n  const noScale = inputShape.length === outputShape.length && inputShape.every((d, i) => d === outputShape[i]);\n  const useExtrapolation = attributes.coordinateTransformMode === 'tf_crop_and_resize';\n  const extrapolationValue = attributes.extrapolationValue;\n  const dataType = input.type.value;\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${\n        noScale\n          ? ''\n          : `\n      ${getOriginalCoordinateFromResizedCoordinate(attributes.coordinateTransformMode, dataType)};\n      ${(() => {\n        switch (attributes.mode) {\n          case 'nearest':\n            return `\n              ${checkInputIndices(input, inputShape)};\n              ${getNearestPixelFromOriginal(attributes.nearestMode, opsetVersion, dataType)};\n              ${calculateInputIndicesFromOutputIndices(\n                input,\n                output,\n                inputShape,\n                outputShape,\n                scales.length,\n                roi.length,\n                useExtrapolation,\n              )};\n              `;\n          case 'linear':\n            return `\n              ${calculateOriginalIndicesFromOutputIndices(output, inputShape, outputShape, scales.length, roi.length)};\n              ${(() => {\n                if (inputShape.length === 2 || inputShape.length === 4) {\n                  return `${bilinearInterpolation(input, output, inputShape, useExtrapolation, extrapolationValue)}`;\n                } else if (inputShape.length === 3 || inputShape.length === 5) {\n                  return `${trilinearInterpolation(input, output, inputShape, useExtrapolation, extrapolationValue)}`;\n                } else {\n                  throw Error('Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.');\n                }\n              })()};\n            `;\n          case 'cubic':\n            return `\n            ${(() => {\n              if (inputShape.length === 2 || inputShape.length === 4) {\n                return `${bicubicInterpolation(\n                  input,\n                  output,\n                  inputShape,\n                  outputShape,\n                  scales,\n                  roi,\n                  attributes.cubicCoeffA,\n                  useExtrapolation,\n                  attributes.extrapolationValue,\n                  attributes.excludeOutside,\n                )}`;\n              } else {\n                throw Error('Cubic mode only supports input dims 2 and 4 are supported in linear mode.');\n              }\n            })()};\n            `;\n          default:\n            throw Error('Invalid resize mode');\n        }\n      })()};\n      `\n      }\n      ${shaderHelper\n        .registerUniform('output_size', 'u32')\n        .registerUniform('scales', 'f32', scales.length)\n        .registerUniform('roi', 'f32', roi.length)\n        .declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n        ${\n          noScale\n            ? 'output[global_idx] = input[global_idx];'\n            : `\n        let output_indices = ${output.offsetToIndices('global_idx')};\n        var input_indices: ${input.type.indices};\n        ${(() => {\n          switch (attributes.mode) {\n            case 'nearest':\n              return `input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${input.getByIndices('input_indices')};\n                } else {\n                  output[global_idx] = ${attributes.extrapolationValue};\n                }`;\n            case 'linear':\n              return `output[global_idx] = ${\n                inputShape.length === 2 || inputShape.length === 4 ? 'bilinearInterpolation' : 'trilinearInterpolation'\n              }(output_indices);`;\n            case 'cubic':\n              return 'output[global_idx] = bicubicInterpolation(output_indices);';\n            default:\n              throw Error(`Unsupported resize mode: ${attributes.mode}`);\n          }\n        })()};\n`\n        }\n      }`;\n\n  return {\n    name: 'Resize',\n    shaderCache: {\n      hint: `${attributes.cacheKey}|${opsetVersion}|${scales.length > 0 ? scales : ''}|${\n        sizes.length > 0 ? sizes : ''\n      }|${roi.length > 0 ? roi : ''}|${noScale}|${inputShape}`,\n      inputDependencies: ['rank'],\n    },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputTensor.dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: outputSize },\n        { type: DataType.float, data: scales },\n        { type: DataType.float, data: roi },\n        ...createTensorShapeVariables(inputShape, outputShape),\n      ],\n    }),\n  };\n};\n\nconst getOpsetVersionFromCustomDataBuffer = (context: ComputeContext): number => {\n  const customDataBuffer = context.customDataBuffer;\n  const customDataBuffer32 = new Uint32Array(customDataBuffer, customDataBuffer.byteOffset, 1);\n  const opsetVersion = customDataBuffer32[0];\n  return opsetVersion;\n};\n\nexport const resize = (context: ComputeContext, attributes: ResizeAttributes): void => {\n  const scales: number[] = [];\n  const sizes: number[] = [];\n  const roi: number[] = [];\n\n  // Note that scales in resize are always f32. roi can be f32 or f16.\n  // TODO: Currently this code does not support f16 for roi when passed as optional input.\n\n  const opsetVersion = getOpsetVersionFromCustomDataBuffer(context);\n  if (attributes.antialias !== 0) {\n    throw Error('Only default value (0) for Antialias attribute is supported');\n  }\n  validateInputs(context.inputs, attributes, opsetVersion, scales, sizes, roi);\n  context.compute(createResizeProgramInfo(context.inputs[0], attributes, opsetVersion, scales, sizes, roi), {\n    inputs: [0],\n  });\n};\n\nexport const parseResizeAttributes = (attributes: Record<string, unknown>): ResizeAttributes => {\n  const antialias = attributes.antialias as number;\n  const axes = attributes.axes as number[];\n  const coordinateTransformMode: CoordinateTransformMode =\n    attributes.coordinateTransformMode as CoordinateTransformMode;\n  const cubicCoeffA = attributes.cubicCoeffA as number;\n  const excludeOutside = (attributes.excludeOutside as number) !== 0;\n  const extrapolationValue = attributes.extrapolationValue as number;\n  const keepAspectRatioPolicy: KeepAspectRatioPolicy = attributes.keepAspectRatioPolicy as KeepAspectRatioPolicy;\n  const mode: Mode = attributes.mode as Mode;\n  // If nearestMode is not specified, use simple mode.\n  const nearestMode: NearestMode = (attributes.nearestMode === '' ? 'simple' : attributes.nearestMode) as NearestMode;\n  return createAttributeWithCacheKey({\n    antialias,\n    axes,\n    coordinateTransformMode,\n    cubicCoeffA,\n    excludeOutside,\n    extrapolationValue,\n    keepAspectRatioPolicy,\n    mode,\n    nearestMode,\n  });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper, WORKGROUP_SIZE } from './common';\n\nexport interface RotaryEmbeddingAttributes {\n  readonly interleaved: boolean;\n  readonly numHeads: number;\n  readonly rotaryEmbeddingDim: number;\n  readonly scale: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: RotaryEmbeddingAttributes): void => {\n  const [input, positionIds, cosCache, sinCache] = inputs;\n  const { numHeads, rotaryEmbeddingDim } = attributes;\n\n  if (input.dims.length !== 3 && input.dims.length !== 4) {\n    throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${input.dims.length}`);\n  }\n  if (\n    !ShapeUtil.areEqual(positionIds.dims, []) &&\n    !ShapeUtil.areEqual(positionIds.dims, [1]) &&\n    positionIds.dims.length !== 2\n  ) {\n    throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${positionIds.dims.length}`);\n  }\n  if (cosCache.dims.length !== 2) {\n    throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${cosCache.dims.length}`);\n  }\n  if (sinCache.dims.length !== 2) {\n    throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${sinCache.dims.length}`);\n  }\n  if (!ShapeUtil.areEqual(cosCache.dims, sinCache.dims)) {\n    throw new Error(\"Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape\");\n  }\n\n  if (rotaryEmbeddingDim > 0 && numHeads === 0) {\n    throw new Error('num_heads must be provided if rotary_embedding_dim is specified');\n  }\n\n  const batchSize = input.dims[0];\n  const sequenceLength = input.dims[input.dims.length - 2];\n  const maxSequenceLength = cosCache.dims[0];\n  const hiddenSize = ShapeUtil.sizeFromDimension(input.dims, 1) / sequenceLength;\n  const headSize = rotaryEmbeddingDim === 0 ? cosCache.dims[1] * 2 : hiddenSize / numHeads;\n  if (rotaryEmbeddingDim > headSize) {\n    throw new Error('rotary_embedding_dim must be less than or equal to head_size');\n  }\n\n  if (positionIds.dims.length === 2) {\n    if (batchSize !== positionIds.dims[0]) {\n      throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${positionIds.dims[0]}`);\n    }\n    if (sequenceLength !== positionIds.dims[1]) {\n      throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${positionIds.dims[1]}`);\n    }\n  }\n\n  if (headSize / 2 !== cosCache.dims[1] && rotaryEmbeddingDim / 2 !== cosCache.dims[1]) {\n    throw new Error(\n      `Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${\n        cosCache.dims[1]\n      }`,\n    );\n  }\n\n  if (sequenceLength > maxSequenceLength) {\n    throw new Error('Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported');\n  }\n};\n\nconst createRotaryEmbeddingProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: RotaryEmbeddingAttributes,\n): ProgramInfo => {\n  const { interleaved, numHeads, rotaryEmbeddingDim, scale } = attributes;\n  const batchSize = inputs[0].dims[0];\n  const batchStride = ShapeUtil.sizeFromDimension(inputs[0].dims, 1);\n  const sequenceLength = inputs[0].dims[inputs[0].dims.length - 2];\n  const hiddenSize = batchStride / sequenceLength;\n  const halfRotaryEmbeddingDim = inputs[2].dims[1];\n  const headSize = rotaryEmbeddingDim === 0 ? halfRotaryEmbeddingDim * 2 : hiddenSize / numHeads;\n\n  // Rotary embeddings will be calculated in a pair-wise fashion. In accordance, use the shape\n  // [batch size, sequence length, num of heads, num of pairs to rotate + num of dims to copy]\n  // to unfold the global index in shader.\n  const globalShape = new Array<number>(\n    batchSize,\n    sequenceLength,\n    hiddenSize / headSize,\n    headSize - halfRotaryEmbeddingDim,\n  );\n  const globalStrides = ShapeUtil.computeStrides(globalShape);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.float, data: scale },\n    { type: DataType.uint32, data: globalShape },\n    { type: DataType.uint32, data: globalStrides },\n\n    // strides for addressing the input/output tensor, in permutated order to align with the unfolded global index,\n    // i.e. BSNH\n    ...(inputs[0].dims.length === 3\n      ? new Array<ProgramUniform>({ type: DataType.uint32, data: [batchStride, hiddenSize, headSize, 1] })\n      : []),\n    ...(inputs[0].dims.length === 4\n      ? new Array<ProgramUniform>({\n          type: DataType.uint32,\n          data: [batchStride, headSize, sequenceLength * headSize, 1],\n        })\n      : []),\n\n    ...createTensorShapeVariables(inputs[0].dims, inputs[1].dims, inputs[2].dims, inputs[3].dims, inputs[0].dims),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const input = inputVariable('input', inputs[0].dataType, inputs[0].dims.length);\n    const positionIds = inputVariable('position_ids', inputs[1].dataType, inputs[1].dims.length);\n    const cosCache = inputVariable('cos_cache', inputs[2].dataType, inputs[2].dims.length);\n    const sinCache = inputVariable('sin_cache', inputs[3].dataType, inputs[3].dims.length);\n    const output = outputVariable('output', inputs[0].dataType, inputs[0].dims.length);\n\n    shaderHelper.registerUniforms([\n      { name: 'scale', type: 'f32' },\n      { name: 'global_shape', type: 'u32', length: globalShape.length },\n      { name: 'global_strides', type: 'u32', length: globalStrides.length },\n      { name: 'input_output_strides', type: 'u32', length: globalStrides.length },\n    ]);\n\n    return `\n        ${shaderHelper.declareVariables(input, positionIds, cosCache, sinCache, output)}\n\n        ${shaderHelper.mainStart(WORKGROUP_SIZE)}\n          let half_rotary_emb_dim = uniforms.${cosCache.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('size')}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${positionIds.broadcastedIndicesToOffset('bsnh.xy', outputVariable('', positionIds.type.tensor, 2))};\n            let position_id =\n                u32(${positionIds.getByOffset('position_ids_idx')}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${interleaved});\n            let j = i + select(half_rotary_emb_dim, 1, ${interleaved});\n            let re = ${input.getByOffset('i')} * ${cosCache.get('position_id', 'bsnh[3]')} -\n                ${input.getByOffset('j')} * ${sinCache.get('position_id', 'bsnh[3]')};\n            ${output.setByOffset('i', 're')}\n            let im = ${input.getByOffset('i')} * ${sinCache.get('position_id', 'bsnh[3]')} +\n                ${input.getByOffset('j')} * ${cosCache.get('position_id', 'bsnh[3]')};\n            ${output.setByOffset('j', 'im')}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${output.setByOffset('k', input.getByOffset('k'))}\n          }\n        }`;\n  };\n\n  return {\n    name: 'RotaryEmbedding',\n    shaderCache: {\n      hint: createAttributeWithCacheKey({\n        interleaved,\n      }).cacheKey,\n      inputDependencies: ['rank', 'rank', 'rank', 'rank'],\n    },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: inputs[0].dims, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(ShapeUtil.size(globalShape) / WORKGROUP_SIZE) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const rotaryEmbedding = (context: ComputeContext, attributes: RotaryEmbeddingAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  context.compute(createRotaryEmbeddingProgramInfo(context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  castToF32,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  sumVector,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from './common';\n\nexport interface SkipLayerNormAttributes {\n  simplified: boolean;\n  epsilon: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 3) {\n    throw new Error('layerNorm requires at least 3 inputs.');\n  }\n\n  const input: TensorView = inputs[0];\n  const skip: TensorView = inputs[1];\n  const gamma: TensorView = inputs[2];\n\n  if (input.dataType !== skip.dataType || input.dataType !== gamma.dataType) {\n    throw new Error('All inputs must have the same data type');\n  }\n\n  if (input.dims.length !== 3 && input.dims.length !== 2) {\n    throw new Error('Input must be 2D or 3D');\n  }\n\n  if (skip.dims.length !== 3 && skip.dims.length !== 2) {\n    throw new Error('Skip must be 2D or 3D');\n  }\n\n  const hiddenSize = input.dims[input.dims.length - 1];\n  const sequenceLength = input.dims[input.dims.length - 2];\n  if (skip.dims[skip.dims.length - 1] !== hiddenSize) {\n    throw new Error('Skip must have the same hidden size as input');\n  }\n  if (skip.dims[skip.dims.length - 2] !== sequenceLength) {\n    throw new Error('Skip must have the same sequence length as input');\n  }\n\n  if (gamma.dims.length !== 1) {\n    throw new Error('Gamma must be 1D');\n  }\n  if (gamma.dims[gamma.dims.length - 1] !== hiddenSize) {\n    throw new Error('Gamma must have the same hidden size as input');\n  }\n  if (inputs.length > 3) {\n    const beta: TensorView = inputs[3];\n    if (beta.dims.length !== 1) {\n      throw new Error('Beta must be 1D');\n    }\n    if (beta.dims[beta.dims.length - 1] !== hiddenSize) {\n      throw new Error('Beta must have the same hidden size as input');\n    }\n  }\n  if (inputs.length > 4) {\n    const bias: TensorView = inputs[4];\n    if (bias.dims.length !== 1) {\n      throw new Error('Bias must be 1D');\n    }\n    if (bias.dims[bias.dims.length - 1] !== hiddenSize) {\n      throw new Error('Bias must have the same hidden size as input');\n    }\n  }\n};\n\nconst createSkipLayerNormProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: SkipLayerNormAttributes,\n  outputCount: number,\n  isTraining: boolean,\n): ProgramInfo => {\n  const simplified = attributes.simplified;\n\n  const inputShape = inputs[0].dims;\n  const inputSize = ShapeUtil.size(inputShape);\n  const outputShape = inputShape;\n  const outputSize = inputSize;\n  const hiddenSize = inputShape.slice(-1)[0];\n  const meanInvStdDevDim = isTraining ? inputShape.slice(0, -1).concat(1) : [];\n  const hasBetaInput = !simplified && inputs.length > 3;\n  const hasBiasInput = inputs.length > 4;\n  const hasMeanOutput = isTraining && outputCount > 1;\n  const hasInvStdDevOutput = isTraining && outputCount > 2;\n  const hasInputSkipBiasSumOutput = outputCount > 3;\n  const workgroupSize = 64;\n\n  const components = getMaxComponents(hiddenSize);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: components },\n    { type: DataType.uint32, data: hiddenSize },\n    { type: DataType.float, data: attributes.epsilon },\n  ];\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniformsArray: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'components', type: 'u32' },\n      { name: 'hidden_size', type: 'u32' },\n      { name: 'epsilon', type: 'f32' },\n    ];\n    const variables = [\n      inputVariable('x', inputs[0].dataType, inputs[0].dims, components),\n      inputVariable('skip', inputs[1].dataType, inputs[1].dims, components),\n      inputVariable('gamma', inputs[2].dataType, inputs[2].dims, components),\n    ];\n    if (hasBetaInput) {\n      variables.push(inputVariable('beta', inputs[3].dataType, inputs[3].dims, components));\n    }\n    if (hasBiasInput) {\n      variables.push(inputVariable('bias', inputs[4].dataType, inputs[4].dims, components));\n    }\n    variables.push(outputVariable('output', inputs[0].dataType, outputShape, components));\n    if (hasMeanOutput) {\n      variables.push(outputVariable('mean_output', DataType.float, meanInvStdDevDim));\n    }\n    if (hasInvStdDevOutput) {\n      variables.push(outputVariable('inv_std_output', DataType.float, meanInvStdDevDim));\n    }\n    if (hasInputSkipBiasSumOutput) {\n      variables.push(outputVariable('input_skip_bias_sum', inputs[0].dataType, outputShape, components));\n    }\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const vecDataType = tensorTypeToWsglStorageType(DataType.float, components);\n    return `\n\n      ${shaderHelper.registerUniforms(uniformsArray).declareVariables(...variables)}\n      var<workgroup> sum_shared : array<${vecDataType}, ${workgroupSize}>;\n      var<workgroup> sum_squared_shared : array<${vecDataType}, ${workgroupSize}>;\n\n      ${shaderHelper.mainStart([workgroupSize, 1, 1])}\n        let ix = local_id.x;\n        let iy = global_id.x / ${workgroupSize};\n\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        var stride = hidden_size_vectorized / ${workgroupSize};\n        let offset = ix * stride + iy * hidden_size_vectorized;\n        let offset1d = stride * ix;\n        if (ix == ${workgroupSize - 1}) {\n          stride = hidden_size_vectorized - stride * ix;\n        }\n        for (var i: u32 = 0; i < stride; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${hasBiasInput ? 'bias[offset1d + i]' : dataType + '(0.0)'};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${hasInputSkipBiasSumOutput ? 'input_skip_bias_sum[offset + i] = value;' : ''}\n          output[offset + i] = value;\n          let f32_value = ${castToF32(dataType, components, 'value')};\n          sum_shared[ix] += f32_value;\n          sum_squared_shared[ix] += f32_value * f32_value;\n        }\n        workgroupBarrier();\n\n        var reduce_size : u32 = ${workgroupSize};\n        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {\n          reduce_size = curr_size + (reduce_size & 1);\n          if (ix < curr_size) {\n            sum_shared[ix] += sum_shared[ix + reduce_size];\n            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];\n          }\n          workgroupBarrier();\n        }\n\n        let sum = sum_shared[0];\n        let square_sum = sum_squared_shared[0];\n        let mean = ${sumVector('sum', components)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${sumVector('square_sum', components)} / f32(uniforms.hidden_size) ${\n          simplified ? '' : '- mean * mean'\n        } + uniforms.epsilon);\n        ${hasMeanOutput ? 'mean_output[global_idx] = mean;' : ''}\n        ${hasInvStdDevOutput ? 'inv_std_output[global_idx] = inv_std_dev;' : ''}\n\n        for (var i: u32 = 0; i < stride; i++) {\n          output[offset + i] = (output[offset + i] ${simplified ? '' : `- ${dataType}(mean)`}) *\n            ${dataType}(inv_std_dev) * gamma[offset1d + i]\n            ${hasBetaInput ? '+ beta[offset1d + i]' : ''};\n        }\n      }`;\n  };\n  const outputs = [{ dims: outputShape, dataType: inputs[0].dataType }];\n  if (outputCount > 1) {\n    outputs.push({ dims: meanInvStdDevDim, dataType: DataType.float });\n  }\n  if (outputCount > 2) {\n    outputs.push({ dims: meanInvStdDevDim, dataType: DataType.float });\n  }\n  if (outputCount > 3) {\n    outputs.push({ dims: inputShape, dataType: inputs[0].dataType });\n  }\n  return {\n    name: 'SkipLayerNormalization',\n    shaderCache: {\n      hint: `${components};${hasMeanOutput};${hasInvStdDevOutput};${hasInputSkipBiasSumOutput}`,\n      inputDependencies: inputs.map((_input, _index) => 'type'),\n    },\n    getShaderSource,\n    getRunData: () => ({\n      outputs,\n      dispatchGroup: {\n        x: Math.ceil(outputSize / hiddenSize),\n      },\n      programUniforms,\n    }),\n  };\n};\n\nexport const skipLayerNorm = (context: ComputeContext, attributes: SkipLayerNormAttributes): void => {\n  // TODO: initialize isTraining from ComputeContext\n  const isTraining = false;\n  validateInputs(context.inputs);\n  // Mean and InvStdDev are only used in training mode and are not required for inference.\n  // They are added here for completeness only.\n  const outputs = [0];\n  if (context.outputCount > 1) {\n    outputs.push(isTraining ? 1 : -3);\n  }\n  if (context.outputCount > 2) {\n    outputs.push(isTraining ? 2 : -3);\n  }\n  if (context.outputCount > 3) {\n    outputs.push(3);\n  }\n  context.compute(createSkipLayerNormProgramInfo(context.inputs, attributes, context.outputCount, isTraining), {\n    outputs,\n  });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform, TensorInfo } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformsArrayType,\n} from './common';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly starts: number[];\n  readonly ends: number[];\n  readonly axes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: SliceAttributes): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n  if (attributes.axes.length !== 0) {\n    if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\n      throw new Error('axes, starts and ends must have the same length');\n    }\n  } else if (attributes.starts.length !== attributes.ends.length) {\n    throw new Error('starts and ends must have the same length');\n  }\n  inputs.slice(1).forEach((_, idx) => {\n    if (inputs[idx + 1].dataType !== DataType.int32 && inputs[idx + 1].dataType !== DataType.int64) {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  });\n};\n\nconst readInput = (inputs: readonly TensorView[], idx: number): number[] => {\n  const input: number[] = [];\n  if (inputs.length > idx) {\n    if (inputs[idx].dataType === DataType.int64) {\n      inputs[idx].getBigInt64Array().forEach((v) => input.push(Number(v)));\n    } else if (inputs[idx].dataType === DataType.int32) {\n      inputs[idx].getInt32Array().forEach((v) => input.push(Number(v)));\n    } else {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  }\n  return input;\n};\n\nconst createSliceAttributesFromInputs = (\n  inputs: readonly TensorView[],\n  attributes: SliceAttributes,\n): SliceAttributes => {\n  if (inputs.length > 1) {\n    const starts: number[] = readInput(inputs, 1);\n    const ends: number[] = readInput(inputs, 2);\n    let axes: number[] = readInput(inputs, 3);\n    if (axes.length === 0) {\n      axes = [...Array(inputs[0].dims.length).keys()];\n    }\n    return createAttributeWithCacheKey({ starts, ends, axes });\n  } else {\n    return attributes;\n  }\n};\n\nconst fixStartEndValues = (\n  value: number,\n  index: number,\n  inputShape: readonly number[],\n  axes: readonly number[],\n  steps: readonly number[],\n): number => {\n  let newValue = value;\n  if (value < 0) {\n    newValue += inputShape[axes[index]];\n  }\n  if (steps[index] < 0) {\n    return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\n  } else {\n    return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\n  }\n};\n\nconst calculateInputIndicesImpl = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n): string =>\n  `fn calculateInputIndices(output_indices: ${output.type.indices}) -> ${input.type.indices} {\n          var input_indices: ${input.type.indices};\n          var carry = 0u;\n          for (var i = ${inputShape.length}; i >= 0; i--) {\n            let input_shape_i = ${getElementAt('uniforms.input_shape', 'i', inputShape.length)};\n            let steps_i = ${getElementAt('uniforms.steps', 'i', inputShape.length)};\n            let signs_i = ${getElementAt('uniforms.signs', 'i', inputShape.length)};\n            let starts_i = ${getElementAt('uniforms.starts', 'i', inputShape.length)};\n            var output_index = ${output.indicesGet('output_indices', 'i')};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${input.indicesSet('input_indices', 'i', 'input_index')};\n          }\n          return input_indices;\n      }`;\n\nconst createSliceProgramInfo = (inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const inputSize = ShapeUtil.size(inputShape);\n  const axes =\n    attributes.axes.length > 0\n      ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length)\n      : [...Array(inputShape.length).keys()];\n  let steps = readInput(inputs, 4);\n  steps.forEach(\n    (step) =>\n      step !== 0 ||\n      (() => {\n        throw new Error('step cannot be 0');\n      }),\n  );\n  if (steps.length === 0) {\n    steps = Array(axes.length).fill(1);\n  }\n  const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\n\n  const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\n\n  if (axes.length !== starts.length || axes.length !== ends.length) {\n    throw new Error('start, ends and axes should have the same number of elements');\n  }\n\n  if (axes.length !== inputShape.length) {\n    for (let i = 0; i < inputShape.length; ++i) {\n      if (!axes.includes(i)) {\n        starts.splice(i, 0, 0);\n        ends.splice(i, 0, inputShape[i]);\n        steps.splice(i, 0, 1);\n      }\n    }\n  }\n  const signs = steps.map((step) => Math.sign(step));\n  // Convert negative steps to positive steps and reverse starts and ends\n  steps.forEach((step, i, array) => {\n    if (step < 0) {\n      const numSteps = (ends[i] - starts[i]) / step;\n      const newEnd = starts[i];\n      const newStart = newEnd + numSteps * steps[i];\n      starts[i] = newStart;\n      ends[i] = newEnd;\n      array[i] = -step;\n    }\n  });\n  // Output rank is expected to be less than or equal to the input rank.\n  const outputShape = inputShape.slice(0);\n  axes.forEach((axis, _) => {\n    outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\n  });\n  const outputTensorInfo: TensorInfo = { dims: outputShape, dataType: inputs[0].dataType };\n\n  const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n  const input = inputVariable('input', inputs[0].dataType, inputs[0].dims.length);\n  const outputSize = ShapeUtil.size(outputShape);\n  const uniforms: UniformsArrayType = [\n    { name: 'outputSize', type: 'u32' },\n    { name: 'starts', type: 'u32', length: starts.length },\n    { name: 'signs', type: 'i32', length: signs.length },\n    { name: 'steps', type: 'u32', length: steps.length },\n  ];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: starts },\n    { type: DataType.int32, data: signs },\n    { type: DataType.uint32, data: steps },\n    ...createTensorShapeVariables(inputs[0].dims, outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper.registerUniforms(uniforms).declareVariables(input, output)}\n        ${calculateInputIndicesImpl(input, output, inputShape)}\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n          let output_indices = ${output.offsetToIndices('global_idx')};\n          let input_indices = calculateInputIndices(output_indices);\n          ${output.setByOffset('global_idx', input.getByIndices('input_indices'))}\n      }`;\n  return {\n    name: 'Slice',\n    shaderCache: { hint: `${signs.length}_${starts.length}_${steps.length}`, inputDependencies: ['rank'] },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [outputTensorInfo],\n      dispatchGroup: { x: Math.ceil(inputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const slice = (context: ComputeContext, attributes: SliceAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  const updatedAttributes = createSliceAttributesFromInputs(context.inputs, attributes);\n  context.compute(createSliceProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n  // if (ShapeUtil.size(program.outputs[0].dims) > 0) {\n  //   context.compute(programInfoLoader, {inputs: [0]});\n  // } else {\n  //   // TODO: support empty output\n  //   throw new Error('slice: output size is 0');\n  // }\n};\n\nexport const parseSliceAttributes = (attributes: Record<string, unknown>): SliceAttributes => {\n  const starts = attributes.starts as number[];\n  const ends = attributes.ends as number[];\n  const axes = attributes.axes as number[];\n  return createAttributeWithCacheKey({ starts, ends, axes });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// TODO: this is the same naive implementation we use for reduce that has\n// performance limitations when the reduced axis is long. Need to add\n// a optimized codepath for this.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext } from '../types';\nimport { createTransposeProgramInfo } from './transpose';\n\nimport {\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  sumVector,\n  tensorTypeToWsglStorageType,\n} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax op requires 1 input.');\n  }\n};\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst createSoftmaxProgramInfo = (context: ComputeContext, attributes: SoftmaxAttributes) => {\n  const input = context.inputs[0];\n  const inputShape = input.dims;\n  const outputSize = ShapeUtil.size(inputShape);\n  const WG = 64;\n  const inputRank = inputShape.length;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n  const isTransposeRequired = axis < inputShape.length - 1;\n  let transposedInput: TensorView;\n  let perm: number[] = [];\n\n  if (isTransposeRequired) {\n    perm = Array.from({ length: inputRank }, (_, i) => i);\n    perm[axis] = inputRank - 1;\n    perm[inputRank - 1] = axis;\n\n    transposedInput = context.compute(createTransposeProgramInfo(input, perm), {\n      inputs: [input],\n      outputs: [-1],\n    })[0];\n  } else {\n    transposedInput = input;\n  }\n\n  const transposedInputShape = transposedInput.dims;\n  const cols = transposedInputShape[inputRank - 1];\n  const rows = outputSize / cols;\n  const components = getMaxComponents(cols);\n  const packedCols = cols / components;\n\n  const maxVector = (name: string, components: number) => {\n    if (components === 4) {\n      return `max(max(${name}.x, ${name}.y), max(${name}.z, ${name}.w))`;\n    } else if (components === 2) {\n      return `max(${name}.x, ${name}.y)`;\n    } else if (components === 3) {\n      return `max(max(${name}.x, ${name}.y), ${name}.z)`;\n    }\n\n    return name;\n  };\n  const x = inputVariable('x', transposedInput.dataType, transposedInput.dims, components);\n  const output = outputVariable('result', transposedInput.dataType, transposedInput.dims, components);\n  const valueType = x.type.value;\n  // 6.2.4 in wgsl spec\n  const threadMaxDecl =\n    tensorTypeToWsglStorageType(transposedInput.dataType) === 'f32'\n      ? `var threadMax = ${valueType}(-3.402823e+38f);`\n      : `var threadMax = ${valueType}(-65504.0h);`;\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      var<workgroup> rowMaxShared : ${valueType};\n      var<workgroup> rowSumShared : ${valueType};\n      var<workgroup> threadShared : array<${valueType}, ${WG}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${valueType} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${valueType}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${shaderHelper.registerUniform('packedCols', 'i32').declareVariables(x, output)}\n      ${shaderHelper.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${WG};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${threadMaxDecl}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${valueType}(${maxVector('threadShared[0]', components)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${valueType}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${valueType}(${sumVector('threadShared[0]', components)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;\n  const result = context.compute(\n    {\n      name: 'Softmax',\n      shaderCache: { hint: `${components}`, inputDependencies: ['type'] },\n      getRunData: () => ({\n        outputs: [{ dims: transposedInputShape, dataType: transposedInput.dataType }],\n        dispatchGroup: { x: rows },\n        programUniforms: [{ type: DataType.int32, data: packedCols }],\n      }),\n      getShaderSource,\n    },\n    {\n      inputs: [transposedInput],\n      outputs: [isTransposeRequired ? -1 : 0],\n    },\n  )[0];\n\n  if (isTransposeRequired) {\n    context.compute(createTransposeProgramInfo(result, perm), {\n      inputs: [result],\n    });\n  }\n};\n\nexport const softmax = (context: ComputeContext, attributes: SoftmaxAttributes): void => {\n  validateInputs(context.inputs);\n  createSoftmaxProgramInfo(context, attributes);\n};\n\nexport const parseSoftmaxAttributes = (attributes: Record<string, unknown>): SoftmaxAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform, TensorInfo } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n} from './common';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly numOutputs: number;\n  readonly splitSizes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n};\n\nconst createSplitAttributesFromInputs = (\n  inputs: readonly TensorView[],\n  attributes: SplitAttributes,\n): SplitAttributes => {\n  const splitSizes: number[] = [];\n  let numOutputs: number = attributes.numOutputs;\n  if (inputs[1].dims[0] > 0) {\n    inputs[1].getBigInt64Array().forEach((v) => splitSizes.push(Number(v)));\n    numOutputs = splitSizes.length;\n  }\n  return createAttributeWithCacheKey({ numOutputs, axis: attributes.axis, splitSizes });\n};\n\nconst calculateOutputIndexImpl = (numberOfTensors: number): string => `\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n    if (index < ${getElementAt('uniforms.size_in_split_axis', 'i', numberOfTensors)}) {\n        return i;\n    }\n    }\n    return ${numberOfTensors}u;\n}`;\nconst writeBufferDataImpl = (outputs: readonly IndicesHelper[]) => {\n  const numberOfTensors = outputs.length;\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = outputs[i].setByIndices('indices', 'input[global_idx]');\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (output_number == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (output_number == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return `\n      fn writeBufferData(output_number: u32, indices: ${outputs[0].type.indices}, global_idx: u32) {\n        ${codeLines.join('\\n')}\n      }`;\n};\n\nconst createSplitProgramInfo = (inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const inputSize = ShapeUtil.size(inputShape);\n  const dataType = inputs[0].dataType;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n  const outputs = new Array<IndicesHelper>(attributes.numOutputs);\n  const input = inputVariable('input', dataType, inputShape.length);\n  const sizeInSplitAxis = new Array<number>(attributes.numOutputs);\n  const outputsTensorInfo: TensorInfo[] = [];\n  const outputShapes: number[][] = [];\n  let previousSum = 0;\n  const programUniforms: ProgramUniform[] = [{ type: DataType.uint32, data: inputSize }];\n  for (let i = 0; i < attributes.numOutputs; i++) {\n    previousSum += attributes.splitSizes[i];\n    sizeInSplitAxis[i] = previousSum;\n    const outputShape = inputShape.slice();\n    outputShape[axis] = attributes.splitSizes[i];\n    outputShapes.push(outputShape);\n    outputs[i] = outputVariable(`output${i}`, dataType, outputShape.length);\n    outputsTensorInfo.push({ dims: outputShapes[i], dataType: inputs[0].dataType });\n  }\n  programUniforms.push(\n    { type: DataType.uint32, data: sizeInSplitAxis },\n    ...createTensorShapeVariables(inputShape, ...outputShapes),\n  );\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper\n    .registerUniform('input_size', 'u32')\n    .registerUniform('size_in_split_axis', 'u32', sizeInSplitAxis.length)\n    .declareVariables(input, ...outputs)}\n  ${calculateOutputIndexImpl(sizeInSplitAxis.length)}\n  ${writeBufferDataImpl(outputs)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.input_size')}\n\n    var indices = ${input.offsetToIndices('global_idx')};\n    var index = ${input.indicesGet('indices', axis)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${getElementAt('uniforms.size_in_split_axis', 'output_number - 1u', sizeInSplitAxis.length)};\n      ${input.indicesSet('indices', axis, 'index')};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;\n  return {\n    name: 'Split',\n    shaderCache: { hint: attributes.cacheKey, inputDependencies: ['rank'] },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: outputsTensorInfo,\n      dispatchGroup: { x: Math.ceil(inputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const split = (context: ComputeContext, attributes: SplitAttributes): void => {\n  validateInputs(context.inputs);\n  const updatedAttributes =\n    context.inputs.length === 1 ? attributes : createSplitAttributesFromInputs(context.inputs, attributes);\n  context.compute(createSplitProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n};\n\nexport const parseSplitAttributes = (attributes: Record<string, unknown>): SplitAttributes => {\n  const axis = attributes.axis as number;\n  const splitSizes: number[] = attributes.splitSizes as number[];\n  const numOutputs = (attributes.numOutputs as number) < 0 ? splitSizes.length : (attributes.numOutputs as number);\n  if (numOutputs !== splitSizes.length) {\n    throw new Error('numOutputs and splitSizes lengh must be equal');\n  }\n  return createAttributeWithCacheKey({ axis, numOutputs, splitSizes });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { BroadcastUtil, ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nconst createWhereOpProgramShader = (\n  shaderHelper: ShaderHelper,\n  inputs: readonly TensorView[],\n  dimsOutput: readonly number[],\n  isBroadcast: boolean,\n  typeOutput: number,\n) => {\n  const output = outputVariable('output_data', typeOutput, dimsOutput.length, 4);\n  const a = inputVariable('a_data', inputs[1].dataType, inputs[1].dims.length, 4);\n  const b = inputVariable('b_data', inputs[2].dataType, inputs[2].dims.length, 4);\n  const c = inputVariable('c_data', inputs[0].dataType, inputs[0].dims.length, 4);\n\n  let assignment: string;\n  const expression = (a: string, b: string, c: string) => `select(${b}, ${a}, ${c})`;\n  if (!isBroadcast) {\n    assignment = output.setByOffset(\n      'global_idx',\n      expression(a.getByOffset('global_idx'), b.getByOffset('global_idx'), c.getByOffset('global_idx')),\n    );\n  } else {\n    const singleAssignment = (resStr: string, x: number, typeCast = '') => {\n      const expressionA = `a_data[index_a${x}][component_a${x}]`;\n      const expressionB = `b_data[index_b${x}][component_b${x}]`;\n      // eslint-disable-next-line no-bitwise\n      const expressionC = `bool(c_data[index_c${x}] & (0xffu << (component_c${x} * 8)))`;\n      return `\n            let output_indices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offset_a${x} = ${a.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let offset_b${x} = ${b.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let offset_c${x} = ${c.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let index_a${x} = offset_a${x} / 4u;\n            let index_b${x} = offset_b${x} / 4u;\n            let index_c${x} = offset_c${x} / 4u;\n            let component_a${x} = offset_a${x} % 4u;\n            let component_b${x} = offset_b${x} % 4u;\n            let component_c${x} = offset_c${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expression(expressionA, expressionB, expressionC)});\n          `;\n    };\n    if (typeOutput === DataType.bool) {\n      assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment('data', 0, 'u32')}\n            ${singleAssignment('data', 1, 'u32')}\n            ${singleAssignment('data', 2, 'u32')}\n            ${singleAssignment('data', 3, 'u32')}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n    } else {\n      assignment = `\n            ${singleAssignment('output_data[global_idx]', 0)}\n            ${singleAssignment('output_data[global_idx]', 1)}\n            ${singleAssignment('output_data[global_idx]', 2)}\n            ${singleAssignment('output_data[global_idx]', 3)}\n          `;\n    }\n  }\n\n  return `\n        ${shaderHelper.registerUniform('vec_size', 'u32').declareVariables(c, a, b, output)}\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.vec_size')}\n        ${assignment}\n      }`;\n};\n\nconst createWhereOpProgramInfo = (inputs: readonly TensorView[]): ProgramInfo => {\n  const dimsA = inputs[1].dims;\n  const dimsB = inputs[2].dims;\n  const dimsC = inputs[0].dims;\n  const outputDataType = inputs[1].dataType;\n\n  const isBroadcast = !(ShapeUtil.areEqual(dimsA, dimsB) && ShapeUtil.areEqual(dimsB, dimsC));\n  let outputShape = dimsA;\n  let outputSize = ShapeUtil.size(dimsA);\n  // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n  if (isBroadcast) {\n    const calculatedShape = BroadcastUtil.calcShape(BroadcastUtil.calcShape(dimsA, dimsB, false)!, dimsC, false);\n    if (!calculatedShape) {\n      throw new Error(\"Can't perform where op on the given tensors\");\n    }\n    outputShape = calculatedShape;\n    outputSize = ShapeUtil.size(outputShape);\n  }\n\n  const vecSize = Math.ceil(outputSize / 4);\n\n  return {\n    name: 'Where',\n    shaderCache: { inputDependencies: ['rank', 'rank', 'rank'] },\n    getShaderSource: (shaderHelper) =>\n      createWhereOpProgramShader(shaderHelper, inputs, outputShape, isBroadcast, outputDataType),\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputDataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */ / 4 /* vec size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: vecSize },\n        ...createTensorShapeVariables(dimsC, dimsA, dimsB, outputShape),\n      ],\n    }),\n  };\n};\n\nexport const where = (context: ComputeContext): void => {\n  context.compute(createWhereOpProgramInfo(context.inputs));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { argMax, argMin, parseArgMinMaxAttributes } from './ops/argminmax';\nimport { attention } from './ops/attention';\nimport { batchNorm } from './ops/batch-norm';\nimport { biasAdd } from './ops/bias-add';\nimport { biasSplitGelu } from './ops/bias-split-gelu';\nimport * as binaryOps from './ops/binary-op';\nimport { concat, parseConcatAttributes } from './ops/concat';\nimport { conv, parseConvAttributes } from './ops/conv';\nimport { convTranspose, parseConvTransposeAttributes } from './ops/conv-transpose';\nimport { cumsum, parseCumSumAttributes } from './ops/cumsum';\nimport { depthToSpace, parseDepthToSpaceAttributes } from './ops/depth-to-space';\nimport { einsum, parseEinsumAttributes } from './ops/einsum';\nimport { expand } from './ops/expand';\nimport { fastGelu } from './ops/fast-gelu';\nimport { gather, parseGatherAttributes } from './ops/gather';\nimport { gatherBlockQuantized, parseGatherBlockQuantizedAttributes } from './ops/gather-block-quantized';\nimport { gatherElements, parseGatherElementsAttributes } from './ops/gather-elements';\nimport { gemm, parseGemmAttributes } from './ops/gemm';\nimport { groupQueryAttention, parseGroupQueryAttentionAttributes } from './ops/group-query-attention';\nimport { instanceNorm } from './ops/instance-norm';\nimport { layerNorm } from './ops/layer-norm';\nimport { matMul } from './ops/matmul';\nimport { matMulNBits, parseMatMulNBitsAttributes } from './ops/matmulnbits';\nimport { multiHeadAttention, parseMultiHeadAttentionAttributes } from './ops/multihead-attention';\nimport { pad } from './ops/pad';\nimport * as pool from './ops/pool';\nimport { dequantizeLinear, parseDequantizeLinearAttributes } from './ops/quantize-linear';\nimport { range } from './ops/range';\nimport {\n  reduceL1,\n  reduceL2,\n  reduceLogSum,\n  reduceLogSumExp,\n  reduceMax,\n  reduceMean,\n  reduceMin,\n  reduceProd,\n  reduceSum,\n  reduceSumSquare,\n} from './ops/reduce';\nimport { parseResizeAttributes, resize } from './ops/resize';\nimport { rotaryEmbedding } from './ops/rotary-embedding';\nimport { skipLayerNorm } from './ops/skip-layer-norm';\nimport { parseSliceAttributes, slice } from './ops/slice';\nimport { parseSoftmaxAttributes, softmax } from './ops/softmax';\nimport { parseSplitAttributes, split } from './ops/split';\nimport { tile } from './ops/tile';\nimport { parseTransposeAttributes, transpose } from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport { where } from './ops/where';\nimport { ComputeContext } from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction] | [RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['ArgMax', [argMax, parseArgMinMaxAttributes]],\n  ['ArgMin', [argMin, parseArgMinMaxAttributes]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  ['Attention', [attention]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['BatchNormalization', [batchNorm]],\n  ['BiasAdd', [biasAdd]],\n  ['BiasSplitGelu', [biasSplitGelu]],\n  ['Cast', [unaryOps.cast, unaryOps.parseCastAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['Clip', [unaryOps.clip]],\n  ['Concat', [concat, parseConcatAttributes]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['ConvTranspose', [convTranspose, parseConvTransposeAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['CumSum', [cumsum, parseCumSumAttributes]],\n  ['DepthToSpace', [depthToSpace, parseDepthToSpaceAttributes]],\n  ['DequantizeLinear', [dequantizeLinear, parseDequantizeLinearAttributes]],\n  ['Div', [binaryOps.div]],\n  ['Einsum', [einsum, parseEinsumAttributes]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Equal', [binaryOps.equal]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Expand', [expand]],\n  ['FastGelu', [fastGelu]],\n  ['Floor', [unaryOps.floor]],\n  ['FusedConv', [conv, parseConvAttributes]],\n  ['Gather', [gather, parseGatherAttributes]],\n  ['GatherElements', [gatherElements, parseGatherElementsAttributes]],\n  ['GatherBlockQuantized', [gatherBlockQuantized, parseGatherBlockQuantizedAttributes]],\n  ['Gelu', [unaryOps.gelu]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['Greater', [binaryOps.greater]],\n  ['GreaterOrEqual', [binaryOps.greaterOrEqual]],\n  ['GroupQueryAttention', [groupQueryAttention, parseGroupQueryAttentionAttributes]],\n  ['HardSigmoid', [unaryOps.hardSigmoid, unaryOps.parseHardSigmoidAttributes]],\n  ['InstanceNormalization', [instanceNorm]],\n  ['LayerNormalization', [layerNorm]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['Less', [binaryOps.less]],\n  ['LessOrEqual', [binaryOps.lessOrEqual]],\n  ['Log', [unaryOps.log]],\n  ['MatMul', [matMul]],\n  ['MatMulNBits', [matMulNBits, parseMatMulNBitsAttributes]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['MultiHeadAttention', [multiHeadAttention, parseMultiHeadAttentionAttributes]],\n  ['Neg', [unaryOps.neg]],\n  ['Not', [unaryOps.not]],\n  ['Pad', [pad]],\n  ['Pow', [binaryOps.pow]],\n  ['QuickGelu', [unaryOps.quickgelu, unaryOps.parseAlphaAttributes]],\n  ['Range', [range]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['ReduceMin', [reduceMin]],\n  ['ReduceMean', [reduceMean]],\n  ['ReduceMax', [reduceMax]],\n  ['ReduceSum', [reduceSum]],\n  ['ReduceProd', [reduceProd]],\n  ['ReduceL1', [reduceL1]],\n  ['ReduceL2', [reduceL2]],\n  ['ReduceLogSum', [reduceLogSum]],\n  ['ReduceLogSumExp', [reduceLogSumExp]],\n  ['ReduceSumSquare', [reduceSumSquare]],\n  ['Relu', [unaryOps.relu]],\n  ['Resize', [resize, parseResizeAttributes]],\n  ['RotaryEmbedding', [rotaryEmbedding]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Slice', [slice, parseSliceAttributes]],\n  ['SkipLayerNormalization', [skipLayerNorm]],\n  ['Split', [split, parseSplitAttributes]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Softmax', [softmax, parseSoftmaxAttributes]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Tile', [tile]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n  ['Where', [where]],\n]);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TRACE_FUNC_BEGIN, TRACE_FUNC_END } from 'onnxruntime-common';\n\nimport { WebGpuBackend } from '../backend-webgpu';\nimport { LOG_DEBUG } from '../log';\n\nimport { createShaderHelper } from './ops/common';\nimport { Artifact, GpuData, ProgramInfo } from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>; // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact | undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(\n    buildArtifact: Artifact,\n    inputs: GpuData[],\n    outputs: GpuData[],\n    dispatchGroup: [number, number, number],\n    uniformBufferBinding: GPUBindingResource | undefined,\n  ): void {\n    TRACE_FUNC_BEGIN(buildArtifact.programInfo.name);\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n    this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({ binding: entries.length, resource: { buffer: input.buffer } });\n    }\n    for (const output of outputs) {\n      entries.push({ binding: entries.length, resource: { buffer: output.buffer } });\n    }\n    if (uniformBufferBinding) {\n      entries.push({ binding: entries.length, resource: uniformBufferBinding });\n    }\n    const bindGroup = device.createBindGroup({\n      layout: buildArtifact.computePipeline.getBindGroupLayout(0),\n      entries,\n      label: buildArtifact.programInfo.name,\n    });\n\n    if (this.backend.sessionStatus === 'capturing') {\n      const commandInfo = {\n        kernelId: this.backend.currentKernelId!,\n        computePipeline: buildArtifact.computePipeline,\n        bindGroup,\n        dispatchGroup,\n      };\n      const sessionCommandList = this.backend.capturedCommandList.get(this.backend.currentSessionId!);\n      sessionCommandList!.push(commandInfo);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    computePassEncoder.setBindGroup(0, bindGroup);\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n    this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2 + 1);\n    this.backend.pendingDispatchNumber++;\n\n    if (\n      this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber ||\n      this.backend.queryType === 'at-passes'\n    ) {\n      this.backend.endComputePass();\n    }\n    if (this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber) {\n      this.backend.flush();\n    }\n    TRACE_FUNC_END(buildArtifact.programInfo.name);\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    TRACE_FUNC_BEGIN(programInfo.name);\n    const device = this.backend.device;\n    const extensions: string[] = [];\n    if (device.features.has('shader-f16')) {\n      extensions.push('enable f16;');\n    }\n    const shaderHelper = createShaderHelper(normalizedDispatchGroupSize, this.backend.device.limits);\n    const userCode = programInfo.getShaderSource(shaderHelper);\n    const code = `${extensions.join('\\n')}\\n${shaderHelper.additionalImplementations}\\n${userCode}`;\n    const shaderModule = device.createShaderModule({ code, label: programInfo.name });\n    LOG_DEBUG('verbose', () => `[WebGPU] ${programInfo.name} shader code: ${code}`);\n\n    const computePipeline = device.createComputePipeline({\n      compute: { module: shaderModule, entryPoint: 'main' },\n      layout: 'auto',\n      label: programInfo.name,\n    });\n\n    TRACE_FUNC_END(programInfo.name);\n    return { programInfo, computePipeline, uniformVariablesInfo: shaderHelper.variablesInfo };\n  }\n\n  normalizeDispatchGroupSize(\n    dispatchGroup: ReturnType<ProgramInfo['getRunData']>['dispatchGroup'],\n  ): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : dispatchGroup.y || 1;\n    const z = typeof dispatchGroup === 'number' ? 1 : dispatchGroup.z || 1;\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env, Tensor, TRACE, TRACE_FUNC_BEGIN, TRACE_FUNC_END } from 'onnxruntime-common';\n\nimport { DataType, tensorDataTypeEnumToString } from '../wasm-common';\n\nimport { configureLogger, LOG_DEBUG } from './log';\nimport { createView, TensorView } from './tensor-view';\nimport { createGpuDataManager, downloadGpuData, GpuDataManager } from './webgpu/gpu-data-manager';\nimport { RunFunction, WEBGPU_OP_RESOLVE_RULES } from './webgpu/op-resolve-rules';\nimport { ProgramManager } from './webgpu/program-manager';\nimport {\n  AdapterInfo,\n  ComputeContext,\n  GpuArchitecture,\n  GpuData,\n  GpuVendor,\n  ProgramInfo,\n  ProgramInputTensorInfoDependency,\n  SessionState,\n  TimestampQuery,\n} from './webgpu/types';\n\ninterface CommandInfo {\n  readonly kernelId: number;\n  readonly computePipeline: GPUComputePipeline;\n  readonly bindGroup: GPUBindGroup;\n  readonly dispatchGroup: [number, number, number];\n}\n\ninterface KernelInfo {\n  readonly kernelType: string;\n  readonly kernelName: string;\n  readonly kernelEntry: RunFunction;\n  readonly attributes: [((attribute: unknown) => unknown) | undefined, unknown];\n}\n\ninterface PendingKernelInfo {\n  readonly kernelId: number;\n  readonly programName: string;\n  readonly inputTensorViews: readonly TensorView[];\n  readonly outputTensorViews: readonly TensorView[];\n}\n\nconst getProgramInputTensorInfoDependencyKey = (\n  inputTensors: readonly TensorView[],\n  inputDependencies: readonly ProgramInputTensorInfoDependency[],\n): string => {\n  if (inputDependencies.length !== inputTensors.length) {\n    throw new Error(\n      `inputDependencies length ${inputDependencies.length} is not equal to inputTensors length ${\n        inputTensors.length\n      }.`,\n    );\n  }\n\n  const inputInfos: string[] = [];\n  for (let i = 0; i < inputTensors.length; ++i) {\n    const type = inputTensors[i].dataType;\n    switch (inputDependencies[i]) {\n      case 'none': {\n        inputInfos.push('');\n        break;\n      }\n      case 'type': {\n        inputInfos.push(`${type}`);\n        break;\n      }\n      case 'rank': {\n        const rank = inputTensors[i].dims.length;\n        inputInfos.push(`${type};${rank}`);\n        break;\n      }\n      case 'dims': {\n        const dims = inputTensors[i].dims.join(',');\n        inputInfos.push(`${type};${dims}`);\n        break;\n      }\n      default:\n        throw new Error(`unsupported input dependency: ${inputDependencies[i]}`);\n    }\n  }\n\n  return inputInfos.join('|');\n};\n\n/**\n * get a unique key representing the program from the program info, input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey = (\n  programInfo: ProgramInfo,\n  inputTensors: readonly TensorView[],\n  is1DimensionDispatch: boolean,\n): string => {\n  // final key format:\n  // <PROGRAM_NAME>[<PROGRAM_CUSTOM_CACHE_HINT>]:is1DimensionDispatch:<INPUTS_INFO_0>|<INPUTS_INFO_1>|...\n  let key = programInfo.name;\n  if (programInfo.shaderCache?.hint) {\n    key += '[' + programInfo.shaderCache.hint + ']';\n  }\n  key +=\n    ':' +\n    is1DimensionDispatch +\n    `:${getProgramInputTensorInfoDependencyKey(\n      inputTensors,\n      programInfo.shaderCache?.inputDependencies ??\n        new Array<ProgramInputTensorInfoDependency>(inputTensors.length).fill('dims'),\n    )}`;\n  return key;\n};\n\nclass AdapterInfoImpl implements AdapterInfo {\n  readonly architecture?: string;\n  readonly vendor?: string;\n\n  constructor(adapterInfo: GPUAdapterInfo) {\n    if (adapterInfo) {\n      this.architecture = adapterInfo.architecture;\n      this.vendor = adapterInfo.vendor;\n    }\n  }\n\n  isArchitecture(architecture: GpuArchitecture): boolean {\n    return this.architecture === architecture;\n  }\n\n  isVendor(vendor: GpuVendor): boolean {\n    return this.vendor === vendor;\n  }\n}\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  adapterInfo: AdapterInfoImpl;\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the session ID of which is currently being run.\n   * `null` means no session is being run.\n   * only valid when session.run is executed.\n   */\n  currentSessionId: number | null = null;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number | null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, { [key: string]: unknown }>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): { [key: string]: unknown } {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  // KernelID -> kernelInfo mapping\n  kernels: Map<number, KernelInfo>;\n  private commandEncoder: GPUCommandEncoder | null = null;\n  private computePassEncoder: GPUComputePassEncoder | null = null;\n  maxDispatchNumber = 16;\n  pendingDispatchNumber = 0;\n\n  // info of kernels pending submission for a single batch\n  private pendingKernels: PendingKernelInfo[] = [];\n  // queryReadBuffer -> pendingKernels mapping for all the batches\n  private pendingQueries: Map<GPUBuffer, PendingKernelInfo[]> = new Map();\n  private queryResolveBuffer?: GPUBuffer;\n  private querySet?: GPUQuerySet;\n  private queryTimeBase?: bigint;\n  queryType: TimestampQuery;\n\n  env: Env;\n  sessionStatus: SessionState = 'default';\n  /**\n   * a SessionID -> CommandInfo[] mapping. It's used to record all GPU commands for corresponding session.\n   */\n  capturedCommandList: Map<number, CommandInfo[]> = new Map();\n\n  /**\n   * a SessionID -> PendingKernelInfo[] mapping for profiling.\n   */\n  private capturedPendingKernels: Map<number, PendingKernelInfo[]> = new Map();\n\n  /**\n   * a SessionID -> a Map of (InputOutputIndex -> [ID, GPUBuffer]) mapping.\n   */\n  sessionExternalDataMapping: Map<number, Map<number, [number, GPUBuffer]>> = new Map();\n\n  async initialize(env: Env, adapter: GPUAdapter): Promise<void> {\n    this.env = env;\n    const requiredFeatures: GPUFeatureName[] = [];\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n        maxBufferSize: adapter.limits.maxBufferSize,\n        maxComputeInvocationsPerWorkgroup: adapter.limits.maxComputeInvocationsPerWorkgroup,\n        maxComputeWorkgroupSizeX: adapter.limits.maxComputeWorkgroupSizeX,\n        maxComputeWorkgroupSizeY: adapter.limits.maxComputeWorkgroupSizeY,\n        maxComputeWorkgroupSizeZ: adapter.limits.maxComputeWorkgroupSizeZ,\n      },\n      requiredFeatures,\n    };\n\n    if (adapter.features.has('chromium-experimental-timestamp-query-inside-passes')) {\n      requiredFeatures.push('chromium-experimental-timestamp-query-inside-passes' as GPUFeatureName);\n    } else if (adapter.features.has('timestamp-query')) {\n      requiredFeatures.push('timestamp-query');\n    }\n    if (adapter.features.has('shader-f16')) {\n      requiredFeatures.push('shader-f16');\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.adapterInfo = new AdapterInfoImpl(adapter.info || (await adapter.requestAdapterInfo()));\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n\n    // set up flags for logger\n    configureLogger(env.logLevel!, !!env.debug);\n\n    // TODO: set up flags\n\n    this.device.onuncapturederror = (ev) => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    Object.defineProperty(this.env.webgpu, 'device', {\n      value: this.device,\n      writable: false,\n      enumerable: true,\n      configurable: false,\n    });\n    Object.defineProperty(this.env.webgpu, 'adapter', {\n      value: adapter,\n      writable: false,\n      enumerable: true,\n      configurable: false,\n    });\n\n    // init queryType, which is necessary for InferenceSession.create\n    this.setQueryType();\n  }\n\n  dispose(): void {\n    if (typeof this.querySet !== 'undefined') {\n      this.querySet.destroy();\n    }\n    this.gpuDataManager.dispose();\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      const commandEncoder = this.getCommandEncoder();\n      const computePassDescriptor: GPUComputePassDescriptor = {};\n\n      if (this.queryType === 'at-passes') {\n        computePassDescriptor.timestampWrites = {\n          querySet: this.querySet!,\n          beginningOfPassWriteIndex: this.pendingDispatchNumber * 2,\n          endOfPassWriteIndex: this.pendingDispatchNumber * 2 + 1,\n        };\n      }\n\n      this.computePassEncoder = commandEncoder.beginComputePass(computePassDescriptor);\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    if (!this.commandEncoder) {\n      return;\n    }\n\n    TRACE_FUNC_BEGIN();\n\n    this.endComputePass();\n    let queryReadBuffer: GPUBuffer;\n    if (this.queryType !== 'none') {\n      this.commandEncoder.resolveQuerySet(\n        this.querySet!,\n        0,\n        this.pendingDispatchNumber * 2,\n        this.queryResolveBuffer!,\n        0,\n      );\n\n      queryReadBuffer = this.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        { size: this.pendingDispatchNumber * 2 * 8, usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST },\n      );\n\n      this.pendingQueries.set(queryReadBuffer, this.pendingKernels);\n      this.pendingKernels = [];\n      this.commandEncoder.copyBufferToBuffer(\n        this.queryResolveBuffer!,\n        0,\n        queryReadBuffer,\n        0,\n        this.pendingDispatchNumber * 2 * 8,\n      );\n    }\n\n    this.device.queue.submit([this.commandEncoder.finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n\n    if (this.queryType !== 'none') {\n      void queryReadBuffer!.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(queryReadBuffer.getMappedRange());\n        const pendingKernels = this.pendingQueries.get(queryReadBuffer)!;\n        for (let i = 0; i < mappedData.length / 2; i++) {\n          const pendingKernelInfo = pendingKernels[i];\n          const kernelId = pendingKernelInfo.kernelId;\n          const kernelInfo = this.kernels.get(kernelId)!;\n          const kernelType = kernelInfo.kernelType;\n          const kernelName = kernelInfo.kernelName;\n          const programName = pendingKernelInfo.programName;\n          const inputTensorViews = pendingKernelInfo.inputTensorViews;\n          const outputTensorViews = pendingKernelInfo.outputTensorViews;\n          const startTimeU64 = mappedData[i * 2];\n          const endTimeU64 = mappedData[i * 2 + 1];\n\n          if (typeof this.queryTimeBase === 'undefined') {\n            this.queryTimeBase = startTimeU64;\n          }\n\n          const startTime = Number(startTimeU64 - this.queryTimeBase);\n          const endTime = Number(endTimeU64 - this.queryTimeBase);\n\n          if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n            throw new RangeError('incorrect timestamp range');\n          }\n\n          if (this.env.webgpu.profiling?.ondata) {\n            this.env.webgpu.profiling.ondata({\n              version: 1,\n              inputsMetadata: inputTensorViews.map((value) => ({\n                dims: value.dims,\n                dataType: tensorDataTypeEnumToString(value.dataType),\n              })),\n              outputsMetadata: outputTensorViews.map((value) => ({\n                dims: value.dims,\n                dataType: tensorDataTypeEnumToString(value.dataType),\n              })),\n              kernelId,\n              kernelType,\n              kernelName,\n              programName,\n              startTime,\n              endTime,\n            });\n          } else {\n            // if no callback is provided, print the profiling message to console\n            let inputShapes = '';\n            inputTensorViews.forEach((value, i) => {\n              inputShapes += `input[${i}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n            });\n            let outputShapes = '';\n            outputTensorViews.forEach((value, i) => {\n              outputShapes += `output[${i}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n            });\n            // eslint-disable-next-line no-console\n            console.log(\n              `[profiling] kernel \"${kernelId}|${kernelType}|${kernelName}|${programName}\" ${inputShapes}${\n                outputShapes\n              }execution time: ${endTime - startTime} ns`,\n            );\n          }\n          TRACE('GPU', `${programName}::${startTimeU64}::${endTimeU64}`);\n        }\n        queryReadBuffer.unmap();\n        this.pendingQueries.delete(queryReadBuffer);\n      });\n    }\n    TRACE_FUNC_END();\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program a ProgramInfo instance\n   * @param inputTensorViews a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(\n    program: ProgramInfo,\n    inputTensorViews: readonly TensorView[],\n    outputIndices: readonly number[],\n    createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n    createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView,\n    outputCount: number,\n  ): TensorView[] {\n    TRACE_FUNC_BEGIN(program.name);\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputTensorViews.length; ++i) {\n      const data = inputTensorViews[i].data;\n      // if tensor view data is 0, it means the output is zero-sized tensor, and there is no GPU data for it.\n      if (data === 0) {\n        continue;\n      }\n      const gpuData = this.gpuDataManager.get(data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${data}`);\n      }\n      inputDatas.push(gpuData);\n    }\n\n    const { outputs, dispatchGroup, programUniforms } = program.getRunData(inputTensorViews);\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs.\n      // value -3 is used for placeholder output. So -3, -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (\n        !Number.isInteger(validatedOutputIndices[i]) ||\n        validatedOutputIndices[i] < -3 ||\n        validatedOutputIndices[i] >= outputCount\n      ) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      if (validatedOutputIndices[i] === -3) {\n        continue;\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView =\n        isTemporary || isPersistent\n          ? createIntermediateOutput(outputs[i].dataType, outputs[i].dims)\n          : createKernelOutput(validatedOutputIndices[i], outputs[i].dataType, outputs[i].dims);\n      outputTensorViews.push(tensorView);\n      // if tensor view data is 0, it means the output is zero-sized tensor, and there is no GPU data for it.\n      if (tensorView.data === 0) {\n        continue;\n      }\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputDatas.push(gpuData);\n    }\n\n    // when there are any zero-sized tensor in the inputs or outputs, we should report error unless all outputs are\n    // zero-sized tensors.\n    if (inputDatas.length !== inputTensorViews.length || outputDatas.length !== outputTensorViews.length) {\n      // if all outputs are zero-sized tensors, there is no need to run the program.\n      if (outputDatas.length === 0) {\n        TRACE_FUNC_END(program.name);\n        return outputTensorViews;\n      }\n      // if some outputs are zero-sized tensors, report an error.\n      //\n      // TODO: so far we don't see any use case that outputs include both zero-sized tensors and non-zero-sized tensors.\n      // If we see such use case, we need to make a change here to support it.\n      throw new Error(\n        `Program ${program.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`,\n      );\n    }\n\n    // load uniforms\n    // TODO: add cache for uniform (is it necessary?)\n    //\n    let uniformBufferBinding: GPUBindingResource | undefined;\n    if (programUniforms) {\n      let currentOffset = 0;\n      const offsets: number[] = [];\n\n      programUniforms.forEach((v) => {\n        const data = typeof v.data === 'number' ? [v.data] : v.data;\n        if (data.length === 0) {\n          return;\n        }\n        // https://www.w3.org/TR/WGSL/#alignof\n        const sizeOfElement = v.type === DataType.float16 ? 2 : 4;\n        let sizeOfVecOrMat;\n        let baseAlignment;\n        if (v.type === DataType.float16) {\n          baseAlignment = data.length > 4 ? 16 : data.length > 2 ? 8 : data.length * sizeOfElement;\n          sizeOfVecOrMat = data.length > 4 ? 16 : sizeOfElement * data.length;\n        } else {\n          baseAlignment = data.length <= 2 ? data.length * sizeOfElement : 16;\n          sizeOfVecOrMat = 16;\n        }\n        currentOffset = Math.ceil(currentOffset / baseAlignment) * baseAlignment;\n        offsets.push(currentOffset);\n        // For non-float16 type, when data.length > 4, the uniform variable is of type array<vec4<i32|u32|f32>,N>, where\n        // N = Math.ceil(data.length / 4) and SizeOf(vec4<i32|u32|f32>) = 16. The total byte length is N *\n        // SizeOf(vec4<i32|u32|f32>). For float16 type, when data.length > 4, the uniform variable is of type\n        // array<mat2x4<f16>,N>, where N = Math.ceil(data.length / 8) and SizeOf(mat2x4<f16>) = 16. The total byte\n        // length is N * SizeOf(mat2x4<f16>).\n        const elementPerVecOrMat = v.type === DataType.float16 ? 8 : 4;\n        currentOffset +=\n          data.length > 4 ? Math.ceil(data.length / elementPerVecOrMat) * sizeOfVecOrMat : data.length * sizeOfElement;\n      });\n\n      // Meet alignment of struct here: https://www.w3.org/TR/WGSL/#alignment-and-size. For simplicity, set\n      // maxAlignmentOfField to 16 since the underlying buffer has been rounded up to 16.\n      const maxAlignmentOfField = 16;\n      currentOffset = Math.ceil(currentOffset / maxAlignmentOfField) * maxAlignmentOfField;\n      const arrayBuffer = new ArrayBuffer(currentOffset);\n      programUniforms.forEach((v, i) => {\n        const offset = offsets[i];\n        const data = typeof v.data === 'number' ? [v.data] : v.data;\n        if (v.type === DataType.int32) {\n          new Int32Array(arrayBuffer, offset, data.length).set(data);\n        } else if (v.type === DataType.uint32) {\n          new Uint32Array(arrayBuffer, offset, data.length).set(data);\n        } else if (v.type === DataType.float16) {\n          new Uint16Array(arrayBuffer, offset, data.length).set(data);\n        } else if (v.type === DataType.float) {\n          new Float32Array(arrayBuffer, offset, data.length).set(data);\n        } else {\n          throw new Error(`Unsupported uniform type: ${tensorDataTypeEnumToString(v.type)}`);\n        }\n      });\n\n      const uniformBufferData =\n        // eslint-disable-next-line no-bitwise\n        this.gpuDataManager.create(currentOffset, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n      this.device.queue.writeBuffer(uniformBufferData.buffer, 0, arrayBuffer, 0, currentOffset);\n      this.gpuDataManager.release(uniformBufferData.id);\n      uniformBufferBinding = { offset: 0, size: currentOffset, buffer: uniformBufferData.buffer };\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(dispatchGroup);\n    const is1DimensionDispatch = normalizedDispatchGroup[1] === 1 && normalizedDispatchGroup[2] === 1;\n    // get program info\n    const key = getProgramInfoUniqueKey(program, inputTensorViews, is1DimensionDispatch);\n    let artifact = this.programManager.getArtifact(key);\n    if (!artifact) {\n      artifact = this.programManager.build(program, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n      LOG_DEBUG('info', () => `[artifact] key: ${key}, programName: ${program.name}`);\n    }\n\n    // validate uniform variables\n    if (programUniforms && artifact.uniformVariablesInfo) {\n      if (programUniforms.length !== artifact.uniformVariablesInfo.length) {\n        throw new Error(\n          `Uniform variables count mismatch: expect ${artifact.uniformVariablesInfo.length}, got ${\n            programUniforms.length\n          } in program \"${artifact.programInfo.name}\".`,\n        );\n      }\n      for (let i = 0; i < programUniforms.length; i++) {\n        const uniform = programUniforms[i];\n        const actualType = uniform.type;\n        const actualLength = typeof uniform.data === 'number' ? 1 : uniform.data.length;\n        const [type, length] = artifact.uniformVariablesInfo[i];\n        if (actualType !== type || actualLength !== length) {\n          throw new Error(\n            `Uniform variable ${i} mismatch: expect type ${type} with size ${length}, got type ${\n              actualType\n            } with size ${actualLength} in program \"${artifact.programInfo.name}\".`,\n          );\n        }\n      }\n    }\n\n    LOG_DEBUG(\n      'info',\n      () =>\n        `[ProgramManager] run \"${program.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n          normalizedDispatchGroup[1]\n        }x${normalizedDispatchGroup[2]}`,\n    );\n\n    if (this.queryType !== 'none' || this.sessionStatus === 'capturing') {\n      const pendingKernelInfo: PendingKernelInfo = {\n        kernelId: this.currentKernelId!,\n        programName: artifact.programInfo.name,\n        inputTensorViews,\n        outputTensorViews,\n      };\n      this.pendingKernels.push(pendingKernelInfo);\n\n      if (this.sessionStatus === 'capturing') {\n        const sessionPendingKernels = this.capturedPendingKernels.get(this.currentSessionId!);\n        sessionPendingKernels!.push(pendingKernelInfo);\n      }\n    }\n\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup, uniformBufferBinding);\n\n    TRACE_FUNC_END(program.name);\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    await this.gpuDataManager.download(gpuDataId, getTargetBuffer);\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(kernelType: string, kernelId: number, attribute: unknown, kernelName: string): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(kernelType);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${kernelType}`);\n    }\n\n    const kernelInfo: KernelInfo = {\n      kernelType,\n      kernelName,\n      kernelEntry: op[0],\n      attributes: [op[1], attribute],\n    };\n    this.kernels.set(kernelId, kernelInfo);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext, errors: Array<Promise<string | null>>): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const kernelType = kernel.kernelType;\n    const kernelName = kernel.kernelName;\n    const kernelEntry = kernel.kernelEntry;\n    const attributes = kernel.attributes;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"[${kernelType}] ${kernelName}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"[${kernelType}] ${kernelName}\"...`);\n\n    const useErrorScope = this.env.debug;\n\n    this.temporaryData = [];\n    try {\n      if (useErrorScope) {\n        this.device.pushErrorScope('validation');\n      }\n\n      kernelEntry(context, attributes[1]);\n      return 0; // ORT_OK\n    } catch (e) {\n      errors.push(Promise.resolve(`[WebGPU] Kernel \"[${kernelType}] ${kernelName}\" failed. ${e}`));\n      return 1; // ORT_FAIL\n    } finally {\n      if (useErrorScope) {\n        errors.push(\n          this.device\n            .popErrorScope()\n            .then((err) =>\n              err ? `GPU validation error for kernel \"[${kernelType}] ${kernelName}\": ${err.message}` : null,\n            ),\n        );\n      }\n\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n\n  // #region external buffer\n  registerBuffer(sessionId: number, index: number, buffer: GPUBuffer, size: number): number {\n    let sessionInputOutputMapping = this.sessionExternalDataMapping.get(sessionId);\n    if (!sessionInputOutputMapping) {\n      sessionInputOutputMapping = new Map();\n      this.sessionExternalDataMapping.set(sessionId, sessionInputOutputMapping);\n    }\n\n    // the buffer may be user created, or managed by GPU data manager.\n    // The GPU data manager will not manage these buffers. we register them as external buffers.\n    //\n    // The map `sessionInputOutputMapping` is used to store the data ID and buffer for each input/output. Once a\n    // specific input/output is registered, the data ID will not change.\n    const previousBuffer = sessionInputOutputMapping.get(index);\n    const id = this.gpuDataManager.registerExternalBuffer(buffer, size, previousBuffer);\n    sessionInputOutputMapping.set(index, [id, buffer]);\n    return id;\n  }\n  unregisterBuffers(sessionId: number): void {\n    const sessionInputOutputMapping = this.sessionExternalDataMapping.get(sessionId);\n    if (sessionInputOutputMapping) {\n      sessionInputOutputMapping.forEach((bufferInfo) => this.gpuDataManager.unregisterExternalBuffer(bufferInfo[0]));\n      this.sessionExternalDataMapping.delete(sessionId);\n    }\n  }\n  getBuffer(gpuDataId: number): GPUBuffer {\n    const gpuData = this.gpuDataManager.get(gpuDataId);\n    if (!gpuData) {\n      throw new Error(`no GPU data for buffer: ${gpuDataId}`);\n    }\n    return gpuData.buffer;\n  }\n  createDownloader(\n    gpuBuffer: GPUBuffer,\n    size: number,\n    type: Tensor.GpuBufferDataTypes,\n  ): () => Promise<Tensor.DataType> {\n    return async () => {\n      const data = await downloadGpuData(this, gpuBuffer, size);\n      return createView(data.buffer, type);\n    };\n  }\n  // #endregion\n  writeTimestamp(index: number): void {\n    if (this.queryType !== 'inside-passes') {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.computePassEncoder as any).writeTimestamp(this.querySet, index);\n  }\n  setQueryType(): void {\n    this.queryType = 'none';\n    if (\n      this.env.webgpu.profiling?.mode === 'default' ||\n      (typeof this.env.trace === 'undefined' ? this.env.wasm.trace : this.env.trace)\n    ) {\n      if (this.device.features.has('chromium-experimental-timestamp-query-inside-passes')) {\n        this.queryType = 'inside-passes';\n      } else if (this.device.features.has('timestamp-query')) {\n        this.queryType = 'at-passes';\n      }\n\n      if (this.queryType !== 'none' && typeof this.querySet === 'undefined') {\n        this.querySet = this.device.createQuerySet({\n          type: 'timestamp',\n          count: this.maxDispatchNumber * 2,\n        });\n        this.queryResolveBuffer = this.device.createBuffer(\n          // eslint-disable-next-line no-bitwise\n          { size: this.maxDispatchNumber * 2 * 8, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE },\n        );\n      }\n    }\n  }\n\n  captureBegin(): void {\n    LOG_DEBUG('info', 'captureBegin');\n    if (!this.capturedCommandList.get(this.currentSessionId!)) {\n      this.capturedCommandList.set(this.currentSessionId!, []);\n    }\n    if (!this.capturedPendingKernels.get(this.currentSessionId!)) {\n      this.capturedPendingKernels.set(this.currentSessionId!, []);\n    }\n    // flush the left commands before we change the status.\n    this.flush();\n    this.sessionStatus = 'capturing';\n  }\n  captureEnd(): void {\n    LOG_DEBUG('info', 'captureEnd');\n    // flush the left commands before we change the status.\n    this.flush();\n    this.sessionStatus = 'default';\n  }\n  replay(): void {\n    LOG_DEBUG('info', 'replay');\n    this.sessionStatus = 'replaying';\n    const sessionCommandList = this.capturedCommandList.get(this.currentSessionId!);\n    const sessionPendingKernels = this.capturedPendingKernels.get(this.currentSessionId!);\n    const length = sessionCommandList!.length;\n    this.pendingKernels = [];\n    for (let i = 0; i < length; i++) {\n      const computePassEncoder = this.getComputePassEncoder();\n      const command = sessionCommandList![i];\n      this.writeTimestamp(this.pendingDispatchNumber * 2);\n      computePassEncoder.setPipeline(command.computePipeline);\n      computePassEncoder.setBindGroup(0, command.bindGroup);\n      computePassEncoder.dispatchWorkgroups(...command.dispatchGroup);\n      this.writeTimestamp(this.pendingDispatchNumber * 2 + 1);\n      this.pendingDispatchNumber++;\n      if (this.queryType !== 'none') {\n        this.pendingKernels.push(sessionPendingKernels![i]);\n      }\n      if (this.pendingDispatchNumber >= this.maxDispatchNumber || this.queryType === 'at-passes') {\n        this.endComputePass();\n      }\n      if (this.pendingDispatchNumber >= this.maxDispatchNumber) {\n        this.flush();\n      }\n    }\n    // flush the left commands before we change the status.\n    this.flush();\n    this.sessionStatus = 'default';\n  }\n\n  onReleaseSession(sessionId: number): void {\n    this.unregisterBuffers(sessionId);\n    if (this.capturedCommandList.has(sessionId)) {\n      this.capturedCommandList.delete(sessionId);\n    }\n    if (this.capturedPendingKernels.has(sessionId)) {\n      this.capturedPendingKernels.delete(sessionId);\n    }\n    this.gpuDataManager.onReleaseSession(sessionId);\n  }\n\n  onRunStart(sessionId: number): void {\n    this.currentSessionId = sessionId;\n    this.setQueryType();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { WebNNBackend } from '../backend-webnn';\nimport { LOG_DEBUG } from '../log';\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"webnn.d.ts\" />\n\nexport type TensorId = number;\n\n/**\n * Manages TensorId to MLTensor mapping.\n */\nexport interface TensorManager {\n  /**\n   * Reserve a new TensorId.\n   */\n  reserveTensorId(): TensorId;\n  /**\n   * Release a TensorId.\n   */\n  releaseTensorId(tensorId: TensorId): void;\n  /**\n   * Ensure a MLTensor is created for the TensorId.\n   */\n  ensureTensor(\n    tensorId: TensorId,\n    dataType: MLOperandDataType,\n    shape: readonly number[],\n    copyOld: boolean,\n  ): Promise<MLTensor>;\n  /**\n   * Upload data to a MLTensor.\n   */\n  upload(tensorId: TensorId, data: Uint8Array): void;\n  /**\n   * Download data from a MLTensor.\n   */\n  download(tensorId: TensorId): Promise<ArrayBuffer>;\n  download(tensorId: TensorId, dstTensor: ArrayBufferView | ArrayBuffer): Promise<undefined>;\n  /**\n   * Release all tensors for a MLContext.\n   */\n  releaseTensorsForContext(mlContext: MLContext): void;\n  /**\n   * Register an externally created MLTensor with a given MLContext and return a TensorId.\n   */\n  registerTensor(mlContext: MLContext, mlTensor: MLTensor, dataType: MLOperandDataType, shape: number[]): TensorId;\n}\n\nlet tensorGuid = 1;\nconst createNewTensorId = (): TensorId => tensorGuid++;\n\nexport type MLTensorEntry = [MLTensor, MLOperandDataType, readonly number[]];\n\n/**\n * TensorTracker tracks the MLTensor and pending upload data.\n *\n * We need to track the MLTensor and pending upload data because we delay the creation of MLTensor until\n * we know the data type and shape. This is because future implementations of WebNN will only support creating\n * MLTensors with dataTypes and shape.\n */\nclass TensorTracker {\n  private tensorEntry?: MLTensorEntry;\n  private activeUpload?: Uint8Array;\n  private tensorCache: MLTensorEntry[];\n\n  constructor(\n    private mlContext?: MLContext,\n    tensorEntry?: MLTensorEntry,\n  ) {\n    this.tensorEntry = tensorEntry;\n    this.tensorCache = tensorEntry ? [tensorEntry] : [];\n  }\n\n  public get tensor(): MLTensor | undefined {\n    return this.tensorEntry?.[0];\n  }\n\n  public get context(): MLContext {\n    if (!this.mlContext) {\n      throw new Error('MLContext has not been set.');\n    }\n    return this.mlContext;\n  }\n\n  public set context(mlContext: MLContext) {\n    if (this.mlContext && this.mlContext !== mlContext) {\n      throw new Error('MLTensor in use in a different MLContext.');\n    }\n    this.mlContext = mlContext;\n  }\n\n  public destroy(): void {\n    for (const [mlTensor] of this.tensorCache) {\n      mlTensor.destroy();\n    }\n    this.tensorCache = [];\n    this.tensorEntry = undefined;\n  }\n\n  public trySelectTensor(context: MLContext, tryMLTensor: MLTensor): boolean {\n    for (const [mlTensor, dataType, shape] of this.tensorCache) {\n      if (tryMLTensor === mlTensor) {\n        if (this.context !== context) {\n          throw new Error('MLTensor cannot be registered with a different MLContext.');\n        }\n        this.tensorEntry = [mlTensor, dataType, shape];\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public async ensureTensor(\n    dataType: MLOperandDataType,\n    shape: readonly number[],\n    copyOld: boolean,\n  ): Promise<MLTensor> {\n    if (this.tensorEntry) {\n      const [mlTensor, existingDataType, existingShape] = this.tensorEntry;\n      if (existingDataType === dataType && existingShape.every((v, i) => v === shape[i])) {\n        return mlTensor;\n      }\n    }\n\n    for (const [mlTensor, existingDataType, existingShape] of this.tensorCache) {\n      if (existingDataType === dataType && existingShape.every((v, i) => v === shape[i])) {\n        if (copyOld && this.tensorEntry) {\n          // WebNN does not support copyTensorToTensor, so we need to read and write the tensors.\n          LOG_DEBUG(\n            'verbose',\n            () => `[WebNN] Slowdown may occur, having to copy existing tensor {dataType: ${dataType}, shape: ${shape}}`,\n          );\n          const data = await this.context.readTensor(this.tensorEntry[0]);\n          this.context.writeTensor(mlTensor, data);\n        }\n        this.tensorEntry = [mlTensor, existingDataType, existingShape];\n        return mlTensor;\n      }\n    }\n    LOG_DEBUG('verbose', () => `[WebNN] MLContext.createTensor {dataType: ${dataType}, shape: ${shape}}`);\n    // eslint-disable-next-line no-bitwise\n    const usage = MLTensorUsage.READ | MLTensorUsage.WRITE;\n    const tensor = await this.context.createTensor({\n      dataType,\n      shape,\n      // Assign both shape and dimensions while transitioning to new API.\n      dimensions: shape,\n      usage,\n    });\n    this.tensorEntry = [tensor, dataType, shape];\n    this.tensorCache.push(this.tensorEntry);\n\n    if (this.activeUpload) {\n      this.mlContext?.writeTensor(tensor, this.activeUpload);\n      this.activeUpload = undefined;\n    }\n\n    return tensor;\n  }\n\n  public upload(data: Uint8Array): void {\n    if (!this.tensorEntry) {\n      this.activeUpload = new Uint8Array(data);\n      return;\n    }\n    this.mlContext?.writeTensor(this.tensorEntry[0], data);\n  }\n\n  public async download(dstBuffer?: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer | undefined> {\n    if (this.activeUpload) {\n      if (dstBuffer) {\n        if (dstBuffer instanceof ArrayBuffer) {\n          new Uint8Array(dstBuffer).set(this.activeUpload);\n        } else {\n          new Uint8Array(dstBuffer.buffer, dstBuffer.byteOffset, dstBuffer.byteLength).set(this.activeUpload);\n        }\n\n        return;\n      } else {\n        return this.activeUpload.buffer;\n      }\n    }\n    if (!this.tensorEntry) {\n      throw new Error('Tensor has not been created.');\n    }\n    if (dstBuffer) {\n      return this.context.readTensor(this.tensorEntry[0], dstBuffer);\n    }\n    return this.context.readTensor(this.tensorEntry[0]);\n  }\n}\n\nclass TensorManagerImpl implements TensorManager {\n  private tensorsById = new Map<TensorId, TensorTracker>();\n  private tensorIdsByContext = new Map<MLContext, Set<TensorId>>();\n\n  constructor(private backend: WebNNBackend) {}\n\n  public reserveTensorId(): TensorId {\n    const tensorId = createNewTensorId();\n    this.tensorsById.set(tensorId, new TensorTracker());\n    return tensorId;\n  }\n\n  public releaseTensorId(tensorId: TensorId): void {\n    const tensorTracker = this.tensorsById.get(tensorId);\n    if (!tensorTracker) {\n      return;\n    }\n    tensorTracker.destroy();\n    this.tensorsById.delete(tensorId);\n    for (const [mlContext, tensors] of this.tensorIdsByContext) {\n      if (tensors.has(tensorId)) {\n        tensors.delete(tensorId);\n        if (tensors.size === 0) {\n          this.tensorIdsByContext.delete(mlContext);\n        }\n        break;\n      }\n    }\n  }\n\n  public async ensureTensor(\n    tensorId: TensorId,\n    dataType: MLOperandDataType,\n    shape: number[],\n    copyOld: boolean,\n  ): Promise<MLTensor> {\n    LOG_DEBUG(\n      'verbose',\n      () =>\n        `[WebNN] TensorManager.ensureTensor {tensorId: ${tensorId}, dataType: ${\n          dataType\n        }, shape: ${shape}, copyOld: ${copyOld}}`,\n    );\n    const tensor = this.tensorsById.get(tensorId);\n    if (!tensor) {\n      throw new Error('Tensor not found.');\n    }\n    tensor.context = this.backend.currentContext;\n    if (!this.tensorIdsByContext.has(this.backend.currentContext)) {\n      this.tensorIdsByContext.set(this.backend.currentContext, new Set());\n    }\n    this.tensorIdsByContext.get(this.backend.currentContext)?.add(tensorId);\n    return tensor.ensureTensor(dataType, shape, copyOld);\n  }\n\n  public upload(tensorId: TensorId, data: Uint8Array): void {\n    this.tensorsById.get(tensorId)!.upload(data);\n  }\n\n  public async download(tensorId: TensorId): Promise<ArrayBuffer>;\n  public async download(tensorId: TensorId, dstBuffer: ArrayBufferView | ArrayBuffer): Promise<undefined>;\n  async download(tensorId: TensorId, dstBuffer?: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer | undefined> {\n    LOG_DEBUG(\n      'verbose',\n      () => `[WebNN] TensorManager.download {tensorId: ${tensorId}, dstBuffer: ${dstBuffer?.byteLength}}`,\n    );\n    return this.tensorsById.get(tensorId)!.download(dstBuffer);\n  }\n\n  public releaseTensorsForContext(mlContext: MLContext): void {\n    const tensors = this.tensorIdsByContext.get(mlContext);\n    if (!tensors) {\n      return;\n    }\n    for (const tensorId of tensors) {\n      this.tensorsById.get(tensorId)!.destroy();\n      this.tensorsById.delete(tensorId);\n    }\n    this.tensorIdsByContext.delete(mlContext);\n  }\n\n  public registerTensor(\n    mlContext: MLContext,\n    mlTensor: MLTensor,\n    dataType: MLOperandDataType,\n    shape: readonly number[],\n  ): TensorId {\n    for (const [tensorId, tensorTracker] of this.tensorsById) {\n      if (tensorTracker.trySelectTensor(mlContext, mlTensor)) {\n        return tensorId;\n      }\n    }\n    const tensorId = createNewTensorId();\n    this.tensorsById.set(tensorId, new TensorTracker(mlContext, [mlTensor, dataType, shape]));\n    let tensors = this.tensorIdsByContext.get(mlContext);\n    if (!tensors) {\n      tensors = new Set();\n      this.tensorIdsByContext.set(mlContext, tensors);\n    }\n    tensors.add(tensorId);\n    return tensorId;\n  }\n}\n\nexport const createTensorManager = (...args: ConstructorParameters<typeof TensorManagerImpl>): TensorManager =>\n  new TensorManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"webnn/webnn.d.ts\" />\n\nimport { Env, Tensor } from 'onnxruntime-common';\n\nimport { DataType } from '../wasm-common';\nimport { getInstance } from '../wasm-factory';\n\nimport { createView } from './tensor-view';\nimport { TensorId, createTensorManager } from './webnn/tensor-manager';\nimport { configureLogger, LOG_DEBUG } from './log';\n\n/*\n * TensorProto::data_type to WebNN OperandType mapping.\n */\nconst onnxDataTypeToWebnnDataType = new Map<DataType, MLOperandDataType>([\n  [DataType.float, 'float32'],\n  [DataType.float16, 'float16'],\n  [DataType.int32, 'int32'],\n  [DataType.uint32, 'uint32'],\n  [DataType.int64, 'int64'],\n  [DataType.uint64, 'uint64'],\n  [DataType.int8, 'int8'],\n  [DataType.uint8, 'uint8'],\n  [DataType.bool, 'uint8'],\n]);\n\n/**\n * WebNN backend implementation. This class is used to keep track of the MLTensors created by the backend and keep track\n * of the current MLContext being used by the sessions.\n */\nexport class WebNNBackend {\n  /**\n   * Tensor managers for each session.\n   */\n  private tensorManager = createTensorManager(this);\n  /**\n   * Maps from session id to MLContexts.\n   */\n  private mlContextBySessionId = new Map<number, MLContext>();\n  /**\n   * Maps from MLContext to session ids.\n   */\n  private sessionIdsByMLContext = new Map<MLContext, Set<number>>();\n  /**\n   * Current session id.\n   */\n  private activeSessionId?: number;\n\n  constructor(env: Env) {\n    configureLogger(env.logLevel!, !!env.debug);\n  }\n\n  public get currentSessionId(): number {\n    if (this.activeSessionId === undefined) {\n      throw new Error('No active session');\n    }\n    return this.activeSessionId;\n  }\n\n  public onRunStart(sessionId: number): void {\n    this.activeSessionId = sessionId;\n  }\n\n  public get currentContext(): MLContext {\n    const mlContext = this.getMLContext(this.currentSessionId);\n    if (!mlContext) {\n      throw new Error(`No MLContext found for session ${this.currentSessionId}`);\n    }\n    return mlContext;\n  }\n\n  public registerMLContext(sessionId: number, mlContext: MLContext): void {\n    this.mlContextBySessionId.set(sessionId, mlContext);\n    let sessionIds = this.sessionIdsByMLContext.get(mlContext);\n    if (!sessionIds) {\n      sessionIds = new Set();\n      this.sessionIdsByMLContext.set(mlContext, sessionIds);\n    }\n    sessionIds.add(sessionId);\n  }\n\n  public onReleaseSession(sessionId: number): void {\n    const mlContext = this.mlContextBySessionId.get(sessionId)!;\n    if (!mlContext) {\n      // Current session is not a WebNN session.\n      return;\n    }\n    this.mlContextBySessionId.delete(sessionId);\n    const sessionIds = this.sessionIdsByMLContext.get(mlContext)!;\n    sessionIds.delete(sessionId);\n    if (sessionIds.size === 0) {\n      this.sessionIdsByMLContext.delete(mlContext);\n      this.tensorManager.releaseTensorsForContext(mlContext);\n    }\n  }\n\n  public getMLContext(sessionId: number): MLContext | undefined {\n    return this.mlContextBySessionId.get(sessionId);\n  }\n\n  public reserveTensorId(): TensorId {\n    return this.tensorManager.reserveTensorId();\n  }\n\n  public releaseTensorId(tensorId: TensorId): void {\n    LOG_DEBUG('verbose', () => `[WebNN] releaseTensorId {tensorId: ${tensorId}}`);\n    this.tensorManager.releaseTensorId(tensorId);\n  }\n\n  public async ensureTensor(\n    tensorId: TensorId,\n    onnxDataType: DataType,\n    dimensions: number[],\n    copyOld: boolean,\n  ): Promise<MLTensor> {\n    const webnnDataType = onnxDataTypeToWebnnDataType.get(onnxDataType);\n    if (!webnnDataType) {\n      throw new Error(`Unsupported ONNX data type: ${onnxDataType}`);\n    }\n    return this.tensorManager.ensureTensor(tensorId, webnnDataType, dimensions, copyOld);\n  }\n\n  public uploadTensor(tensorId: TensorId, data: Uint8Array): void {\n    const wasm = getInstance();\n    if (!wasm.shouldTransferToMLTensor) {\n      throw new Error('Trying to upload to a MLTensor while shouldTransferToMLTensor is false');\n    }\n    LOG_DEBUG('verbose', () => `[WebNN] uploadTensor {tensorId: ${tensorId}, data: ${data.byteLength}}`);\n    this.tensorManager.upload(tensorId, data);\n  }\n\n  public async downloadTensor(tensorId: TensorId, dstBuffer: ArrayBufferView | ArrayBuffer): Promise<undefined> {\n    return this.tensorManager.download(tensorId, dstBuffer);\n  }\n\n  public createMLTensorDownloader(tensorId: TensorId, type: Tensor.MLTensorDataTypes): () => Promise<Tensor.DataType> {\n    return async () => {\n      const data = await this.tensorManager.download(tensorId);\n      return createView(data, type);\n    };\n  }\n\n  public registerMLTensor(tensor: MLTensor, onnxDataType: DataType, dimensions: number[]): TensorId {\n    const webnnDataType = onnxDataTypeToWebnnDataType.get(onnxDataType);\n    if (!webnnDataType) {\n      throw new Error(`Unsupported ONNX data type: ${onnxDataType}`);\n    }\n\n    const id = this.tensorManager.registerTensor(this.currentContext, tensor, webnnDataType, dimensions);\n    LOG_DEBUG(\n      'verbose',\n      () =>\n        `[WebNN] registerMLTensor {tensor: ${tensor}, dataType: ${webnnDataType}, dimensions: ${\n          dimensions\n        }} -> {tensorId: ${id}}`,\n    );\n    return id;\n  }\n\n  public flush(): void {\n    // Unlike the WebGPU backend, the WebNN backend does not need to flush any pending operations.\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport { calculateTensorSizeInBytes, DataType } from '../wasm-common';\n\nimport type { OrtWasmModule } from '../wasm-types';\n\nimport { WebGpuBackend } from './backend-webgpu';\nimport { LOG_DEBUG } from './log';\nimport { TensorView } from './tensor-view';\nimport { ShapeUtil } from './util';\nimport { AdapterInfo, ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo } from './webgpu/types';\nimport { WebNNBackend } from './backend-webnn';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n    private module: OrtWasmModule,\n    public readonly dataType: number,\n    public readonly data: number,\n    public readonly dims: readonly number[],\n  ) {}\n\n  getFloat32Array(): Float32Array {\n    if (this.dataType !== DataType.float) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0\n      ? new Float32Array()\n      : new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getBigInt64Array(): BigInt64Array {\n    if (this.dataType !== DataType.int64) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0\n      ? new BigInt64Array()\n      : new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getInt32Array(): Int32Array {\n    if (this.dataType !== DataType.int32) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getUint16Array(): Uint16Array {\n    if (this.dataType !== DataType.float16 && this.dataType !== DataType.uint16) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Uint16Array() : new Uint16Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly adapterInfo: AdapterInfo;\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  readonly outputCount: number;\n  get kernelCustomData(): { [key: string]: unknown } {\n    return this.backend.currentKernelCustomData;\n  }\n  get customDataBuffer(): Uint8Array {\n    return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n  }\n  private customDataOffset = 0;\n  private customDataSize = 0;\n  constructor(\n    private module: OrtWasmModule,\n    private backend: WebGpuBackend,\n    contextDataOffset: number,\n  ) {\n    this.adapterInfo = backend.adapterInfo;\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = contextDataOffset >>> 2;\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n    this.outputCount = heapU32[dataIndex++];\n    this.customDataOffset = heapU32[dataIndex++];\n    this.customDataSize = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  getMaxComputeWorkgroupSizes(): [number, number, number] {\n    return [\n      this.backend.device.limits.maxComputeWorkgroupSizeX,\n      this.backend.device.limits.maxComputeWorkgroupSizeY,\n      this.backend.device.limits.maxComputeWorkgroupSizeZ,\n    ];\n  }\n\n  getMaxComputeWorkgroupStoragesize(): number {\n    return this.backend.device.limits.maxComputeWorkgroupStorageSize;\n  }\n\n  compute(program: ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping): TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n      inputsOutputsMapping?.inputs?.map((i) => (typeof i === 'number' ? this.inputs[i] : i)) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n      new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const bufferSize = calculateTensorSizeInBytes(dataType, dims);\n      if (!bufferSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const gpuDataId = bufferSize > 0 ? this.backend.gpuDataManager.create(bufferSize).id : 0;\n      return new TensorViewImpl(this.module, dataType, gpuDataId, dims);\n    };\n    return this.backend.run(\n      program,\n      mappedInputs,\n      outputIndices,\n      createKernelOutput,\n      createTemporaryOutput,\n      this.outputCount,\n    );\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput!(this.opKernelContext, index, data);\n    } catch (e) {\n      throw new Error(\n        `Failed to generate kernel's output[${index}] with dims [${dims}]. ` +\n          'If you are running with pre-allocated output, please make sure the output type/dims are correct. ' +\n          `Error: ${e}`,\n      );\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\n/**\n * Initialize JSEP with WebGPU backend.\n *\n * This function will be called after the WebAssembly module is loaded and initialized (\"_OrtInit\" is called), once for\n * each of the following EPs if they are specified:\n * - \"webgpu\"\n * - \"webnn\"\n *\n * For WebGPU, this function expects:\n *  - WebGPU is enabled in build (BUILD_DEFS.DISABLE_JSEP === false).\n *  - WebGPU is available in current environment. (a valid GPUAdapter is passed in)\n *\n * For WebNN, this function expects:\n * - WebNN is enabled in build (BUILD_DEFS.DISABLE_JSEP === false).\n * - WebNN is available in current environment. (navigator.ml is not undefined)\n *\n * If the WebAssembly module is not built with JSEP support, this function will throw an error. This will invalidate\n * 'webgpu'/'webnn' backend.\n *\n * @param name - the name of the EP, either \"webgpu\" or \"webnn\"\n * @param module - the ORT WebAssembly module\n * @param env - the ORT environment variable (ort.env)\n * @param gpuAdapter - the pre-created GPU adapter\n */\nexport const init = async (\n  name: 'webgpu' | 'webnn',\n  module: OrtWasmModule,\n  env: Env,\n  gpuAdapter?: GPUAdapter,\n): Promise<void> => {\n  const jsepInit = module.jsepInit;\n  if (!jsepInit) {\n    throw new Error('Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.');\n  }\n\n  if (name === 'webgpu') {\n    const backend = new WebGpuBackend();\n    await backend.initialize(env, gpuAdapter!);\n\n    jsepInit('webgpu', [\n      // backend\n      backend,\n\n      // jsepAlloc()\n      (size: number) => backend.alloc(size),\n\n      // jsepFree()\n      (ptr: number) => backend.free(ptr),\n\n      // jsepCopy(src, dst, size, isSourceGpu)\n      (src: number, dst: number, size: number, isSourceGpu = false) => {\n        if (isSourceGpu) {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n          backend.memcpy(src, dst);\n        } else {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n          const data = module.HEAPU8.subarray(src >>> 0, (src >>> 0) + size);\n          backend.upload(dst, data);\n        }\n      },\n\n      // jsepCopyAsync(src, dst, size)\n      async (gpuDataId: number, dataOffset: number, size: number): Promise<void> => {\n        LOG_DEBUG(\n          'verbose',\n          () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`,\n        );\n\n        await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset >>> 0, (dataOffset >>> 0) + size));\n      },\n\n      // jsepCreateKernel\n      (kernelType: string, kernelId: number, attribute: unknown) =>\n        backend.createKernel(kernelType, kernelId, attribute, module.UTF8ToString(module._JsepGetNodeName!(kernelId))),\n\n      // jsepReleaseKernel\n      (kernel: number) => backend.releaseKernel(kernel),\n\n      // jsepRun\n      (kernel: number, contextDataOffset: number, sessionHandle: number, errors: Array<Promise<string | null>>) => {\n        LOG_DEBUG(\n          'verbose',\n          () =>\n            `[WebGPU] jsepRun: sessionHandle=${sessionHandle}, kernel=${kernel}, contextDataOffset=${contextDataOffset}`,\n        );\n        const context = new ComputeContextImpl(module, backend, contextDataOffset);\n        return backend.computeKernel(kernel, context, errors);\n      },\n      // jsepCaptureBegin\n      () => backend.captureBegin(),\n      // jsepCaptureEnd\n      () => backend.captureEnd(),\n      // jsepReplay\n      () => backend.replay(),\n    ]);\n  } else {\n    const backend = new WebNNBackend(env);\n    jsepInit('webnn', [\n      backend,\n      // jsepReserveTensorId\n      () => backend.reserveTensorId(),\n      // jsepReleaseTensorId,\n      (tensorId: number) => backend.releaseTensorId(tensorId),\n      // jsepEnsureTensor\n      async (tensorId: number, onnxDataType: number, shape: number[], copyOld) =>\n        backend.ensureTensor(tensorId, onnxDataType, shape, copyOld),\n      // jsepUploadTensor\n      (tensorId: number, data: Uint8Array) => {\n        backend.uploadTensor(tensorId, data);\n      },\n      // jsepDownloadTensor\n      async (tensorId: number, dstBuffer: ArrayBufferView | ArrayBuffer) => backend.downloadTensor(tensorId, dstBuffer),\n    ]);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"jsep/webnn/webnn.d.ts\" />\n\nimport { Env, InferenceSession, Tensor } from 'onnxruntime-common';\n\nimport {\n  SerializableInternalBuffer,\n  SerializableSessionMetadata,\n  SerializableTensorMetadata,\n  TensorMetadata,\n} from './proxy-messages';\nimport { setRunOptions } from './run-options';\nimport { setSessionOptions } from './session-options';\nimport {\n  calculateTensorSizeInBytes,\n  dataLocationStringToEnum,\n  isGpuBufferSupportedType,\n  isMLTensorSupportedType,\n  logLevelStringToEnum,\n  tensorDataTypeEnumToString,\n  tensorDataTypeStringToEnum,\n  tensorTypeToTypedArrayConstructor,\n} from './wasm-common';\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError } from './wasm-utils';\nimport { loadFile } from './wasm-utils-load-file';\n\n// #region Initializations\n\n/**\n * There are 4 different \"initialization\" steps for ORT. They happen in different places and different time.\n *\n * 1. JavaScript initialization for onnxruntime-common and onnxruntime-web.\n *    This is the first initialization step. In this step, onnxruntime-web calls onnxruntime-common's registerBackend()\n * function multiple times to register all the available backends. The backend registration is very fast. It only\n * registers the backend name with the uninitialized backend object. No heavy initialization is done in this step.\n *    Refer to web/lib/index.ts for the backend registration.\n *\n * 2. WebAssembly artifact initialization.\n *    This happens when any registered wasm backend is used for the first time (ie. `ort.InferenceSession.create()` is\n * called). In this step, onnxruntime-web does the followings:\n *     - create a proxy worker and make sure the proxy worker is ready to receive messages, if proxy is enabled.\n *     - perform feature detection, locate correct WebAssembly artifact path and call the Emscripten generated\n * JavaScript code to initialize the WebAssembly runtime.\n *         - if proxy is enabled, this step happens in the proxy worker using message 'init-wasm'.\n *         - downloading the 'ort-wasm{...}.wasm' file is done in this step.\n *         - if multi-thread is enabled, one or more webworker will be created to initialize the PThread threadpool.\n *\n * 3. ORT environment initialization.\n *    This happens after step 2. In this step, onnxruntime-web performs ONNX Runtime environment initialization.\n * Function `_OrtInit()` is called in this step.\n *     - if proxy is enabled, this step happens in the proxy worker using message 'init-ort'.\n *     - logging level (ort.env.logLevel) and thread number (ort.env.wasm.numThreads) are set in this step.\n *\n * 4. Session initialization.\n *    This happens when `ort.InferenceSession.create()` is called. Unlike the first 3 steps (they only called once),\n * this step will be done for each session. In this step, onnxruntime-web does the followings:\n *    If the parameter is a URL:\n *    - download the model data from the URL.\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - dereference the model buffer. This step allows the original ArrayBuffer to be garbage collected.\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *    If the parameter is a Uint8Array object:\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *\n */\n\n/**\n * initialize ORT environment.\n *\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError(\"Can't initialize onnxruntime.\");\n  }\n};\n\n/**\n * initialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async (env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n};\n\n/**\n * perform EP specific initialization.\n *\n * @param env\n * @param epName\n */\nexport const initEp = async (env: Env, epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n\n    if (epName === 'webgpu') {\n      // perform WebGPU availability check\n      if (typeof navigator === 'undefined' || !navigator.gpu) {\n        throw new Error('WebGPU is not supported in current environment');\n      }\n\n      let adapter = env.webgpu.adapter as GPUAdapter | null;\n      if (!adapter) {\n        // if adapter is not set, request a new adapter.\n        const powerPreference = env.webgpu.powerPreference;\n        if (\n          powerPreference !== undefined &&\n          powerPreference !== 'low-power' &&\n          powerPreference !== 'high-performance'\n        ) {\n          throw new Error(`Invalid powerPreference setting: \"${powerPreference}\"`);\n        }\n        const forceFallbackAdapter = env.webgpu.forceFallbackAdapter;\n        if (forceFallbackAdapter !== undefined && typeof forceFallbackAdapter !== 'boolean') {\n          throw new Error(`Invalid forceFallbackAdapter setting: \"${forceFallbackAdapter}\"`);\n        }\n        adapter = await navigator.gpu.requestAdapter({ powerPreference, forceFallbackAdapter });\n        if (!adapter) {\n          throw new Error(\n            'Failed to get GPU adapter. ' +\n              'You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.',\n          );\n        }\n      } else {\n        // if adapter is set, validate it.\n        if (\n          typeof adapter.limits !== 'object' ||\n          typeof adapter.features !== 'object' ||\n          typeof adapter.requestDevice !== 'function'\n        ) {\n          throw new Error('Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.');\n        }\n      }\n\n      await initJsep('webgpu', getInstance(), env, adapter);\n    }\n    if (epName === 'webnn') {\n      // perform WebNN availability check\n      if (typeof navigator === 'undefined' || !(navigator as unknown as { ml: unknown }).ml) {\n        throw new Error('WebNN is not supported in current environment');\n      }\n\n      await initJsep('webnn', getInstance(), env);\n    }\n  }\n};\n\n// #endregion Initializations\n\n/**\n * valid data locations for input/output tensors.\n */\ntype SupportedTensorDataLocationForInputOutput = 'cpu' | 'cpu-pinned' | 'gpu-buffer' | 'ml-tensor';\n\ntype IOBindingState = {\n  /**\n   * the handle of IO binding.\n   */\n  readonly handle: number;\n\n  /**\n   * the preferred location for each output tensor.\n   *\n   * value is one of 'cpu', 'cpu-pinned', 'gpu-buffer', 'ml-tensor'.\n   */\n  readonly outputPreferredLocations: readonly SupportedTensorDataLocationForInputOutput[];\n\n  /**\n   * enum value of the preferred location for each output tensor.\n   */\n  readonly outputPreferredLocationsEncoded: readonly number[];\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded; bindingState\n */\ntype SessionMetadata = [\n  inferenceSessionId: number,\n  inputNamesUTF8Encoded: number[],\n  outputNamesUTF8Encoded: number[],\n  bindingState: IOBindingState | null,\n  enableGraphCapture: boolean,\n  inputOutputBound: boolean,\n];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError(\"Can't get session input/output count.\");\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * allocate the memory and memcpy the external buffer.\n *\n * @param model - the external buffer containing the model data. Must not be the same buffer as the WASM heap.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const copyFromExternalBuffer = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session from a model data buffer.\n *\n * @param modelData - either a Uint8Array object representing the model data, or a 2-elements tuple containing the\n *     pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSession = async (\n  modelData: Uint8Array | SerializableInternalBuffer,\n  options?: InferenceSession.SessionOptions,\n): Promise<SerializableSessionMetadata> => {\n  let modelDataOffset: number, modelDataLength: number;\n  const wasm = getInstance();\n\n  if (Array.isArray(modelData)) {\n    // if model data is an array, it must be a 2-elements tuple containing the pointer and size of the model data\n    [modelDataOffset, modelDataLength] = modelData;\n  } else if (modelData.buffer === wasm.HEAPU8.buffer) {\n    // if model data uses the same buffer as the WASM heap, we don't need to copy it.\n    [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n  } else {\n    // otherwise, copy the model data to the WASM heap.\n    [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n  }\n\n  let sessionHandle = 0;\n  let sessionOptionsHandle = 0;\n  let ioBindingHandle = 0;\n  let allocs: number[] = [];\n  const inputNamesUTF8Encoded = [];\n  const outputNamesUTF8Encoded = [];\n\n  try {\n    [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n    if (options?.externalData && wasm.mountExternalData) {\n      const loadingPromises = [];\n      for (const file of options.externalData) {\n        const path = typeof file === 'string' ? file : file.path;\n        loadingPromises.push(\n          loadFile(typeof file === 'string' ? file : file.data).then((data) => {\n            wasm.mountExternalData!(path, data);\n          }),\n        );\n      }\n\n      // wait for all external data files to be loaded\n      await Promise.all(loadingPromises);\n    }\n\n    for (const provider of options?.executionProviders ?? []) {\n      const providerName = typeof provider === 'string' ? provider : provider.name;\n      if (providerName === 'webnn') {\n        wasm.shouldTransferToMLTensor = false;\n        if (wasm.currentContext) {\n          throw new Error('WebNN execution provider is already set.');\n        }\n        if (typeof provider !== 'string') {\n          const webnnOptions = provider as InferenceSession.WebNNExecutionProviderOption;\n          const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const gpuDevice = (webnnOptions as InferenceSession.WebNNOptionsWebGpu)?.gpuDevice;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          const numThreads = (webnnOptions as InferenceSession.WebNNContextOptions)?.numThreads;\n          const powerPreference = (webnnOptions as InferenceSession.WebNNContextOptions)?.powerPreference;\n          if (context) {\n            wasm.currentContext = context as MLContext;\n          } else if (gpuDevice) {\n            wasm.currentContext = await navigator.ml.createContext(gpuDevice);\n          } else {\n            wasm.currentContext = await navigator.ml.createContext({ deviceType, numThreads, powerPreference });\n          }\n        } else {\n          wasm.currentContext = await navigator.ml.createContext();\n        }\n        break;\n      }\n    }\n\n    sessionHandle = await wasm._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n    if (sessionHandle === 0) {\n      checkLastError(\"Can't create a session.\");\n    }\n\n    // clear current MLContext after session creation\n    if (wasm.currentContext) {\n      wasm.jsepRegisterMLContext!(sessionHandle, wasm.currentContext);\n      wasm.currentContext = undefined;\n      wasm.shouldTransferToMLTensor = true;\n    }\n\n    const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n    const enableGraphCapture = !!options?.enableGraphCapture;\n\n    const inputNames = [];\n    const outputNames = [];\n    const outputPreferredLocations: SupportedTensorDataLocationForInputOutput[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError(\"Can't get an input name.\");\n      }\n      inputNamesUTF8Encoded.push(name);\n      inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError(\"Can't get an output name.\");\n      }\n      outputNamesUTF8Encoded.push(name);\n      const nameString = wasm.UTF8ToString(name);\n      outputNames.push(nameString);\n\n      if (!BUILD_DEFS.DISABLE_JSEP) {\n        if (enableGraphCapture && options?.preferredOutputLocation === undefined) {\n          outputPreferredLocations.push('gpu-buffer');\n          continue;\n        }\n        const location =\n          typeof options?.preferredOutputLocation === 'string'\n            ? options.preferredOutputLocation\n            : (options?.preferredOutputLocation?.[nameString] ?? 'cpu');\n        if (location !== 'cpu' && location !== 'cpu-pinned' && location !== 'gpu-buffer' && location !== 'ml-tensor') {\n          throw new Error(`Not supported preferred output location: ${location}.`);\n        }\n        if (enableGraphCapture && location !== 'gpu-buffer') {\n          throw new Error(\n            `Not supported preferred output location: ${location}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`,\n          );\n        }\n        outputPreferredLocations.push(location);\n      }\n    }\n\n    // use IO binding only when at least one output is preferred to be on GPU.\n    let bindingState: IOBindingState | null = null;\n    if (!BUILD_DEFS.DISABLE_JSEP && outputPreferredLocations.some((l) => l === 'gpu-buffer' || l === 'ml-tensor')) {\n      ioBindingHandle = wasm._OrtCreateBinding(sessionHandle);\n      if (ioBindingHandle === 0) {\n        checkLastError(\"Can't create IO binding.\");\n      }\n\n      bindingState = {\n        handle: ioBindingHandle,\n        outputPreferredLocations,\n        outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l)),\n      };\n    }\n\n    activeSessions.set(sessionHandle, [\n      sessionHandle,\n      inputNamesUTF8Encoded,\n      outputNamesUTF8Encoded,\n      bindingState,\n      enableGraphCapture,\n      false,\n    ]);\n    return [sessionHandle, inputNames, outputNames];\n  } catch (e) {\n    inputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n\n    if (ioBindingHandle !== 0) {\n      wasm._OrtReleaseBinding(ioBindingHandle);\n    }\n\n    if (sessionHandle !== 0) {\n      wasm._OrtReleaseSession(sessionHandle);\n    }\n    throw e;\n  } finally {\n    wasm._free(modelDataOffset);\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n\n    // unmount external data if necessary\n    wasm.unmountExternalData?.();\n  }\n};\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture] = session;\n\n  if (ioBindingState) {\n    if (enableGraphCapture) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n    }\n    wasm._OrtReleaseBinding(ioBindingState.handle);\n  }\n\n  wasm.jsepOnReleaseSession?.(sessionId);\n\n  inputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\nexport const prepareInputOutputTensor = (\n  tensor: TensorMetadata | null,\n  tensorHandles: number[],\n  allocs: number[],\n  sessionId: number,\n  index: number,\n  enableGraphCapture = false,\n): void => {\n  if (!tensor) {\n    tensorHandles.push(0);\n    return;\n  }\n\n  const wasm = getInstance();\n\n  const dataType = tensor[0];\n  const dims = tensor[1];\n  const location = tensor[3];\n\n  let rawData: number;\n  let dataByteLength: number;\n\n  if (dataType === 'string' && (location === 'gpu-buffer' || location === 'ml-tensor')) {\n    throw new Error('String tensor is not supported on GPU.');\n  }\n\n  if (enableGraphCapture && location !== 'gpu-buffer') {\n    throw new Error(\n      `External buffer must be provided for input/output index ${index} when enableGraphCapture is true.`,\n    );\n  }\n\n  if (location === 'gpu-buffer') {\n    const gpuBuffer = tensor[2].gpuBuffer as GPUBuffer;\n    dataByteLength = calculateTensorSizeInBytes(tensorDataTypeStringToEnum(dataType), dims)!;\n\n    const registerBuffer = wasm.jsepRegisterBuffer;\n    if (!registerBuffer) {\n      throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');\n    }\n    rawData = registerBuffer(sessionId, index, gpuBuffer, dataByteLength);\n  } else if (location === 'ml-tensor') {\n    const mlTensor = tensor[2].mlTensor as MLTensor;\n    dataByteLength = calculateTensorSizeInBytes(tensorDataTypeStringToEnum(dataType), dims)!;\n\n    const registerMLTensor = wasm.jsepRegisterMLTensor;\n    if (!registerMLTensor) {\n      throw new Error('Tensor location \"ml-tensor\" is not supported without using WebNN.');\n    }\n    rawData = registerMLTensor(mlTensor, tensorDataTypeStringToEnum(dataType), dims);\n  } else {\n    const data = tensor[2];\n\n    if (Array.isArray(data)) {\n      // string tensor\n      dataByteLength = 4 * data.length;\n      rawData = wasm._malloc(dataByteLength);\n      allocs.push(rawData);\n      let dataIndex = rawData / 4;\n      for (let i = 0; i < data.length; i++) {\n        if (typeof data[i] !== 'string') {\n          throw new TypeError(`tensor data at index ${i} is not a string`);\n        }\n        wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n      }\n    } else {\n      dataByteLength = data.byteLength;\n      rawData = wasm._malloc(dataByteLength);\n      allocs.push(rawData);\n      wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n    }\n  }\n\n  const stack = wasm.stackSave();\n  const dimsOffset = wasm.stackAlloc(4 * dims.length);\n  try {\n    let dimIndex = dimsOffset / 4;\n    dims.forEach((d) => (wasm.HEAP32[dimIndex++] = d));\n    const tensor = wasm._OrtCreateTensor(\n      tensorDataTypeStringToEnum(dataType),\n      rawData,\n      dataByteLength,\n      dimsOffset,\n      dims.length,\n      dataLocationStringToEnum(location),\n    );\n    if (tensor === 0) {\n      checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);\n    }\n    tensorHandles.push(tensor);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * perform inference run\n */\nexport const run = async (\n  sessionId: number,\n  inputIndices: number[],\n  inputTensors: TensorMetadata[],\n  outputIndices: number[],\n  outputTensors: Array<TensorMetadata | null>,\n  options: InferenceSession.RunOptions,\n): Promise<TensorMetadata[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n  const ioBindingState = session[3];\n  const enableGraphCapture = session[4];\n  const inputOutputBound = session[5];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputTensorHandles: number[] = [];\n  const outputTensorHandles: number[] = [];\n  const inputOutputAllocs: number[] = [];\n\n  const beforeRunStack = wasm.stackSave();\n  const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n  const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n  const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n  const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n  try {\n    // WebNN backend needs the active session to check MLTensors with the current context.\n    wasm.jsepOnRunStart?.(sessionHandle);\n\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      prepareInputOutputTensor(\n        inputTensors[i],\n        inputTensorHandles,\n        inputOutputAllocs,\n        sessionId,\n        inputIndices[i],\n        enableGraphCapture,\n      );\n    }\n\n    // create output tensors\n    for (let i = 0; i < outputCount; i++) {\n      prepareInputOutputTensor(\n        outputTensors[i],\n        outputTensorHandles,\n        inputOutputAllocs,\n        sessionId,\n        inputCount + outputIndices[i],\n        enableGraphCapture,\n      );\n    }\n\n    let inputValuesIndex = inputValuesOffset / 4;\n    let inputNamesIndex = inputNamesOffset / 4;\n    let outputValuesIndex = outputValuesOffset / 4;\n    let outputNamesIndex = outputNamesOffset / 4;\n    for (let i = 0; i < inputCount; i++) {\n      wasm.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n      wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n    }\n    for (let i = 0; i < outputCount; i++) {\n      wasm.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n      wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n    }\n\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState && !inputOutputBound) {\n      const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n\n      if (inputNamesUTF8Encoded.length !== inputCount) {\n        throw new Error(\n          `input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`,\n        );\n      }\n\n      // process inputs\n      for (let i = 0; i < inputCount; i++) {\n        const index = inputIndices[i];\n        const errorCode = await wasm._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n        if (errorCode !== 0) {\n          checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);\n        }\n      }\n\n      // process pre-allocated outputs\n      for (let i = 0; i < outputCount; i++) {\n        const index = outputIndices[i];\n        const location = outputTensors[i]?.[3]; // undefined means output is not pre-allocated.\n\n        if (location) {\n          // output is pre-allocated. bind the tensor.\n          const errorCode = wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);\n          }\n        } else {\n          // output is not pre-allocated. reset preferred location.\n          const errorCode = wasm._OrtBindOutput(\n            handle,\n            outputNamesUTF8Encoded[index],\n            0,\n            outputPreferredLocationsEncoded[index],\n          );\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n          }\n        }\n      }\n      activeSessions.set(sessionId, [\n        sessionHandle,\n        inputNamesUTF8Encoded,\n        outputNamesUTF8Encoded,\n        ioBindingState,\n        enableGraphCapture,\n        true,\n      ]);\n    }\n\n    let errorCode: number;\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState) {\n      errorCode = await wasm._OrtRunWithBinding(\n        sessionHandle,\n        ioBindingState.handle,\n        outputCount,\n        outputValuesOffset,\n        runOptionsHandle,\n      );\n    } else {\n      errorCode = await wasm._OrtRun(\n        sessionHandle,\n        inputNamesOffset,\n        inputValuesOffset,\n        inputCount,\n        outputNamesOffset,\n        outputCount,\n        outputValuesOffset,\n        runOptionsHandle,\n      );\n    }\n\n    if (errorCode !== 0) {\n      checkLastError('failed to call OrtRun().');\n    }\n\n    const output: TensorMetadata[] = [];\n\n    for (let i = 0; i < outputCount; i++) {\n      const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n      if (tensor === outputTensorHandles[i]) {\n        // output tensor is pre-allocated. no need to copy data.\n        output.push(outputTensors[i]!);\n        continue;\n      }\n\n      const beforeGetTensorDataStack = wasm.stackSave();\n      // stack allocate 4 pointer value\n      const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n      let keepOutputTensor = false;\n      let type: Tensor.Type | undefined,\n        dataOffset = 0;\n      try {\n        const errorCode = wasm._OrtGetTensorData(\n          tensor,\n          tensorDataOffset,\n          tensorDataOffset + 4,\n          tensorDataOffset + 8,\n          tensorDataOffset + 12,\n        );\n        if (errorCode !== 0) {\n          checkLastError(`Can't access output tensor data on index ${i}.`);\n        }\n        let tensorDataIndex = tensorDataOffset / 4;\n        const dataType = wasm.HEAPU32[tensorDataIndex++];\n        dataOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n        const dims = [];\n        for (let i = 0; i < dimsLength; i++) {\n          dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n        }\n        wasm._OrtFree(dimsOffset);\n\n        const size = dims.reduce((a, b) => a * b, 1);\n        type = tensorDataTypeEnumToString(dataType);\n\n        const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n\n        if (type === 'string') {\n          if (preferredLocation === 'gpu-buffer' || preferredLocation === 'ml-tensor') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n          const stringData: string[] = [];\n          let dataIndex = dataOffset / 4;\n          for (let i = 0; i < size; i++) {\n            const offset = wasm.HEAPU32[dataIndex++];\n            const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n            stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n          }\n          output.push([type, dims, stringData, 'cpu']);\n        } else {\n          // If a certain output's preferred location is GPU but the tensor is empty, we still need to create a CPU\n          // tensor for it. There is no mapping GPU buffer for an empty tensor.\n          if (preferredLocation === 'gpu-buffer' && size > 0) {\n            const getBuffer = wasm.jsepGetBuffer;\n            if (!getBuffer) {\n              throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');\n            }\n            const gpuBuffer = getBuffer(dataOffset);\n            const bufferSize = calculateTensorSizeInBytes(dataType, size);\n            if (bufferSize === undefined || !isGpuBufferSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type,\n              dims,\n              {\n                gpuBuffer,\n                download: wasm.jsepCreateDownloader!(gpuBuffer, bufferSize, type),\n                dispose: () => {\n                  wasm._OrtReleaseTensor(tensor);\n                },\n              },\n              'gpu-buffer',\n            ]);\n          } else if (preferredLocation === 'ml-tensor' && size > 0) {\n            const ensureTensor = wasm.jsepEnsureTensor;\n            if (!ensureTensor) {\n              throw new Error('preferredLocation \"ml-tensor\" is not supported without using WebNN.');\n            }\n            const tensorSize = calculateTensorSizeInBytes(dataType, size);\n            if (tensorSize === undefined || !isMLTensorSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // If the graph has been partitioned, the output tensor may have not been created. For this reason, we use\n            // ensureTensor to get/create the MLTensor. In which case, we don't need to copy the data if a new tensor\n            // has been created.\n            const mlTensor = await ensureTensor(dataOffset, dataType, dims, false);\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type,\n              dims,\n              {\n                mlTensor,\n                download: wasm.jsepCreateMLTensorDownloader!(dataOffset, type),\n                dispose: () => {\n                  wasm.jsepReleaseTensorId!(dataOffset);\n                  wasm._OrtReleaseTensor(tensor);\n                },\n              },\n              'ml-tensor',\n            ]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(\n              wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength),\n            );\n            output.push([type, dims, data, 'cpu']);\n          }\n        }\n      } finally {\n        wasm.stackRestore(beforeGetTensorDataStack);\n        if (type === 'string' && dataOffset) {\n          wasm._free(dataOffset);\n        }\n        if (!keepOutputTensor) {\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n    }\n\n    if (ioBindingState && !enableGraphCapture) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n      activeSessions.set(sessionId, [\n        sessionHandle,\n        inputNamesUTF8Encoded,\n        outputNamesUTF8Encoded,\n        ioBindingState,\n        enableGraphCapture,\n        false,\n      ]);\n    }\n    return output;\n  } finally {\n    wasm.stackRestore(beforeRunStack);\n\n    inputTensorHandles.forEach((v) => wasm._OrtReleaseTensor(v));\n    outputTensorHandles.forEach((v) => wasm._OrtReleaseTensor(v));\n    inputOutputAllocs.forEach((p) => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach((p) => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError(\"Can't get an profile file name.\");\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensorMetadata[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && 'buffer' in data) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env, InferenceSession } from 'onnxruntime-common';\n\nimport {\n  OrtWasmMessage,\n  SerializableInternalBuffer,\n  SerializableSessionMetadata,\n  SerializableTensorMetadata,\n  TensorMetadata,\n} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport { initializeWebAssembly } from './wasm-factory';\nimport { importProxyWorker } from './wasm-utils-import';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker | undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\nlet temporaryObjectUrl: string | undefined;\n\ntype PromiseCallbacks<T = void> = [resolve: (result: T) => void, reject: (reason: unknown) => void];\nlet initWasmCallbacks: PromiseCallbacks;\nconst queuedCallbacks: Map<OrtWasmMessage['type'], Array<PromiseCallbacks<unknown>>> = new Map();\n\nconst enqueueCallbacks = (type: OrtWasmMessage['type'], callbacks: PromiseCallbacks<unknown>): void => {\n  const queue = queuedCallbacks.get(type);\n  if (queue) {\n    queue.push(callbacks);\n  } else {\n    queuedCallbacks.set(type, [callbacks]);\n  }\n};\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      if (temporaryObjectUrl) {\n        URL.revokeObjectURL(temporaryObjectUrl);\n        temporaryObjectUrl = undefined;\n      }\n      break;\n    case 'init-ep':\n    case 'copy-from':\n    case 'create':\n    case 'release':\n    case 'run':\n    case 'end-profiling': {\n      const callbacks = queuedCallbacks.get(ev.data.type)!;\n      if (ev.data.err) {\n        callbacks.shift()![1](ev.data.err);\n      } else {\n        callbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    }\n    default:\n  }\n};\n\nexport const initializeWebAssemblyAndOrtRuntime = async (): Promise<void> => {\n  if (initialized) {\n    return;\n  }\n  if (initializing) {\n    throw new Error(\"multiple calls to 'initWasm()' detected.\");\n  }\n  if (aborted) {\n    throw new Error(\"previous call to 'initWasm()' failed.\");\n  }\n\n  initializing = true;\n\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n\n      void importProxyWorker().then(([objectUrl, worker]) => {\n        try {\n          proxyWorker = worker;\n          proxyWorker.onerror = (ev: ErrorEvent) => reject(ev);\n          proxyWorker.onmessage = onProxyWorkerMessage;\n          initWasmCallbacks = [resolve, reject];\n          const message: OrtWasmMessage = { type: 'init-wasm', in: env };\n          proxyWorker.postMessage(message);\n          temporaryObjectUrl = objectUrl;\n        } catch (e) {\n          reject(e);\n        }\n      }, reject);\n    });\n  } else {\n    try {\n      await initializeWebAssembly(env.wasm);\n      await core.initRuntime(env);\n      initialized = true;\n    } catch (e) {\n      aborted = true;\n      throw e;\n    } finally {\n      initializing = false;\n    }\n  }\n};\n\nexport const initializeOrtEp = async (epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('init-ep', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'init-ep', in: { epName, env } };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initEp(env, epName);\n  }\n};\n\nexport const copyFromExternalBuffer = async (buffer: Uint8Array): Promise<SerializableInternalBuffer> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableInternalBuffer>((resolve, reject) => {\n      enqueueCallbacks('copy-from', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'copy-from', in: { buffer } };\n      proxyWorker!.postMessage(message, [buffer.buffer]);\n    });\n  } else {\n    return core.copyFromExternalBuffer(buffer);\n  }\n};\n\nexport const createSession = async (\n  model: SerializableInternalBuffer | Uint8Array,\n  options?: InferenceSession.SessionOptions,\n): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check unsupported options\n    if (options?.preferredOutputLocation) {\n      throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      enqueueCallbacks('create', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'create', in: { model, options: { ...options } } };\n      const transferable: Transferable[] = [];\n      if (model instanceof Uint8Array) {\n        transferable.push(model.buffer);\n      }\n      proxyWorker!.postMessage(message, transferable);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async (sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('release', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'release', in: sessionId };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async (\n  sessionId: number,\n  inputIndices: number[],\n  inputs: TensorMetadata[],\n  outputIndices: number[],\n  outputs: Array<TensorMetadata | null>,\n  options: InferenceSession.RunOptions,\n): Promise<TensorMetadata[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check inputs location\n    if (inputs.some((t) => t[3] !== 'cpu')) {\n      throw new Error('input tensor on GPU is not supported for proxy.');\n    }\n    // check outputs location\n    if (outputs.some((t) => t)) {\n      throw new Error('pre-allocated output tensor is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableTensorMetadata[]>((resolve, reject) => {\n      enqueueCallbacks('run', [resolve, reject]);\n      const serializableInputs = inputs as SerializableTensorMetadata[]; // every input is on CPU.\n      const message: OrtWasmMessage = {\n        type: 'run',\n        in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options },\n      };\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(serializableInputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, outputs, options);\n  }\n};\n\nexport const endProfiling = async (sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('end-profiling', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'end-profiling', in: sessionId };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  InferenceSession,\n  InferenceSessionHandler,\n  SessionHandler,\n  Tensor,\n  TRACE_FUNC_BEGIN,\n  TRACE_FUNC_END,\n} from 'onnxruntime-common';\n\nimport { SerializableInternalBuffer, TensorMetadata } from './proxy-messages';\nimport { copyFromExternalBuffer, createSession, endProfiling, releaseSession, run } from './proxy-wrapper';\nimport { isGpuBufferSupportedType, isMLTensorSupportedType } from './wasm-common';\nimport { isNode } from './wasm-utils-env';\nimport { loadFile } from './wasm-utils-load-file';\n\nexport const encodeTensorMetadata = (tensor: Tensor, getName: () => string): TensorMetadata => {\n  switch (tensor.location) {\n    case 'cpu':\n      return [tensor.type, tensor.dims, tensor.data, 'cpu'];\n    case 'gpu-buffer':\n      return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, 'gpu-buffer'];\n    case 'ml-tensor':\n      return [tensor.type, tensor.dims, { mlTensor: tensor.mlTensor }, 'ml-tensor'];\n    default:\n      throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);\n  }\n};\n\nexport const decodeTensorMetadata = (tensor: TensorMetadata): Tensor => {\n  switch (tensor[3]) {\n    case 'cpu':\n      return new Tensor(tensor[0], tensor[2], tensor[1]);\n    case 'gpu-buffer': {\n      const dataType = tensor[0];\n      if (!isGpuBufferSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);\n      }\n      const { gpuBuffer, download, dispose } = tensor[2];\n      return Tensor.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });\n    }\n    case 'ml-tensor': {\n      const dataType = tensor[0];\n      if (!isMLTensorSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing MLTensor tensor`);\n      }\n      const { mlTensor, download, dispose } = tensor[2];\n      return Tensor.fromMLTensor(mlTensor, { dataType, dims: tensor[1], download, dispose });\n    }\n    default:\n      throw new Error(`invalid data location: ${tensor[3]}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements InferenceSessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async fetchModelAndCopyToWasmMemory(path: string): Promise<SerializableInternalBuffer> {\n    // fetch model from url and move to wasm heap.\n    return copyFromExternalBuffer(await loadFile(path));\n  }\n\n  async loadModel(pathOrBuffer: string | Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    TRACE_FUNC_BEGIN();\n    let model: Parameters<typeof createSession>[0];\n\n    if (typeof pathOrBuffer === 'string') {\n      if (isNode) {\n        // node\n        model = await loadFile(pathOrBuffer);\n      } else {\n        // browser\n        // fetch model and copy to wasm heap.\n        model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);\n      }\n    } else {\n      model = pathOrBuffer;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n    TRACE_FUNC_END();\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach((kvp) => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputArray: Array<Tensor | null> = [];\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach((kvp) => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputArray.push(tensor);\n      outputIndices.push(index);\n    });\n\n    const inputs = inputArray.map((t, i) =>\n      encodeTensorMetadata(t, () => `input \"${this.inputNames[inputIndices[i]]}\"`),\n    );\n    const outputs = outputArray.map((t, i) =>\n      t ? encodeTensorMetadata(t, () => `output \"${this.outputNames[outputIndices[i]]}\"`) : null,\n    );\n\n    const results = await run(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);\n\n    const resultMap: SessionHandler.ReturnType = {};\n    for (let i = 0; i < results.length; i++) {\n      resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);\n    }\n    TRACE_FUNC_END();\n    return resultMap;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Backend, env, InferenceSession, InferenceSessionHandler } from 'onnxruntime-common';\n\nimport { initializeOrtEp, initializeWebAssemblyAndOrtRuntime } from './wasm/proxy-wrapper';\nimport { OnnxruntimeWebAssemblySessionHandler } from './wasm/session-handler-inference';\nimport { scriptSrc } from './wasm/wasm-utils-import';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (env.wasm.simd === false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Deprecated property \"env.wasm.simd\" is set to false. ' +\n        'non-SIMD build is no longer provided, and this setting will be ignored.',\n    );\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.trace !== 'boolean') {\n    env.wasm.trace = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    // The following logic only applies when `ort.env.wasm.numThreads` is not set by user. We will always honor user's\n    // setting if it is provided.\n\n    // Browser: when crossOriginIsolated is false, SharedArrayBuffer is not available so WebAssembly threads will not\n    // work. In this case, we will set numThreads to 1.\n    //\n    // There is an exception: when the browser is configured to force-enable SharedArrayBuffer (e.g. Chromuim with\n    // --enable-features=SharedArrayBuffer), it is possible that `self.crossOriginIsolated` is false and\n    // SharedArrayBuffer is available at the same time. This is usually for testing. In this case,  we will still set\n    // numThreads to 1 here. If we want to enable multi-threading in test, we should set `ort.env.wasm.numThreads` to a\n    // value greater than 1.\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      env.wasm.numThreads = 1;\n    } else {\n      const numCpuLogicalCores =\n        typeof navigator === 'undefined' ? require('node:os').cpus().length : navigator.hardwareConcurrency;\n      env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n    }\n  }\n\n  if (!BUILD_DEFS.DISABLE_DYNAMIC_IMPORT) {\n    // overwrite wasm paths override if not set\n    if (env.wasm.wasmPaths === undefined && scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n      env.wasm.wasmPaths = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n    }\n  }\n};\n\nexport class OnnxruntimeWebAssemblyBackend implements Backend {\n  /**\n   * This function initializes the WebAssembly backend.\n   *\n   * This function will be called only once for each backend name. It will be called the first time when\n   * `ort.InferenceSession.create()` is called with a registered backend name.\n   *\n   * @param backendName - the registered backend name.\n   */\n  async init(backendName: string): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyAndOrtRuntime();\n\n    // performe EP specific initialization\n    await initializeOrtEp(backendName);\n  }\n  createInferenceSessionHandler(\n    path: string,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n  createInferenceSessionHandler(\n    buffer: Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n  async createInferenceSessionHandler(\n    pathOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow bundler to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow bundler remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport * as ort from 'onnxruntime-common';\nexport default ort;\n\nimport { registerBackend, env } from 'onnxruntime-common';\nimport { version } from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    registerBackend('webgpu', wasmBackend, 5);\n    registerBackend('webnn', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n}\n\nObject.defineProperty(env.versions, 'web', { value: version, enumerable: true });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.20.0';\n"]}